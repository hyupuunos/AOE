;(load "aPromi\extremeBuildings") not stable enough for inclusion in this update

#load-if-defined CRATER-MAP ;this needs to be ahead of the regular 2nd LC rule to override it

(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp < 2)
	(building-type-count-total town-center > 0)
	(current-age == dark-age)
	(game-time < 720)
	(cc-players-unit-type-count 0 snow-pine-tree > 0)
	(can-build lumber-camp)
=>
	(up-full-reset-search)
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: snow-pine-tree c: 40)
	
	(up-clean-search search-remote object-data-distance search-order-asc)
;	(chat-local-to-self "searching for 2nd LC spot")
)


(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp < 2)
	(building-type-count-total town-center > 0)
	(current-age == dark-age)
	(game-time < 720)
	(cc-players-unit-type-count 0 snow-pine-tree > 0)
	(can-build lumber-camp)
=>
	(up-set-target-point position-self-x)
	(up-clean-search search-remote -1 search-order-asc)
	(up-set-target-object search-remote c: 1)
	(up-get-point position-object point-x)
	(up-modify-goal sn-focus-player-number g:= temporary-goal7)
	(set-goal temporary-goal3 8)
)

;End jump (-2)
(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp < 2)
	(building-type-count-total town-center > 0)
	(current-age == dark-age)
	(game-time < 720)
	(cc-players-unit-type-count 0 413 > 0)
	(can-build lumber-camp)
	(up-can-build-line 0 point-x c: lumber-camp)
=>
	(up-build-line point-x point-x c: lumber-camp)
	(chat-local-to-self "Place custom LC")
	(up-jump-rule 1)
)


(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp < 2)
	(building-type-count-total town-center > 0)
	(current-age == dark-age)
	(game-time < 720)
	(cc-players-unit-type-count 0 413 > 0)
	(can-build lumber-camp)
	(up-compare-goal temporary-goal3 > 0)
=>
	(up-modify-goal temporary-goal3 c:- 1)
	(up-lerp-tiles point-x position-self-x c: 1)
;	(up-send-flare point-x)
	(up-jump-rule -2)
)
;End jump (1)

#end-if



(defrule
	(goal migration-state 1)
=>
	(up-jump-rule 3))
(defrule
	(up-pending-objects c: lumber-camp <= 0)
	(resource-found wood)
	(building-type-count-total town-center <= 0)
;	(building-type-count lumber-camp <= 0)
	(game-time >= 180)
	(wood-amount < tc-wood)
	(dropsite-min-distance wood >= 6)
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 2)
	(build lumber-camp))
(defrule
	(up-pending-objects c: mining-camp <= 0)
	(resource-found stone)
	(building-type-count-total town-center <= 0)
;	(building-type-count mining-camp <= 0)
(or	(wood-amount >= tc-100-wood)
	(building-type-count-total lumber-camp >= 1))
	(stone-amount < tc-stone)
	(dropsite-min-distance stone >= 6)
	(dropsite-min-distance stone g:< map-size)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 2)
	(build mining-camp))
(defrule
	(up-pending-objects c: town-center <= 0)
	(building-type-count-total town-center < 1)
(or	(players-military-population every-ally <= 0)
	(not	(player-in-game any-ally)))
	(game-time >= 600); no nomad
	(can-build town-center)
=>
	(set-strategic-number sn-placement-to-center 1);test
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 2); 3
	(up-assign-builders c: town-center-foundation c: 1)
	(set-strategic-number sn-town-center-placement 0)
	(up-set-placement-data my-player-number -1 c: market-neg-dist); -50)
	(up-build place-control 0 c: town-center))
#load-if-not-defined WONDER-RACE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined MIGRATION-MAP
#load-if-not-defined NILE-DELTA-MAP
(defrule
(or	(goal migration-state 1)
	(and	(goal inseln yes)
		(goal tradecarts no)))
=>
	(up-jump-rule 2))
(defrule
	(up-pending-objects c: town-center == 0)
	(building-type-count-total town-center >= 1)
	(building-type-count-total town-center < 5)
	(goal underattack yes)
	(players-military-population any-ally >= 18)
	(can-build town-center)
=>
	(set-strategic-number sn-placement-to-center 1)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 2); 3
; nn	(up-assign-builders c: town-center-foundation c: 4)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-placement-zone-size 20); 25
	(up-set-placement-data this-any-ally -1 c: -30); -25
	(up-build place-control 0 c: town-center))
(defrule
	(up-pending-objects c: town-center == 0)
	(building-type-count-total town-center == 4)
(or	(civilian-population >= up-max-civ)
(or	(population >= max-civ-pop); intended
	(goal defend yes)))
	(players-military-population any-ally >= 18)
	(can-build town-center)
=>
	(set-strategic-number sn-placement-to-center 1)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 2); 3
; nn	(up-assign-builders c: town-center-foundation c: 1)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-placement-zone-size 20); 25
	(up-set-placement-data this-any-ally -1 c: -30); -25
	(up-build place-control 0 c: town-center)); end jump
#end-if
#end-if
#end-if
#else
(defrule
(or	(game-time > 5)
(or	(housing-headroom >= 2)
(or	(up-pending-objects c: house >= 1)
	(food-amount < vill-cost))))
	(building-type-count-total wonder <= 0)
	(can-build wonder)
=>
	(up-set-placement-data my-player-number villager-class c: 0)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: wonder)
	(acknowledge-taunt every-ally 37))
(defrule
	(up-compare-goal wwonder != yes)
	(building-type-count town-center >= 1)
=>
	(set-goal wwonder yes)
;	(disable-self)
)
(defrule
;	(goal fleet yes)
	(building-type-count-total dock <= 0)
	(strategic-number sn-current-age == dark)
	(current-age <= castle-age)
(or	(cc-players-unit-type-count 0 933 >= 1)
	(cc-players-unit-type-count 0 ocean-fish-class >= 1))
	(unit-type-count-total fishing-ship < 16)
	(civilian-population < up-max-civ)
	(building-type-count town-center >= 1)
	(goal increase-ts 0)
	(can-build dock)
=>
	(build dock))
(defrule
	(building-type-count-total market < 1)
(or	(current-age <= feudal-age)
	(and	(up-compare-goal excessFood >= 100)
		(up-compare-goal trainvillager != yes)))
	(building-type-count town-center >= 1)
	(up-compare-const inf-game != 1)
	(up-compare-goal excessWood >= market-cost)
	(building-available market)
	(goal increase-ts 0)
=>
	(set-goal increase-ts market)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total blacksmith < 1)
	(building-type-count-total market >= 1)
	(current-age <= feudal-age)
	(building-type-count town-center >= 1)
	(up-compare-goal excessWood >= smith-cost)
	(building-available blacksmith)
	(goal increase-ts 0)
=>
	(set-goal increase-ts blacksmith)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total monastery < 1)
	(current-age <= castle-age)
	(building-type-count town-center >= 1)
	(up-compare-goal excessWood >= mb-cost)
	(building-available monastery)
	(goal increase-ts 0)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
        (building-type-count-total siege-workshop < 1)
	(current-age <= castle-age)
	(building-type-count town-center >= 1)
	(building-available siege-workshop)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
#end-if
#load-if-defined CAPTURE-THE-RELIC; just in case
(defrule
	(building-type-count-total monastery < 1)
	(building-type-count town-center >= 1)
	(up-compare-goal excessWood >= mb-cost)
	(building-available monastery)
	(goal increase-ts 0)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
#end-if
#load-if-defined VICTORY-STANDARD
(defrule
	(taunt-detected any-ally 37)
	(building-type-count-total wonder <= 0)
=>
	(set-goal wwonder yes))
#end-if
(defrule
	(taunt-detected any-ally 37)
	(goal wwonder yes)
=>
	(chat-to-allies-using-id 22161); "39 At once, sire! I shall begin the Wonder as soon as possible!"
	(disable-self))
(defrule
	(taunt-detected any-ally 37)
	(up-compare-goal wwonder != yes)
=>
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 37))


(defrule ; debug rule
(or	(strategic-number sn-focus-player-number >= 9)
(or	(strategic-number sn-focus-player-number <= 0)
	(stance-toward focus-player ally)))
	(strategic-number sn-target-player-number >= 1)
	(strategic-number sn-target-player-number <= 8)
(not	(stance-toward target-player ally))
	(player-in-game target-player)
=>
	(chat-to-player my-player-number "Debugging focus player. -5")
	(up-modify-goal temporary-goal s:= sn-target-player-number); to prevent further bugs
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)); should be an enemy

(defrule
(or	(up-compare-const diff-fp <= 0)
(or	(up-timer-status threesec == timer-running)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(population >= max-civ-pop)
(or	(and	(up-pending-objects c: building-class <= 0)
		(up-pending-objects c: tower-class <= 0))
	(up-compare-goal gl-threat-time >= 32000))))))
=>
	(up-jump-rule 9))
(defrule
	(or(building-type-count town-center <= 0)
	(strategic-number sn-corner-cut-state > 2))
=>
	(up-jump-rule 8))
(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal4 0)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: building-class c: 8)
	(up-find-status-local c: tower-class c: 4))
(defrule; end neg jumps
	(up-set-target-object search-local g: temporary-goal)
	(up-object-data object-data-under-attack == 1)
	(up-object-data object-data-hitpoints < 32)
=>
	(up-get-object-data object-data-type temporary-goal3)
	(up-chat-data-to-player my-player-number "Deleting foundation for %d before it gets destroyed." g: temporary-goal3)
	(up-remove-objects search-local object-data-index g:!= temporary-goal)
	(up-target-point 0 action-delete -1 -1)
	(up-jump-rule 2))
(defrule
	(up-set-target-object search-local g: temporary-goal)
	(strategic-number sn-focus-player-number != my-player-number)
(not	(stance-toward focus-player ally))
	(player-valid focus-player)
=>
	(up-get-point position-object point-x)
	(up-set-target-point point-x)
	(up-filter-distance c: -1 c: 16)
	(up-find-remote c: castle c: 1)
	(up-find-remote c: krepost c: 1)
	(up-find-remote c: bombard-tower c: 1)
	(up-clean-search search-remote object-data-range search-order-desc)
	(up-set-target-object search-remote c: 0)
	(up-get-object-data object-data-range temporary-goal4)
	(up-modify-goal temporary-goal4 c:+ 3)
	(up-remove-objects search-remote object-data-distance g:>= temporary-goal4))
(defrule
	(up-compare-goal temporary-goal4 >= 1)
(not	(up-set-target-object search-remote c: 0))
	(goal defend yes)
	(strategic-number sn-military-superiority <= -2)
=>
	(up-reset-filters)
	(set-goal temporary-goal4 6)
	(up-modify-goal temporary-goal4 s:+ sn-current-age)
	(up-modify-goal temporary-goal4 c:min 12)
	(up-filter-distance c: -1 g: temporary-goal4)
	(up-find-remote c: watch-tower c: 5)
;todo	(up-find-remote c: donjon c: 5)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: all-units-class c: 5)
	(up-remove-objects search-remote object-data-index < 4))
(defrule
	(up-set-target-object search-local g: temporary-goal)
(not	(up-set-target-object search-remote c: 0))
	(strategic-number sn-focus-player-number != my-player-number)
(not	(stance-toward focus-player ally))
	(player-valid focus-player)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(set-goal temporary-goal4 0)
	(up-reset-filters)
	(up-reset-search 0 0 1 1)
	(up-jump-rule -4))
(defrule
(not	(up-set-target-object search-remote c: 0))
	(strategic-number sn-focus-player-number < 8)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal4 0)
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-reset-filters)
	(up-reset-search 0 0 1 1)
	(up-jump-rule -5))
(defrule
	(up-set-target-object search-remote c: 0)
(or	(and	(up-object-data object-data-type != castle)
		(and	(up-object-data object-data-type != krepost)
			(and	(up-object-data object-data-type != bombard-tower)
				(up-object-data object-data-type != watch-tower))))
	(goal defend yes))
	(goal patroldefense no)
	(up-set-target-object search-local g: temporary-goal)
=>
	(up-get-object-data object-data-type temporary-goal3)
	(up-chat-data-to-player my-player-number "Deleting foundation for %d near dangerous objects." g: temporary-goal3)
	(up-remove-objects search-local object-data-index g:!= temporary-goal)
	(up-target-point 0 action-delete -1 -1))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)); end jump


#load-if-not-defined WONDER-RACE
(defrule
(or	(and	(goal strategy fast-imp)
		(and	(up-research-status c: imperial-age <= research-pending)
			(up-compare-goal excessWood < tc-350-wood))); tc-175-wood
	(and	(building-type-count-total town-center >= 1)
		(and	(current-age <= feudal-age)
			(up-resource-amount amount-feudal-town-center <= 0))))
=>
	(up-jump-rule 5))
(defrule
	(strategic-number sn-current-age <= feudal)
	(up-compare-goal excessWood < tc-350-wood)
	(up-compare-goal total-food-amount >= castle-f2)
	(up-compare-goal total-gold-amount >= castle-g2)
(or	(and	(building-type-count-total stable <= 0)
		(building-type-count-total archery-range <= 0))
	(and	(building-type-count-total market <= 0)
		(building-type-count-total blacksmith <= 0)))
	(up-research-status c: castle-age <= research-unavailable)
=>
	(up-jump-rule 4))
(defrule
;	(up-pending-objects c: town-center < 2)
(or	(building-type-count-total monastery >= 1)
	(up-compare-goal excessWood >= 195))
	(building-type-count-total town-center >= 1)
	(building-type-count-total town-center < 3)
	(up-compare-goal excessWood >= tc-wood)
	(stone-amount >= tc-stone)
	(building-available town-center)
	(goal increase-ts 0)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(set-strategic-number sn-town-center-placement 0)
; nn	(up-assign-builders c: town-center-foundation c: 4)
	(set-goal increase-ts town-center)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop))
	(goal uugoal yes)
	(building-type-count-total town-center >= 2)
(or	(building-type-count-total town-center >= 3)
	(building-type-count-total castle <= 0))
	(building-type-count-total castle <= 1)
	(stone-amount < castle-tc-stone)
=>
	(up-jump-rule 2))
(defrule
;	(up-pending-objects c: town-center < 2); 1
	(building-type-count-total town-center == 3)
(or	(building-type-count-total farm g:>= maxfarms)
(or	(civilian-population < up-max-civ);	(unit-type-count-total villager < up-max-civ)
	(building-type-count-total castle >= 1))); 2
	(up-compare-goal excessWood >= tc-wood)
	(stone-amount >= tc-stone)
	(building-available town-center)
	(goal increase-ts 0)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
;	(set-strategic-number sn-town-center-placement 0)
; nn	(up-assign-builders c: town-center-foundation c: 4)
	(set-goal increase-ts town-center)
	(enable-timer increase-ts-timer 7))
(defrule
;	(up-pending-objects c: town-center < 2); 1
	(building-type-count-total town-center == 3)
(or	(up-compare-goal excessWood >= tc-175-wood)
(or	(strategic-number sn-current-age >= imperial)
	(up-research-status c: imperial-age >= research-available)))
	(up-compare-goal excessWood >= tc-wood)
	(stone-amount >= tc-stone)
	(building-available town-center)
	(goal increase-ts 0)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3)
;	(set-strategic-number sn-town-center-placement 0)
; nn	(up-assign-builders c: town-center-foundation c: 4)
	(set-goal increase-ts town-center)
	(enable-timer increase-ts-timer 7)); end jumps

(defrule
(or	(up-compare-goal increase-ts != town-center)
(or	(building-type-count-total town-center <= 0)
	(game-time >= 600)))
=>
	(up-jump-rule 2))
(defrule
	(up-compare-goal custom-civ-pop < up-max-civ)
=>
	(up-modify-goal temporary-goal g:= villagercounttotal)
	(up-modify-goal temporary-goal2 g:= total-food-amount)
	(up-modify-goal temporary-goal2 c:/ vill-cost)
	(up-modify-goal temporary-goal2 c:/ 2);
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-get-fact unit-type-count-total fishing-ship temporary-goal2)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-get-fact building-type-count-total town-center temporary-goal3)
	(up-modify-goal temporary-goal3 c:* 6)
	(up-modify-goal temporary-goal3 c:+ 1))
(defrule
	(up-compare-goal custom-civ-pop < up-max-civ)
	(up-compare-goal temporary-goal g:< temporary-goal3)
=>
	(set-goal increase-ts 0)); end jump
(defrule
	(timer-triggered MSuperiority); twentysec
	(goal increase-ts town-center)
	(building-type-count-total town-center >= 1)
	(housing-headroom < 2)
	(population-headroom > 0)
=>
	(chat-local-to-self "Clearing TC from building queue.")
	(up-reset-placement c: town-center)
	(set-goal increase-ts 0))
(defrule
	(goal increase-ts town-center)
	(up-compare-const dm-game == 1)
	(game-time < 210)
	(building-type-count-total dm-building < 8); 10
	(unit-type-count-total villager < 16)
	(building-type-count town-center >= 1)
=>
;	(chat-local-to-self "Clearing TC from building queue.2")
	(set-goal increase-ts 0))
#else; wonder-race
(defrule
	(building-type-count-total wonder >= 1)
=>
;	(chat-local-to-self "Deleting buildings for space.")
	(up-assign-builders c: wonder c: 100)
	(up-delete-objects c: mill c: 32767)
	(up-delete-objects c: lumber-camp c: 32767)
	(up-delete-objects c: mining-camp c: 32767)
	(up-delete-objects c: blacksmith c: 32767)
	(up-delete-objects c: market c: 32767)
	(up-delete-objects c: monastery c: 32767)
	(up-delete-objects c: siege-workshop c: 32767))
(defrule
	(building-type-count-total wonder >= 1)
	(up-research-status c: ri-treadmill-crane != research-available)
	(up-research-status c: ri-treadmill-crane != research-pending)
(not	(can-research ri-treadmill-crane))
=>
	(up-delete-objects c: university c: 32767))
(defrule
	(building-type-count-total wonder >= 1)
	(unit-type-count villager < up-max-civ)
	(unit-type-count villager < 50)
(nor	(and	(or	(housing-headroom >= 1)
					(and	(up-pending-objects c: house >= 1)
						(population-headroom >= 1)))
			(and	(goal trainvillager yes)
				(food-amount >= vill-cost)))
	(up-pending-objects c: villager >= 1))
=>
	(up-delete-objects c: town-center c: 32767))
#end-if
(defrule
	(building-type-count house >= 1)
(or	(and	(research-completed ri-nomads)
		(population-headroom <= 0))
	(and	(up-compare-const wr-game == 1)
		(and	(building-type-count-total wonder >= 1)
			(building-type-count-total town-center <= 0))))
=>
	(up-delete-objects c: house c: 32767))
(defrule
	(goal migration-state 1)
	(goal increase-ts town-center)
;	(building-type-count-total town-center >= 1)
=>
	(chat-local-to-self "Clearing TC from building queue.3")
	(set-goal increase-ts 0))
#load-if-not-defined WONDER-RACE
#load-if-defined VICTORY-STANDARD
(defrule
(or	(unit-type-count villager >= up-max-civ)
	(unit-type-count villager >= 6))
	(building-type-count-total wonder >= 1)
	(building-type-count-total castle < 20)
;	(goal increase-ts 0)
	(can-build castle)
=>
	(up-set-placement-data my-player-number wonder c: 2)
	(up-build place-control 0 c: castle))
#load-if-not-defined ISLANDS-MAP
(defrule
(or	(unit-type-count villager >= up-max-civ)
	(unit-type-count villager >= 6))
	(players-building-type-count any-ally wonder >= 1)
	(building-type-count-total castle < 20)
	(building-type-count-total castle >= 1)
(or	(building-type-count-total castle >= 2)
	(goal position-goal pocket))
	(goal inseln no)
;	(goal increase-ts 0)
	(can-build castle)
=>
	(up-set-placement-data this-any-ally wonder c: 2)
	(up-build place-control 0 c: castle))
#end-if
(defrule
	(building-type-count-total castle >= 1)
	(building-type-count-total wonder >= 1)
(or	(up-compare-const dm-game != 1)
(or	(up-compare-const diff-id <= 0)
(or	(players-building-type-count any-ally bombard-tower >= 1)
	(players-building-type-count any-enemy bombard-tower >= 1))))
	(building-type-count-total bombard-tower < 20)
;	(goal increase-ts 0)
	(can-build bombard-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-set-placement-data my-player-number wonder c: 2)
	(up-build place-control 0 c: bombard-tower))
#load-if-not-defined ISLANDS-MAP
(defrule
	(building-type-count-total castle >= 2)
	(players-building-type-count any-ally wonder >= 1)
(or	(up-compare-const dm-game != 1)
(or	(up-compare-const diff-id <= 0)
(or	(players-building-type-count any-ally bombard-tower >= 1)
	(players-building-type-count any-enemy bombard-tower >= 1))))
	(building-type-count-total bombard-tower < 20)
	(goal inseln no)
;	(goal increase-ts 0)
	(can-build bombard-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-set-placement-data this-any-ally wonder c: 2)
	(up-build place-control 0 c: bombard-tower))
#end-if

#end-if
#end-if

(defrule
(or	(up-compare-goal migration-state != 1)
;(or	(up-research-status c: feudal-age < research-pending)
;(or	(not	(can-build dock))
(or	(unit-type-count transport-ship >= 1)
	(building-type-count-total dock >= 1))););)
=>
	(up-jump-rule 8))
(defrule
	(can-build dock)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
=>
	(build dock)
	(up-jump-rule 7))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal g:= map-size)
	(up-modify-goal temporary-goal2 g:= map-size)
	(up-copy-point point-x position-self-x)
	(up-copy-point saved-point-x migration-point-x)
	(up-lerp-tiles point-x saved-point-x c: -8)
	(up-set-target-point point-x); jic
	(up-bound-precise-point point-x 0 c: 2)
	(up-bound-precise-point saved-point-x 0 c: 4))
(defrule
;	(can-build dock)
(not	(up-can-build-line escrow-state point-x c: dock))
	(up-point-distance point-x saved-point-x >= 4)
=>
	(up-lerp-tiles point-x saved-point-x c: 1)
;	(up-send-flare point-x)
	(up-jump-rule -1))
(defrule
	(up-compare-goal temporary-goal >= 1)
(not	(up-can-build-line escrow-state point-x c: dock))
=>
	(up-modify-goal temporary-goal c:- tile-jump)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal saved-point-x g:= temporary-goal)
	(up-copy-point point-x position-self-x)
	(up-lerp-tiles point-x saved-point-x c: -8)
	(up-set-target-point point-x); jic
	(up-bound-precise-point point-x 0 c: 2)
	(up-bound-precise-point saved-point-x 0 c: 4)
	(up-jump-rule -2))
(defrule
	(up-compare-goal temporary-goal2 >= 1)
(not	(up-can-build-line escrow-state point-x c: dock))
=>
	(up-modify-goal temporary-goal2 c:- tile-jump)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal saved-point-y g:= temporary-goal2)
	(up-copy-point point-x position-self-x)
	(up-lerp-tiles point-x saved-point-x c: -8)
	(up-set-target-point point-x); jic
	(up-bound-precise-point point-x 0 c: 2)
	(up-bound-precise-point saved-point-x 0 c: 4)
	(up-jump-rule -3))
(defrule
	(up-can-build-line escrow-state point-x c: dock)
=>
;	(chat-local-to-self "Found a suitable spot for our dock.")
;	(up-send-flare point-x)
	(up-build-line point-x point-x c: dock)
	(up-jump-rule 1))
(defrule
(not	(up-can-build-line escrow-state point-x c: dock))
	(can-build dock)
=>
;	(chat-local-to-self "Didn't find suitable spot for our dock.")
	(build dock))
(defrule
	(can-build dock)
	(game-time >= 48); jic
=>
	(build dock)); end jumps

(defrule
	(goal migration-state 1)
	(up-pending-objects c: house <= 0)
	(housing-headroom <= 0)
	(population-headroom >= 1)
	(unit-type-count-total transport-ship <= 0)
	(building-type-count-total dock >= 1)
	(unit-type-count villager >= 1)
;	(goal increase-ts 0)
	(can-build house)
=>
	(up-set-placement-data my-player-number villager-class c: 1)
	(set-strategic-number sn-placement-zone-size 3)
	(up-build place-control 0 c: house))



(defrule
	(up-pending-placement c: house)
	(timer-triggered one-min)
	(housing-headroom <= 0)
	(population-headroom > 0)
=>
	(chat-local-to-self "Clearing house from building queue.")
	(up-modify-sn sn-maximum-town-size s:min sn-safe-town-size)
	(up-reset-placement c: house))

(defrule
(or	(game-time >= 10)
(or	(up-compare-const diff-fp != 1)
(or	(goal nomaden yes)
(or	(housing-headroom >= 3)
(or	(unit-type-count villager <= 0)
	(not	(can-build house)))))))
=>
	(up-jump-rule 20));changed from 18
(defrule
(or	(up-pending-objects c: house >= 2)
(or	(and	(up-compare-const dm-game == 1)
		(up-pending-objects c: house >= 1))
	(goal landnomad yes)))
=>
	(up-jump-rule 19));changed from 17
(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal point2-x -1)
	(set-goal point3-x -1))
(defrule
(or	(unit-type-count villager <= 1)
	(and	(up-pending-objects c: house == 1)
		(unit-type-count villager-builder >= house-builders)))
=>
	(set-goal temporary-goal 2)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1))
(defrule
	(goal temporary-goal 2)
	(up-set-target-object search-local c: 0)
=>
;	(chat-local-to-self "Remaining vill.")
	(set-goal temporary-goal 1)
	(up-get-point position-object point-x)
	(up-jump-rule 4))
(defrule
	(building-type-count-total house == 0)
=>
	(set-goal temporary-goal 0)
	(up-full-reset-search)
	(up-find-local c: villager-class c: 3))
(defrule
	(goal temporary-goal 0)
	(up-set-target-object search-local c: 2)
=>
	(set-goal temporary-goal 1)
	(up-get-point position-object point3-x)
	(up-set-target-object search-local c: 1)
	(up-get-point position-object point2-x)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object point-x)
	(up-get-point-distance point-x point2-x temporary-goal2)
	(up-get-point-distance point-x point3-x temporary-goal3))
(defrule
	(goal temporary-goal 1)
	(up-compare-goal point2-x >= 0)
	(up-compare-goal point3-x >= 0)
(or	(up-point-distance point2-x point3-x g:>= temporary-goal2)
	(up-point-distance point2-x point3-x g:>= temporary-goal3))
=>
;	(chat-local-to-self "Readjusting.")
	(up-full-reset-search)
	(up-set-target-point point-x)
	(up-find-local c: villager-class c: 16)
	(up-clean-search search-local object-data-precise-distance search-order-asc)
	(up-set-target-object search-local c: 1)
	(up-get-point position-object point2-x)
	(up-lerp-tiles point-x point2-x c: 1)
	(up-jump-rule 1))
(defrule
	(goal temporary-goal 1)
	(up-compare-goal point2-x >= 0)
	(up-compare-goal point3-x >= 0)
	(up-point-distance point2-x point3-x g:< temporary-goal2)
	(up-point-distance point2-x point3-x g:< temporary-goal3)
=>
;	(chat-local-to-self "Readjusting.2")
	(up-copy-point point-x point2-x)
	(up-copy-point point2-x point3-x)
	(up-lerp-tiles point-x point2-x c: 1)); end jump
(defrule
	(goal temporary-goal 1)
=>
	(up-lerp-tiles point-x position-self-x c: -1)
	(up-copy-point saved-point-x point-x)
	(set-goal temporary-goal4 1)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 3))
(defrule
	(goal temporary-goal 1)
	(up-compare-goal point-x g:> position-self-x)
	(up-compare-goal point-y g:> position-self-y)
=>
;	(chat-local-to-self "Readjusting.3")
	(up-lerp-tiles point-x position-self-x c: -1))

(defrule
	(goal temporary-goal 1)
	(up-point-distance point-x position-self-x < 6)
	=>
;	(set-goal temporary-goal8 500)
	(set-goal temporary-goal9 10);set goal 9 to arbitary value to make sure it isn't already 0
	(up-bound-point point-x point-x) ;verify that these are valid points
	(up-bound-point position-self-x position-self-x)
	)

(defrule
	(goal temporary-goal 1)
	(up-point-distance point-x position-self-x < 6)
;	(up-compare-goal temporary-goal8 > 0) ;Commented out jump limiter according to Promi advice
	(up-compare-goal temporary-goal9 != 0)
=>
;	(up-modify-goal temporary-goal8 c:- 1)
	(up-lerp-tiles point-x position-self-x c: -1)
	(up-get-point-distance point-x position-self-x temporary-goal9)
	(up-jump-rule -1))

;(defrule
;	(or(goal temporary-goal8 0)
;	(goal temporary-goal9 0))
;	(goal temporary-goal 1)
;	=>
;	(chat-to-player my-player-number "Debug: this message should not appear (potential freeze)")
;	(disable-self)
;	)

(defrule
	(goal temporary-goal 1)
	(up-can-build-line 0 point-x c: house)
	(up-point-distance point-x position-self-x >= 6)
=>
	(up-build-line point-x point-x c: house)
	(up-jump-rule 6))
(defrule
	(goal temporary-goal 1)
	(goal temporary-goal4 1)
	(up-compare-goal temporary-goal6 > 0)
=>
	(set-goal temporary-goal4 2)
	(up-copy-point point-x saved-point-x)
	(up-lerp-tiles point-x position-self-x g: temporary-goal5)
	(up-cross-tiles point-x position-self-x c: 1)
	(up-jump-rule -2))
(defrule
	(goal temporary-goal 1)
	(goal temporary-goal4 2)
=>
	(set-goal temporary-goal4 3)
	(up-copy-point point-x saved-point-x)
	(up-lerp-tiles point-x position-self-x g: temporary-goal5)
	(up-cross-tiles point-x position-self-x c: -1)
	(up-jump-rule -3))
(defrule
	(goal temporary-goal 1)
	(goal temporary-goal4 3)
	(up-compare-goal temporary-goal6 > 0)
=>
	(set-goal temporary-goal4 1)
	(up-modify-goal temporary-goal5 c:- 1)
	(up-modify-goal temporary-goal6 c:- 1)
	(up-copy-point point-x saved-point-x)
	(up-lerp-tiles point-x position-self-x g: temporary-goal5)
	(up-jump-rule -4))
(defrule
	(building-type-count-total house == 0)
	(can-build house)
=>
	(up-set-placement-data my-player-number villager-class c: 1)
	(set-strategic-number sn-placement-zone-size 3); 2
	(up-build place-control 0 c: house)
	(disable-self))
(defrule
	(unit-type-count villager-builder >= house-builders)
	(up-pending-objects c: house == 1)
	(unit-type-count villager >= 3)
	(can-build house)
=>
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object building-point-x)
	(up-lerp-tiles building-point-x position-self-x c: -1)
	(up-set-target-point building-point-x))
(defrule
	(up-set-target-object search-local c: 0)
	(up-pending-objects c: house == 1)
	(unit-type-count villager >= 3)
	(can-build house)
=>
	(set-strategic-number sn-placement-zone-size 3); 2
	(up-assign-builders c: house c: 1)
	(up-build place-point 0 c: house)
	(disable-self)); end jump; end jump

#load-if-defined WONDER-RACE
(defrule
(or	(housing-headroom >= 4)
(or	(and	(up-pending-objects c: house >= 1)
		(game-time >= 30))
(or	(goal trainvillager no)
	(and	(up-compare-goal excessFood < vill-cost)
		(strategic-number sn-food-gatherer-percentage <= 0)))))
=>
;	(chat-local-to-self "Delaying house.0")
	(up-jump-rule 25))
#end-if
(defrule
	(strategic-number sn-current-age <= dfeudal)
	(unit-type-count-total villager <= 5)
	(up-pending-objects c: house >= 2)
	(building-type-count-total barracks < number-barracks)
	(up-compare-goal excessWood >= 5000)
=>
;	(chat-local-to-self "Delaying house.6")
	(up-jump-rule 24))
(defrule
;(or	(up-compare-goal increase-ts != 0)
(or	(game-time < 10)
(or	(building-type-count-total town-center <= 0)
(or	(up-compare-goal excessWood < house-cost)
(or	(not	(building-available house))
(or	(unit-type-count villager <= 0)
	(population-headroom <= 0))))));)
=>
	(up-jump-rule 23))
(defrule
	(strategic-number sn-current-age == feudal)
	(housing-headroom >= 3)
	(building-type-count-total blacksmith <= 0)
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal total-food-amount >= 620); 660
	(up-research-status c: castle-age != research-available); hmmmm
	(gold-amount >= 140); 130
	(up-compare-goal excessWood < 150)
=>
	(up-jump-rule 22))
(defrule
	(game-time < 42)
(or	(up-compare-const dm-game == 1)
	(and	(up-pending-objects c: house >= 2)
		(housing-headroom >= 8)))
	(up-pending-objects c: house >= 1)
;	(housing-headroom >= 1)
	(building-type-count town-center <= 1)
	(unit-type-count villager < 10)
=>
;	(chat-local-to-self "Delaying house.")
	(up-jump-rule 21))
(defrule
	(game-time < 600); 420
	(unit-type-count villager < 30); 16
	(up-compare-goal excessWood < housetc-cost)
(or	(up-pending-objects c: house >= 1)
	(housing-headroom >= 6)); 8
	(building-type-count town-center <= 1)
	(building-type-count-total barracks <= 0)
	(building-type-count-total stable <= 0)
	(building-type-count-total archery-range <= 0)
;	(building-type-count-total monastery <= 0)
	(building-type-count-total siege-workshop <= 0)
;	(building-type-count-total krepost <= 0)
;	(building-type-count-total castle <= 0)
	(building-type-count-total dock <= 0)
=>
;	(chat-local-to-self "Delaying house.2")
	(up-jump-rule 20))
(defrule
	(housing-headroom >= 1)
(or	(up-pending-objects c: house >= 5)
(or	(and	(strategic-number sn-current-age < dfeudal)
		(up-pending-objects c: house >= 2))
	(and	(strategic-number sn-current-age < fcastlea)
		(up-pending-objects c: house >= 3))))
=>
;	(chat-local-to-self "Delaying house.3")
	(up-jump-rule 19))
(defrule
	(game-time < 720)
	(unit-type-count villager < 36)
	(up-compare-goal excessWood < housetc-cost)
(or	(up-pending-objects c: house >= 2)
	(housing-headroom >= 12))
	(building-type-count town-center <= 2)
	(building-type-count-total barracks <= 1)
	(building-type-count-total stable <= 1)
	(building-type-count-total archery-range <= 1)
;	(building-type-count-total monastery <= 1)
	(building-type-count-total siege-workshop <= 1)
;	(building-type-count-total krepost <= 0)
;	(building-type-count-total castle <= 0)
	(building-type-count-total dock <= 1)
=>
;	(chat-local-to-self "Delaying house.4")
	(up-jump-rule 18))
(defrule
	(game-time < 900)
	(unit-type-count villager < 42)
	(up-compare-goal excessWood < housetc-cost)
(or	(up-pending-objects c: house >= 3)
	(housing-headroom >= 18))
	(building-type-count town-center <= 3)
	(building-type-count-total barracks <= 1)
	(building-type-count-total stable <= 1)
	(building-type-count-total archery-range <= 1)
;	(building-type-count-total monastery <= 1)
	(building-type-count-total siege-workshop <= 1)
;	(building-type-count-total krepost <= 0)
;	(building-type-count-total castle <= 0)
	(building-type-count-total dock <= 1)
=>
;	(chat-local-to-self "Delaying house.5")
	(up-jump-rule 17))
(defrule
	(goal increase-ts 0)
	(up-pending-objects c: house == 0)
; test	(strategic-number sn-current-age <= dfeudal)
	(housing-headroom < 4)
(or	(housing-headroom < 3)
	(and	(strategic-number sn-current-age >= dfeudal)
		(or	(food-amount >= 100);	(up-compare-goal total-food-amount >= 100);	(food-amount >= 50)
			(or	(population >= 8)
				(up-pending-objects c: villager >= 2))))); 1
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))

(defrule
	(goal increase-ts 0)
	(up-pending-objects c: house == 0)
	(strategic-number sn-current-age == dark)
	(housing-headroom < 5)
(or	(building-type-count-total dock >= 1)
	(and	(goal strategy drush)
		(building-type-count-total barracks >= 1)))
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))

(defrule
	(goal increase-ts 0)
	(up-pending-objects c: house == 0)
(or	(and	(housing-headroom < 7); 7
		(strategic-number sn-current-age <= dfeudal))
	(and	(housing-headroom < 9); 13
		(strategic-number sn-current-age >= feudal)))
	(building-type-count-total town-center >= 2)
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))

(defrule
	(goal increase-ts 0)
	(up-pending-objects c: house == 0)
	(strategic-number sn-current-age == feudal)
	(housing-headroom < 6)
(or	(or	(building-type-count-total blacksmith >= 1)
		(and	(goal strategy sling)
			(building-type-count-total market >= 1)))
	(housing-headroom < 3)); 5
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))

(defrule
(or	(up-compare-goal strategy-type != feudal-war)
(or	(up-compare-goal strategy == sling)
	(up-compare-goal strategy == s-flush)))
	(building-type-count-total barracks < 2)
	(building-type-count-total archery-range < 2)
	(building-type-count-total stable < 2)
	(up-compare-goal strategy != r-flush)
=>
	(up-jump-rule 5))
(defrule
	(up-pending-objects c: house == 0);	(up-pending-objects c: house < 2)
	(goal increase-ts 0)
(or	(building-type-count-total barracks >= 1)
(or	(building-type-count-total archery-range >= 1)
	(building-type-count-total stable >= 1)))
	(strategic-number sn-current-age == feudal)
	(current-age-time >= 8)
(or	(housing-headroom < 6)
	(and	(building-type-count blacksmith >= 1)
		(housing-headroom < 8)))
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-pending-objects c: house < 2)
	(goal increase-ts 0)
;	(strategic-number sn-current-age == feudal)
;	(goal strategy r-flush)
;	(building-type-count-total blacksmith >= 1)
	(building-type-count-total archery-range >= 2)
(or	(housing-headroom < 8)
	(building-type-count-total archery-range >= 3))
(or	(housing-headroom < 10)
	(building-type-count-total archery-range >= 4))
	(housing-headroom < 12)
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-pending-objects c: house < 2)
	(goal increase-ts 0)
;	(strategic-number sn-current-age == feudal)
;	(building-type-count-total blacksmith >= 1)
	(building-type-count-total stable >= 2)
(or	(housing-headroom < 8)
	(building-type-count-total stable >= 3))
(or	(housing-headroom < 10)
	(building-type-count-total stable >= 4))
	(housing-headroom < 12)
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-pending-objects c: house < 2)
	(goal increase-ts 0)
;	(strategic-number sn-current-age == feudal)
;	(building-type-count-total blacksmith >= 1)
	(building-type-count-total dock >= 2)
(or	(housing-headroom < 8)
	(building-type-count-total dock >= 3))
(or	(housing-headroom < 10)
	(building-type-count-total dock >= 4))
	(housing-headroom < 12)
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-pending-objects c: house < 2)
	(goal increase-ts 0)
;	(strategic-number sn-current-age == feudal)
;	(building-type-count-total blacksmith >= 1)
	(building-type-count-total barracks >= 2)
(or	(housing-headroom < 8)
	(building-type-count-total barracks >= 3))
(or	(housing-headroom < 10)
	(building-type-count-total barracks >= 4))
	(housing-headroom < 12)
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7)); end mini jump

(defrule
	(up-compare-goal custom-civ-pop < up-max-civ)
	(goal dreitc no)
	(up-compare-goal excessWood < housetc-cost)
	(stone-amount >= tc-stone)
	(building-available town-center)
(or	(up-compare-goal strategy-type >= imperial-war)
	(goal attacking no))
(or (and	(up-pending-objects c: house >= 1)
		(housing-headroom >= 5))
	(housing-headroom >= 10))
=>
	(up-jump-rule 2))
(defrule
(or	(strategic-number sn-current-age == fcastlea)
	(and	(strategic-number sn-current-age == castlea)
		(current-age-time < 15)))
(or (and	(up-pending-objects c: house >= 1)
		(housing-headroom >= 3))
	(housing-headroom >= 7))
=>
	(up-jump-rule 1))
(defrule
	(up-pending-objects c: house < 2)
	(goal increase-ts 0)
	(strategic-number sn-current-age >= fcastlea)
(or	(and	(population >= 64)
		(housing-headroom < 20))
(or	(and	(or	(population >= 42);	(building-type-count-total monastery >= 1)
				(goal dreitc yes))
		(housing-headroom < 16)); 20
	(housing-headroom < 10))); 10
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7)); end jump
(defrule
	(up-research-status c: imperial-age == research-pending)
(or	(and	(goal strategy fast-imp)
		(not	(civ-selected portuguese)))
	(goal uugoal yes))
(or	(up-pending-objects c: house >= 2)
	(housing-headroom >= 15))
=>
	(up-jump-rule 1))
(defrule
	(up-pending-objects c: house < 3)
	(goal increase-ts 0)
	(strategic-number sn-current-age >= imperial)
	(housing-headroom < 30); 25
(or	(housing-headroom < 20); 20
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(up-compare-goal excessWood >= 300)
(or	(up-compare-goal excessFood >= 300)
	(up-compare-goal excessGold >= 300)))))
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-pending-objects c: house < 3)
	(goal increase-ts 0)
	(strategic-number sn-current-age >= imperial)
	(housing-headroom < 30)
(or	(housing-headroom < 25)
	(goal traineagle yes))
	(goal strategy stonewall)
	(building-type-count-total barracks >= 5)
(or	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
	(building-type-count-total barracks >= 6))
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-pending-objects c: house < 5)
	(goal increase-ts 0)
(or	(and	(up-pending-objects c: house < 3); 4
		(unit-type-count-total villager >= 7)); 6
	(unit-type-count-total villager >= 10)); 8
	(housing-headroom < 40)
	(up-compare-goal excessWood >= 900)
	(up-compare-goal excessFood >= 900)
	(up-compare-goal excessGold >= 900)
(or	(strategic-number sn-current-age >= dfeudal); fcastlea
	(up-research-status c: feudal-age >= research-available))
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7)); jump end

	
#load-if-not-defined UP-SCENARIO-GAME
;#load-if-defined DEBUG
(defrule
(or	(up-compare-goal camp-walls >= 32767)
(or	(game-time >= 1040)
(or	(up-compare-goal focus-mpop >= 7)
(or	(players-current-age focus-player >= castle-age)
(or	(up-compare-goal my-mpop g:> focus-mpop)
(or	(current-age >= castle-age)
	(strategic-number sn-current-age >= imperial)))))))
=>
	(set-goal camp-walls 32767)
	(up-jump-rule 23))
(defrule
(or	(strategic-number archers >= 1)
(or	(strategic-number skirms >= 1)
(or	(strategic-number skirmsarchers >= 1)
(or	(strategic-number gunpowder >= 1)
(or	(strategic-number siege >= 1)
(or	(strategic-number moenche >= 1)
	(strategic-number moenchesiege >= 1)))))))
=>
	(set-goal camp-walls 32767)
	(up-jump-rule 22))
(defrule
(or	(up-compare-const diff-fp != 1)
(or	(and	(up-compare-goal camp-walls >= 1)
		(up-compare-goal focus-mpop < 2))
(or	(military-population >= 4); 6
(or	(civilian-population >= 32)
(or	(unit-type-count villager-stone >= 4)
	(unit-type-count villager-gold >= 4))))))
=>
	(set-goal camp-walls 32767)
	(up-jump-rule 21))
(defrule
(or	(game-time < 4)
(or	(up-compare-goal camp-walls >= 1)
(or	(building-type-count mining-camp <= 0)
(or	(and	(unit-type-count villager-gold <= 0)
		(unit-type-count villager-stone <= 0))
(or	(up-compare-goal targetdistance >= 100); 126
(or	(up-compare-goal focus-mpop < 2)
	(players-current-age focus-player >= feudal-age)))))))
=>
	(up-jump-rule 20))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal inseln yes)
(or	(building-type-count stone-wall-line >= 8)
(or	(building-type-count palisade-wall >= 24)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 19))
;#end-if
(defrule
	(true)
=>
	(set-strategic-number sn-target-point-adjustment adjust-middle)
	(set-goal temporary-goal 0)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
	(set-goal temporary-goal8 0)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search))
(defrule
	(building-type-count mining-camp >= 1)
=>
	(up-find-local c: mining-camp c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object point-x)
	(up-copy-point point3-x point-x)
	(up-set-target-point point-x)
	(up-filter-distance c: -1 c: 4); 4
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: gold c: 8);(up-find-remote c: gold-mine c: 8)
	(up-find-resource c: stone c: 8);(up-find-remote c: stone-mine c: 8)
	(up-clean-search search-remote object-data-precise-distance search-order-asc)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object point2-x)
	(up-get-search-state local-total)
;	(up-chat-data-to-player my-player-number "local-total: %d" g: local-total)
;	(up-chat-data-to-player my-player-number "remote-total: %d" g: remote-total)
)
(defrule
	(building-type-count mining-camp >= 1)
	(up-compare-goal remote-total >= 1)
	(up-compare-goal local-total >= 1)
=>
	(up-copy-point temporary-point-x point-x)
	(up-modify-goal temporary-point-x c:- 1)
	(up-copy-point saved-point-x point-x)
	(up-modify-goal saved-point-x c:- 1)
	(up-modify-goal saved-point-y c:- 1)
	(up-copy-point object-point-x point-x)
	(up-modify-goal object-point-y c:- 1)
	(up-get-point-distance point-x point2-x temporary-goal5)
	(up-get-point-distance temporary-point-x point2-x temporary-goal6)
	(up-get-point-distance saved-point-x point2-x temporary-goal7)
	(up-get-point-distance object-point-x point2-x temporary-goal8))
(defrule
	(building-type-count mining-camp >= 1)
	(up-compare-goal remote-total >= 1)
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal5 g:<= temporary-goal6)
	(up-compare-goal temporary-goal5 g:<= temporary-goal7)
	(up-compare-goal temporary-goal5 g:<= temporary-goal8)
=>
	(up-modify-goal temporary-goal4 g:= temporary-goal5)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 2))
(defrule
	(building-type-count mining-camp >= 1)
	(up-compare-goal remote-total >= 1)
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal6 g:<= temporary-goal5)
	(up-compare-goal temporary-goal6 g:<= temporary-goal7)
	(up-compare-goal temporary-goal6 g:<= temporary-goal8)
=>
	(up-modify-goal temporary-goal4 g:= temporary-goal6)
	(up-copy-point point-x temporary-point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 2))
(defrule
	(building-type-count mining-camp >= 1)
	(up-compare-goal remote-total >= 1)
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal7 g:<= temporary-goal5)
	(up-compare-goal temporary-goal7 g:<= temporary-goal6)
	(up-compare-goal temporary-goal7 g:<= temporary-goal8)
=>
	(up-modify-goal temporary-goal4 g:= temporary-goal7)
	(up-copy-point point-x saved-point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 2))
(defrule
	(building-type-count mining-camp >= 1)
	(up-compare-goal remote-total >= 1)
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal8 g:<= temporary-goal5)
	(up-compare-goal temporary-goal8 g:<= temporary-goal6)
	(up-compare-goal temporary-goal8 g:<= temporary-goal7)
=>
	(up-modify-goal temporary-goal4 g:= temporary-goal8)
	(up-copy-point point-x object-point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 2))
(defrule
	(building-type-count mining-camp >= 1)
	(up-compare-goal remote-total >= 1)
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal4 >= 1); 2
=>
;	(up-chat-data-to-self "temporary-goal4: %d" g: temporary-goal4)
	(up-modify-goal temporary-goal4 c:- 2)
	(up-modify-goal temporary-goal4 c:/ 2)
	(up-modify-goal temporary-goal4 c:min 2)
	(up-modify-goal temporary-goal4 c:max 1)
	(up-lerp-tiles point-x point2-x g: temporary-goal4)
	(up-copy-point saved-point-x point-x)
	(up-cross-tiles point-x point2-x c: 1); 2
	(up-copy-point temporary-point-x point-x)
	(up-set-target-point saved-point-x)
	(set-goal temporary-goal3 269922))
(defrule
	(goal temporary-goal3 269922)
=>
;	(up-find-local c: villager-class c: 4)
	(up-find-local c: 579 c: 2)
	(up-find-local c: 581 c: 2)
	(up-find-local c: 124 c: 2)
	(up-find-local c: 220 c: 2)
	(up-get-search-state local-total)
;	(up-chat-data-to-player my-player-number "local-total: %d" g: local-total)
	(set-goal temporary-goal3 269923))
(defrule
	(goal temporary-goal3 269923)
	(up-compare-goal local-total <= 1); 0
=>
	(up-jump-rule 6))
(defrule
	(goal temporary-goal3 269923)
=>
	(up-full-reset-search)
	(up-cross-tiles point-x saved-point-x c: 1))
(defrule
	(goal temporary-goal3 269923)
=>
;	(up-chat-data-to-self "point-x: %d" g: point-x)
;	(up-chat-data-to-self "point-y: %d" g: point-y)
	(up-copy-point object-point-x point-x)
	(up-lerp-tiles object-point-x saved-point-x c: 1)
	(up-set-target-point object-point-x)
	(up-filter-distance c: -1 c: 0)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: gold c: 8);(up-find-remote c: gold-mine c: 8)
	(up-find-resource c: stone c: 8);(up-find-remote c: stone-mine c: 8)
	(up-find-local c: palisade-wall c: 1)
	(up-find-local c: mining-camp c: 1)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: palisade-wall c: 1)
	(up-get-search-state local-total)
	(up-get-point-distance point2-x point-x temporary-goal5)
	(up-get-point-distance point2-x point3-x temporary-goal6))
(defrule
	(goal temporary-goal3 269923)
(or	(up-point-distance point-x saved-point-x >= 3)
	(up-compare-goal temporary-goal5 g:> temporary-goal6))
	(up-point-distance point-x saved-point-x >= 2)
=>
	(up-lerp-tiles point-x saved-point-x c: 1)
	(up-jump-rule -1))
(defrule
	(goal temporary-goal3 269923)
(or	(up-compare-goal remote-total >= 1)
	(up-compare-goal local-total >= 1))
=>
	(up-jump-rule 1))
(defrule
	(goal temporary-goal3 269923)
;(nor	(up-point-contains point-x c: mining-camp)
;(or	(up-point-contains point-x c: tree-class)
;(or	(up-point-contains point-x c: gold-mine-class)
;(or	(up-point-contains point-x c: stone-mine-class)
;(or	(up-point-contains point-x c: forage-bush-class)
;	(up-point-contains point-x c: relic))))))
;	(up-point-distance point-x saved-point-x <= 3)
	(up-can-build-line 0 point-x c: palisade-wall)
=>
	(set-goal camp-walls 1)
	(up-assign-builders c: wall-class c: 1)
	(up-build-line point-x point-x c: palisade-wall))
(defrule
	(goal temporary-goal3 269923)
;(or	(or	(up-compare-goal temporary-point-x g:!= point-x)
;		(up-compare-goal temporary-point-y g:!= point-y))
	(up-compare-goal temporary-goal <= 16);); 0
;	(up-compare-goal temporary-goal <= 32)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -6))
(defrule
	(building-type-count palisade-wall >= 1)
(or	(goal temporary-goal3 269922)
	(goal temporary-goal3 269923))
=>
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-full-reset-search)
	(up-set-target-point saved-point-x)
	(up-filter-distance c: -1 c: 2)
	(up-find-local c: villager-class c: 1)
	(up-find-remote c: palisade-wall c: 8)
	(up-set-target-object search-remote c: 0)
	(up-get-object-data object-data-maxhp temporary-goal4)
	(up-get-object-data object-data-hitpoints temporary-goal5)
	(up-modify-goal temporary-goal4 g:- temporary-goal5)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total >= 1)
	(wood-amount >= 1)
	(up-compare-goal temporary-goal4 >= 50)
	(building-type-count palisade-wall >= 1)
(or	(goal temporary-goal3 269922)
	(goal temporary-goal3 269923))
=>
	(up-target-objects 0 action-default -1 -1))
(defrule
	(true)
=>
;	(up-chat-data-to-all "temporary-goal: %d" g: temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(set-strategic-number sn-target-point-adjustment adjust-middle)); end jump
(defrule
	(up-compare-goal camp-walls >= 32767)
	(up-timer-status threesec != timer-running)
	(building-type-count palisade-wall >= 1)
	(building-type-count mining-camp >= 1)
;(or	(unit-type-count villager-gold >= 1)
;(or	(unit-type-count villager-stone >= 1)
;(or	(strategic-number sn-gold-gatherer-percentage >= 1)
;	(strategic-number sn-stone-gatherer-percentage >= 1))))
;(or	(up-gaia-type-count c: gold >= 1)
;	(up-gaia-type-count c: stone >= 1))
=>
	(set-goal temporary-goal6 1248812))
(defrule
	(goal temporary-goal6 1248812)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-full-reset-search)
	(up-find-remote c: mining-camp c: 16)
	(set-goal temporary-goal2 0))
(defrule
	(goal temporary-goal6 1248812)
	(up-set-target-object search-remote g: temporary-goal2)
=>
	(up-get-point position-object temporary-point-x)
	(up-set-target-point temporary-point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 5); 4
	(up-find-local c: palisade-wall c: 16)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: palisade-wall c: 16)
	(up-target-point 0 action-delete -1 -1)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-reset-filters);
	(up-reset-search 1 1 0 0)
	(up-jump-rule -1))
(defrule
	(goal temporary-goal6 1248812)
=>
	(up-modify-goal sn-focus-player-number g:= temporary-goal))
#end-if

(defrule ; debug rule
(or	(strategic-number sn-focus-player-number >= 9)
(or	(strategic-number sn-focus-player-number <= 0)
	(stance-toward focus-player ally)))
	(strategic-number sn-target-player-number >= 1)
	(strategic-number sn-target-player-number <= 8)
(not	(stance-toward target-player ally))
	(player-in-game target-player)
=>
	(chat-to-player my-player-number "Debugging focus player. -4")
	(up-modify-goal temporary-goal s:= sn-target-player-number); to prevent further bugs
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)); should be an enemy



#load-if-not-defined INFINITE-RESOURCES-START
(defrule
(or	(building-type-count-total town-center <= 0)
	(up-pending-objects c: lumber-camp >= 1))
=>
	(up-jump-rule 2))
(defrule
	(goal buildlumber yes)
	(resource-found wood)
	(dropsite-min-distance wood > 5)
	(dropsite-min-distance wood g:< map-size)
;(or	(building-type-count-total mill >= 1)
;	(goal buildmill no))
	(building-type-count-total lumber-camp >= 1)
	(strategic-number sn-camp-max-distance <= 30)
	(can-build lumber-camp)
=>
	(chat-local-to-self "Wood far away: New camp.")
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(up-modify-sn sn-camp-max-distance c:+ 4)
;	(up-modify-sn sn-camp-max-distance g:min map-size)
	(build lumber-camp)); end jump
#end-if

#load-if-defined ARABIA-MAP ;temp fix for arabia until it gets switched to one with closer wood

(defrule
	(building-type-count-total lumber-camp < 1)
	(building-type-count-total town-center > 0)
	(game-time < 600)
=>
	(up-full-reset-search)
;	(up-modify-goal temporary-goal7 s:= sn-focus-player-number)
	(up-get-point position-self temporary-point-x)
	(up-set-target-point temporary-point-x)
	(up-filter-distance c: 12 c: 35)
)

(defrule
	(not(up-find-resource c: wood c: 40))
	(building-type-count-total town-center > 0)
	(game-time < 600)
=>
;	(chat-to-player my-player-number "insufficent wood found")
	(up-jump-rule 3) ;4
)

#end-if

(defrule
(or	(building-type-count-total town-center <= 0)
	(building-type-count-total lumber-camp >= 1))
=>
	(up-jump-rule 2))
(defrule
	(up-pending-objects c: lumber-camp <= 0)
(not	(up-pending-placement c: lumber-camp))
	(goal buildlumber yes)
	(resource-found wood)
	(dropsite-min-distance wood >= 10); 12
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(chat-local-to-self "No stragglers: New camp.")
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp)); end jump
(defrule
(or	(resource-found wood)
	(and	(wood-amount >= 400)
		(game-time >= 30)))
	(goal buildlumber yes)
(or	(wood-amount >= 300); 600
	(building-type-count-total barracks >= 1))
	(strategic-number sn-current-age <= dark)
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp)
;	(disable-self)
); end jump
(defrule
	(resource-found wood)
	(goal buildlumber yes)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp < 1)
	(unit-type-count villager-wood >= 1)
(or	(up-compare-goal mysheep >= 1)
	(up-set-target-by-id g: current-boar))
	(up-compare-goal excessWood >= housecamp-cost)
	(strategic-number sn-current-age <= dark)
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp)
;	(disable-self)
)

(defrule
	(building-type-count-total lumber-camp >= 1)
	(dropsite-min-distance wood < 5)
	(goal strategy drush)
	(building-type-count-total barracks <= 0)
	(up-compare-goal excessWood < raxcamp-cost)
=>
	(up-jump-rule 10))
(defrule
	(game-time < 960)
(or	(dropsite-min-distance wood < 5)
	(strategic-number sn-wood-gatherer-percentage < 5))
(or	(game-time < 30)
	(and	(building-type-count-total lumber-camp >= 1)
		(and	(unit-type-count villager-wood < 3)
			(and	(civilian-population < up-max-civ)
				(and	(population < max-civ-pop)
					(up-compare-goal excessWood < housecamp-cost))))))
=>
	(up-jump-rule 6))
(defrule
(or	(up-compare-goal buildlumber != yes)
(or	(building-type-count-total mill <= 0)
(or	(building-type-count-total town-center <= 0)
(or	(up-pending-objects c: lumber-camp >= 1)
	(building-type-count-total lumber-camp >= 2)))))
=>
	(up-jump-rule 5))
(defrule
	(resource-found wood)
(or	(housing-headroom >= firstlc-housing)
(or	(up-compare-goal excessWood >= housecamp-cost)
(or	(up-pending-objects c: house >= 1)
	(unit-type-count-total villager >= 16))))
(or	(building-type-count-total mill >= 1)
	(goal buildmill no))
	(building-type-count-total lumber-camp < 1)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp))
(defrule
	(resource-found wood)
	(game-time > 90); scout
(or	(housing-headroom >= firstlc-housing)
(or	(up-pending-objects c: house >= 1)
	(up-compare-goal excessWood >= housecamp-cost)))
	(building-type-count-total mill >= 1)
	(building-type-count-total dock >= 1)
(or	(strategic-number sn-current-age == dark)
	(building-type-count-total mining-camp >= 1))
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp))
(defrule
(or	(and	(housing-headroom < 6)
		(up-compare-goal excessWood < housecamp-cost))
(or	(game-time < 90); scout
	(and	(goal map water)
		(and	(up-compare-goal excessWood < 170)
			(building-type-count-total dock <= 0)))))
=>
	(up-jump-rule 1))
(defrule
	(goal buildlumber yes)
	(resource-found wood)
	(building-type-count-total mill >= 1)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp == 1)
(or	(strategic-number sn-current-age <= dfeudal); == dark)
	(building-type-count-total mining-camp >= 1))
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp)); end jumps

(defrule
(or	(up-compare-goal buildlumber != yes)
(or	(unit-type-count villager-wood < 6)
(or	(building-type-count-total town-center <= 0)
	(building-type-count-total lumber-camp >= 3))))
=>
	(up-jump-rule 3))
(defrule
	(goal strategy fast-imp)
	(strategic-number sn-current-age <= castlea)
	(up-research-status c: imperial-age <= research-unavailable)
	(dropsite-min-distance wood < 5)
	(building-type-count-total lumber-camp >= 2)
	(up-compare-goal excessWood < fiprep-cost)
	(building-type-count-total siege-workshop <= 0)
	(building-type-count-total monastery <= 0)
=>
	(up-jump-rule 2))
(defrule
	(resource-found wood)
(or	(building-type-count-total blacksmith >= 1)
(or	(strategic-number sn-current-age >= dfeudal);(strategic-number sn-current-age != feudal)
(or	(research-available castle-age)
	(up-compare-goal excessWood >= 425))))
	(dropsite-min-distance wood >= 3); 4
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp))
(defrule
	(strategic-number sn-current-age == feudal)
	(resource-found wood)
(or	(building-type-count-total blacksmith >= 1)
	(up-research-status c: castle-age >= research-available))
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp)
	(disable-self)); end jumps

;Center walling
(defrule
	(not(goal walling-player yes))
=>
	(up-jump-rule 17)
)
(defrule
	(current-age == dark-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
=>
	(up-get-point position-center temporary-point-x)
	(up-get-point position-center point2-x)
	(up-get-point position-corner point-x)
	(set-goal temporary-goal3 50)
	(set-goal temporary-goal4 0)
	(up-lerp-percent point2-x point-x c: 15)
)


(defrule
	(current-age == dark-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(up-can-build-line 0 point2-x c: palisade-gate4)
=>
	(up-build-line point2-x point2-x c: palisade-gate4)
	(up-assign-builders c: palisade-gate-foundation4 c: 2)
)

(defrule
	
	(current-age == dark-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(building-type-count palisade-gate4 > 0)
	(up-can-build-line 0 point2-x c: palisade-wall)
	(up-pending-objects c: palisade-wall < 4)
=>
	(up-build-line point2-x point2-x c: palisade-wall)
	(up-jump-rule 3)
)

(defrule
	(current-age == dark-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	
	(building-type-count palisade-gate4 > 0)
	(up-point-contains point2-x c: tree-class)
=>
	(up-modify-goal temporary-goal4 c:+ 1)
)

(defrule
	(current-age == dark-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(building-type-count palisade-gate4 > 0)
	(up-compare-goal temporary-goal3 > 0)
	(up-compare-goal temporary-goal4 < 7)
=>
	(up-cross-tiles point2-x point-x c: 1)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-jump-rule -3)
)

;Copy of rule above in opposite direction



(defrule
	
	(current-age == dark-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(building-type-count palisade-gate4 > 0)
	(up-can-build-line 0 point2-x c: palisade-wall)
	(up-pending-objects c: palisade-wall < 4)
=>
	(up-build-line point2-x point2-x c: palisade-wall)
	(up-jump-rule 3)
)

(defrule
	(current-age == dark-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	
	(building-type-count palisade-gate4 > 0)
	(up-point-contains point2-x c: tree-class)
=>
	(up-modify-goal temporary-goal4 c:+ 1)
)

(defrule
	(current-age == dark-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(building-type-count palisade-gate4 > 0)
	(up-compare-goal temporary-goal3 > 0)
	(up-compare-goal temporary-goal4 < 7)
=>
	(up-cross-tiles point2-x point-x c: -1)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-jump-rule -3)
)

;Stone walling - we wall significantly behind palisade wall to prevent issues with archers/towers

(defrule
	(current-age == feudal-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
=>
	(up-get-point position-center temporary-point-x)
	(up-get-point position-center point2-x)
	(up-get-point position-corner point-x)
	(set-goal temporary-goal3 50)
	(set-goal temporary-goal4 0)
	(up-lerp-percent point2-x point-x c: 23)
)


(defrule
	(current-age == feudal-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(up-can-build-line 0 point2-x c: stone-gate4)
=>
	(up-build-line point2-x point2-x c: stone-gate4)
;	(up-assign-builders c: stone-gate-foundation4 c: 2)
)

(defrule
	
	(current-age == feudal-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(building-type-count gate > 0)
	(up-can-build-line 0 point2-x c: stone-wall)
	(up-pending-objects c: stone-wall < 1)
=>
	(up-build-line point2-x point2-x c: stone-wall)
	(up-jump-rule 3)
)

(defrule
	(current-age == feudal-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	
	(building-type-count gate > 0)
	(up-point-contains point2-x c: tree-class)
=>
	(up-modify-goal temporary-goal4 c:+ 1)
)

(defrule
	(current-age == feudal-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(building-type-count gate > 0)
	(up-compare-goal temporary-goal3 > 0)
	(up-compare-goal temporary-goal4 < 7)
=>
	(up-cross-tiles point2-x point-x c: 1)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-jump-rule -3)
)

;Copy of rule above in opposite direction



(defrule
	
	(current-age == feudal-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(building-type-count gate > 0)
	(up-can-build-line 0 point2-x c: stone-wall)
	(up-pending-objects c: stone-wall < 1)
=>
	(up-build-line point2-x point2-x c: stone-wall)
	(up-jump-rule 3)
)

(defrule
	(current-age == feudal-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	
	(building-type-count gate > 0)
	(up-point-contains point2-x c: tree-class)
=>
	(up-modify-goal temporary-goal4 c:+ 1)
)

(defrule
	(current-age == feudal-age)
	(up-compare-const CENTER-WALL == 1)
	(up-compare-const diff-fp == 1)
	(building-type-count gate > 0)
	(up-compare-goal temporary-goal3 > 0)
	(up-compare-goal temporary-goal4 < 7)
=>
	(up-cross-tiles point2-x point-x c: -1)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-jump-rule -3)
)


;End jump (17)
(defrule
	(false)
=>
	(do-nothing)
)

(defrule
	(false)
=>
	(do-nothing)
)
#load-if-not-defined INFINITE-RESOURCES-START
(defrule
	(up-pending-objects c: lumber-camp == 0)
	(goal buildlumber yes)
	(resource-found wood)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center >= 1)
(or	(up-compare-goal strategy-type == feudal-war)
	(building-type-count-total lumber-camp < 3))
	(strategic-number sn-current-age <= fcastlea)
	(unit-type-count villager-wood >= 6)
	(dropsite-min-distance wood > 4); 5
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp))

(defrule
	(up-pending-objects c: lumber-camp == 0)
	(resource-found wood)
;	(strategic-number sn-military-superiority >= 0)
	(goal underattack no)
	(goal defend no)
	(up-compare-goal relocating <= no)
	(game-time < 3600)
;	(goal buildlumber yes)
;	(building-type-count-total mill >= 1)
	(game-time >= 1500); 2100
(or	(building-type-count-total lumber-camp < 3)
	(game-time >= 1800)); 3000
	(building-type-count-total lumber-camp < 4)
	(unit-type-count villager-wood >= 15); 6
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
; tl	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp))

(defrule
(or	(up-compare-goal buildlumber != yes)
	(building-type-count-total town-center <= 0))
=>
	(up-jump-rule 6))
(defrule
	(goal strategy fast-imp)
	(strategic-number sn-current-age <= castlea)
	(dropsite-min-distance wood < 5)
	(building-type-count-total lumber-camp >= 2)
	(up-compare-goal excessWood < fiprep-cost)
	(building-type-count-total siege-workshop <= 0)
	(building-type-count-total monastery <= 0)
=>
	(up-jump-rule 5))
(defrule
	(up-pending-objects c: lumber-camp == 0)
	(resource-found wood)
	(building-type-count-total mill > 0)
; test	(building-type-count-total lumber-camp < 100)
(or	(up-compare-goal strategy-type <= feudal-war)
(or	(goal strategy sling)
(or	(dropsite-min-distance wood > 5)
	(strategic-number sn-current-age >= fcastlea)))); castlea
	(dropsite-min-distance wood > 3)
	(dropsite-min-distance wood g:< map-size)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp))
(defrule
; tl	(up-pending-objects c: lumber-camp <= 0)
	(goal rebuildcamp yes)
	(resource-found wood)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood g:< map-size)
	(building-type-count-total lumber-camp < timer-lcs)
(or	(unit-type-count 219 >= 1);Dead Lumberjacks
	(unit-type-count 228 >= 1))
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1); lower fail percentage for camps
	(set-strategic-number sn-dropsite-separation-distance 10);
	(build lumber-camp)
	(set-goal rebuildcamp no)
	(enable-timer rebuild-camp 306)
	(enable-timer upwood 180); test
	(chat-local-to-self "Building emergency lumber-camp."))
(defrule
	(timer-triggered upwood)
	(resource-found wood)
	(goal inseln no); hm
	(unit-type-count villager-wood >= 40); (unit-type-count-total villager > 75)
	(game-time >= 60)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood g:< map-size); 128?
	(building-type-count-total lumber-camp < timer-lcs)
	(can-build lumber-camp)
=>
	(disable-timer upwood)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp)
	(enable-timer upwood 150)
	(up-jump-rule 2))
(defrule
	(timer-triggered upwood)
	(resource-found wood)
	(goal inseln no); hm
	(unit-type-count villager-wood >= 30); (unit-type-count-total villager > 75)
	(game-time >= 60)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood g:< map-size); 128?
	(building-type-count-total lumber-camp < timer-lcs)
	(can-build lumber-camp)
=>
	(disable-timer upwood)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp)
	(enable-timer upwood 180)
	(up-jump-rule 1))
(defrule
	(timer-triggered upwood)
	(resource-found wood)
	(goal inseln no); hm
	(unit-type-count villager-wood >= 20)
	(game-time >= 60)
	(strategic-number sn-current-age >= feudal)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood g:< map-size); 128?
	(building-type-count-total lumber-camp < timer-lcs)
	(can-build lumber-camp)
=>
	(disable-timer upwood)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(build lumber-camp)
	(enable-timer upwood 240)); end jumps
#end-if


(defrule
	(goal strategy s-flush)
(or	(and	(up-compare-goal excessWood < farmcamp-cost)
		(and	(building-type-count-total farm g:< maxfarms)
			(building-type-count-total farm < 13)))
	(and	(strategic-number sn-gold-gatherer-percentage <= 0)
		(unit-type-count-total scout-cavalry-line < scrush-cap)))
=>
	(up-jump-rule 6))
(defrule
(or	(and	(or	(goal sk-var yes)
				(unit-type-count-total villager < 16))
		(strategic-number sn-gold-gatherer-percentage <= 0))
(or	(building-type-count-total town-center <= 0)
	(and	(goal strategy drush)
		(and	(strategic-number sn-current-age <= dark)
			(building-type-count-total barracks <= 0)))))
=>
	(up-jump-rule 5))
(defrule
;	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
	(goal map land)
   	(building-type-count-total lumber-camp >= 2)
   	(building-type-count-total mill >= 1)
	(unit-type-count-total villager >= 20)
(or	(up-research-status c: feudal-age >= research-pending)
(or	(unit-type-count-total villager >= 24)
	(up-compare-goal total-food-amount >= feudal-food))); feudal-f2
	(building-type-count-total mining-camp < 1)
	(dropsite-min-distance gold > 3); 5
	(dropsite-min-distance gold s:<= sn-camp-max-distance); < 255
	(can-build mining-camp)
=>
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))
(defrule
;	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
	(goal map land)
   	(building-type-count-total lumber-camp >= 1)
   	(building-type-count-total mill >= 1)
(or	(strategic-number sn-current-age >= dfeudal)
(or	(building-type-count-total barracks >= 1)
(or	(unit-type-count-total villager >= darkvills)
	(up-compare-goal total-food-amount >= 700))))
; tl	(up-compare-goal total-food-amount >= feudal-f2); 440
	(building-type-count-total mining-camp < 1)
	(dropsite-min-distance gold > 3); 5
	(dropsite-min-distance gold s:<= sn-camp-max-distance); < 255
	(can-build mining-camp)
=>
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))
(defrule
;	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
	(goal map land)
   	(building-type-count-total lumber-camp >= 2)
	(strategic-number sn-current-age >= feudal)
	(building-type-count-total barracks >= 1)
	(unit-type-count-total villager >= 22)
	(up-compare-goal total-food-amount >= feudal-f2); 440
;	(goal underattack no)
	(building-type-count-total mining-camp < 1)
	(dropsite-min-distance gold > 3); 5
	(dropsite-min-distance gold s:<= sn-camp-max-distance); < 255
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp)
	(disable-self))
(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
	(goal map water)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mill >= 1)
(or	(strategic-number sn-current-age >= dfeudal)
(or	(up-compare-goal excessWood >= 185)
	(building-type-count-total dock >= 1)))
	(building-type-count-total mining-camp < 1)
	(dropsite-min-distance gold > 3); 5
	(dropsite-min-distance gold s:<= sn-camp-max-distance); < 255
	(can-build mining-camp)
=>
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))
(defrule
;	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
	(strategic-number sn-current-age >= dfeudal)
	(building-type-count-total barracks >= 1)
	(unit-type-count-total villager >= 22)
	(goal underattack no)
	(building-type-count-total mining-camp < 4)
	(building-type-count-total mining-camp >= 1); -total
	(dropsite-min-distance stone < 5)
	(dropsite-min-distance gold > 5)
	(dropsite-min-distance gold s:<= sn-camp-max-distance); < 255
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
;	(up-modify-sn sn-camp-max-distance c:+ 1);
;	(up-modify-sn sn-camp-max-distance g:min map-size);
	(build mining-camp)
	(chat-local-to-self "Misplaced camp, build a new one.")
	(disable-self)); end jump

;#load-if-not-defined GOLD-RUSH-MAP
;(defrule
;(or	(building-type-count-total lumber-camp >= 2)
;	(strategic-number sn-current-age >= dfeudal))
;	(building-type-count-total town-center >= 1)
;	(building-type-count-total mining-camp < 1)
;	(strategic-number sn-camp-max-distance < 30)
;=>
;	(set-strategic-number sn-camp-max-distance 30)
;	(chat-local-to-self "Camp-max-distance 30.")
;	(disable-self))
;#end-if

(defrule
;(or	(building-type-count-total lumber-camp >= 2)
;tc+40	(strategic-number sn-current-age >= dfeudal))
	(resource-found wood);
	(building-type-count-total town-center >= 1)
	(dropsite-min-distance wood > 5)
	(dropsite-min-distance wood < 40)
	(dropsite-min-distance wood s:>= sn-camp-max-distance)
	(strategic-number sn-camp-max-distance < 40)
=>
	(up-modify-sn sn-camp-max-distance c:+ 1)
	(up-jump-rule 2))
(defrule
(or	(building-type-count-total lumber-camp >= 2)
	(strategic-number sn-current-age >= dfeudal))
	(resource-found gold);
	(building-type-count-total town-center >= 1)
	(building-type-count-total mining-camp < 1)
	(dropsite-min-distance gold > 3); 5
	(dropsite-min-distance gold < 40)
	(dropsite-min-distance gold s:>= sn-camp-max-distance)
	(strategic-number sn-camp-max-distance < 40)
=>
	(up-modify-sn sn-camp-max-distance c:+ 1)
	(up-jump-rule 1))
(defrule
	(goal strategy castledrop); <---
	(strategic-number sn-current-age >= fcastlea)
	(resource-found stone);
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mining-camp < 4)
	(dropsite-min-distance stone > 5)
	(dropsite-min-distance stone < 40); 35
	(dropsite-min-distance stone s:>= sn-camp-max-distance)
	(strategic-number sn-camp-max-distance < 40); 35
=>
	(up-modify-sn sn-camp-max-distance c:+ 1)); (end jump)

#load-if-not-defined INFINITE-RESOURCES-START
(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mill >= 1)
	(strategic-number sn-gold-gatherer-percentage >= 1)
;testo	(building-type-count-total mining-camp <= 2)
	(building-type-count-total mining-camp >= 1)
	(dropsite-min-distance gold > 8)
	(dropsite-min-distance gold s:<= sn-camp-max-distance); < 255
	(can-build mining-camp)
=>
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))

(defrule
(or	(goal enemy-goal drush)
	(players-current-age target-player <= dark-age))
	(players-current-age every-enemy <= castle-age)
	(strategic-number sn-current-age < imperial)
=>
	(up-jump-rule 2))
(defrule
	(up-pending-objects c: mining-camp <= 0)
	(resource-found gold)
	(goal rebuildcamp yes)
	(building-type-count town-center >= 1)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold g:< map-size)
(or	(unit-type-count-total 229 >= 1); dead miners
	(unit-type-count-total 221 >= 1))
	(strategic-number sn-gold-gatherer-percentage >= 1)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1); lower fail percentage for camps
	(set-strategic-number sn-dropsite-separation-distance 10)
	(build mining-camp)
	(set-goal rebuildcamp no)
	(enable-timer rebuild-camp 306)
; tl	(chat-local-to-self "Building emergency mining-camp. 1")
)
(defrule; almost useless for now
	(up-pending-objects c: mining-camp <= 0)
	(resource-found stone)
	(goal rebuildcamp yes)
	(building-type-count town-center >= 1)
	(dropsite-min-distance stone >= 0)
	(dropsite-min-distance stone g:< map-size)
(or	(unit-type-count-total 229 >= 1); dead miners
	(unit-type-count-total 221 >= 1))
	(can-build mining-camp)
	(strategic-number sn-stone-gatherer-percentage >= 1)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1); lower fail percentage for camps
	(set-strategic-number sn-dropsite-separation-distance 10)
	(build mining-camp)
	(set-goal rebuildcamp no)
	(enable-timer rebuild-camp 306)
; tl	(chat-local-to-self "Building emergency mining-camp. 2"); end jump
)

(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found stone)
	(goal dreitc no)
	(stone-amount < tc-stone)
	(building-type-count-total town-center < 5)
	(goal underattack no)
	(strategic-number sn-current-age >= fcastlea)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(strategic-number sn-stone-gatherer-percentage >= 1)
; test	(building-type-count-total mining-camp < 2)
	(dropsite-min-distance stone > 5)
	(dropsite-min-distance stone g:< map-size)
	(can-build mining-camp)
=>
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))

;(defrule
;	(up-pending-objects c: mining-camp == 0)
;	(resource-found stone)
;	(building-type-count-total town-center < 5)
;	(goal milunits no)
;	(stone-amount < tc-stone)
;	(strategic-number sn-current-age >= fcastlea)
;;	(building-type-count-total monastery >= 1)
;	(building-type-count-total town-center >= 1)
;	(building-type-count-total lumber-camp >= 1)
;; test	(building-type-count-total mining-camp < 2)
;	(dropsite-min-distance stone > 5)
;	(dropsite-min-distance stone g:< map-size)
;	(can-build mining-camp)
;=>
;	(build mining-camp))

(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found stone)
	(strategic-number sn-current-age >= fcastlea)
(or	(up-compare-goal strategy == castledrop)
	(strategic-number sn-current-age >= cimperial))
	(building-type-count-total castle < 1)
	(up-compare-goal total-stone-amount < castle-stone)
	(strategic-number sn-stone-gatherer-percentage >= 1)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1); 2
;	(building-type-count-total mining-camp >= 1)
	(building-type-count-total mining-camp < 4)
	(dropsite-min-distance stone > 5)
	(dropsite-min-distance stone g:< map-size)
	(can-build mining-camp)
=>
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))
(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found stone)
	(up-compare-goal strategy == sling)
	(strategic-number sn-stone-gatherer-percentage >= 1)
	(strategic-number sn-current-age >= dfeudal)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mining-camp >= 1)
	(building-type-count-total mining-camp < 4)
(or	(up-compare-goal excessWood >= marketcamp-cost)
	(building-type-count-total market >= 1))
	(dropsite-min-distance stone > 5)
	(dropsite-min-distance stone g:< map-size)
	(can-build mining-camp)
=>
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))

#load-if-defined TINY-MAP
(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
(or	(game-time >= 2400)
	(building-type-count mining-camp >= 2))
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mining-camp < 14)
	(dropsite-min-distance gold > 6)
	(dropsite-min-distance gold g:< map-size)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))


(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found stone)
;(or	(game-time >= 3300)
(or	(strategic-number sn-current-age >= imperial)
	(building-type-count mining-camp >= 3));)
(or	(goal dreitc yes)
	(stone-amount < tc-stone))
	(building-type-count-total town-center >= 1)
; tl	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total monastery >= 1)
	(building-type-count-total mining-camp < 13)
	(dropsite-min-distance stone > 6)
	(dropsite-min-distance stone g:< map-size)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))
#else
(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
;(or	(game-time >= 2400)
(or	(strategic-number sn-current-age >= imperial)
	(building-type-count mining-camp >= 2));)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mining-camp < 25)
	(dropsite-min-distance gold > 5)
	(dropsite-min-distance gold g:< map-size)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))

(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found stone)
(or	(game-time >= 3300)
	(building-type-count mining-camp >= 3))
	(building-type-count-total town-center >= 1)
; tl	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total monastery >= 1)
	(building-type-count-total mining-camp < 22)
	(dropsite-min-distance stone > 6)
	(dropsite-min-distance stone g:< map-size)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp))
#end-if

(defrule
(or	(goal strategy stonewall)
	(strategic-number sn-gold-gatherer-percentage >= 24)); test
;	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
	(building-type-count-total town-center >= 3)
	(strategic-number sn-current-age >= imperial)
	(strategic-number sn-gold-gatherer-percentage >= 1)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mining-camp < 5)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold s:<= sn-camp-max-distance)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 3); 4
	(build mining-camp))
(defrule
(or	(up-research-status c: imperial-age <= research-unavailable)
(or	(strategic-number sn-camp-max-distance < 26)
(or	(and	(game-time < 1800)
		(unit-type-count-total villager < 48))
(or	(building-type-count-total lumber-camp <= 0)
	(building-type-count-total town-center <= 0)))))
=>
	(up-jump-rule 1))
(defrule
;	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
	(strategic-number sn-gold-gatherer-percentage >= 12);	(strategic-number sn-gold-gatherer-percentage >= 1)
(or	(and	(building-type-count-total town-center >= 3)
		(building-type-count-total mining-camp < 3))
	(up-research-status c: imperial-age == research-pending))
	(building-type-count-total monastery >= 1)
	(building-type-count-total mining-camp < 4)
	(dropsite-min-distance gold >= 0)
	(dropsite-min-distance gold s:<= sn-camp-max-distance)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-dropsite-separation-distance 4); 6
	(build mining-camp)); end jump



(defrule
(or	(and	(up-pending-objects c: lumber-camp <= 0)
		(up-pending-objects c: mining-camp <= 0))
(or	(strategic-number sn-camp-max-distance >= 50)
	(and	(strategic-number sn-camp-max-distance >= 25)
		(or	(strategic-number sn-camp-max-distance g:>= targetdistance)
			(or	(game-time >= 1500)
				(strategic-number sn-current-age >= castlea))))))
=>
	(up-jump-rule 4))
(defrule
	(resource-found wood)
	(up-pending-objects c: lumber-camp >= 1)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: lumber-camp c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object point-x)
	(up-set-target-point point-x)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 4)
	(up-find-resource c: wood c: 3)
	(up-get-search-state local-total))
(defrule
	(resource-found wood)
	(up-pending-objects c: lumber-camp >= 1)
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total <= 2)
	(up-object-data object-data-hitpoints <= 1)
=>
	(chat-local-to-self "Wood too far? Increasing camp distance.")
	(up-target-point 0 action-delete -1 -1)
	(up-reset-placement c: lumber-camp)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(up-modify-sn sn-camp-max-distance c:+ 1))
(defrule
;(or	(resource-found gold)
;tl	(resource-found stone))
	(up-pending-objects c: mining-camp >= 1)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: mining-camp c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object point-x)
	(up-set-target-point point-x)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 4)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-find-remote c: gold-mine c: 1)
	(up-find-remote c: stone-mine c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-search-state local-total))
(defrule
(or	(resource-found gold)
	(resource-found stone))
	(up-pending-objects c: mining-camp >= 1) 
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total <= 0)
	(up-object-data object-data-hitpoints <= 1)
=>
	(chat-local-to-self "Ore too far? Increasing camp distance.")
	(up-target-point 0 action-delete -1 -1)
	(up-reset-placement c: mining-camp)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(up-modify-sn sn-camp-max-distance c:+ 1)); end jump
#end-if


(defrule
	(cc-players-unit-type-count 0 deer <= 0)
	(cc-players-unit-type-count 0 ostrich <= 0)
	(cc-players-unit-type-count 0 zebra <= 0)
	(cc-players-unit-type-count 0 ibex <= 0)
=>
	(up-jump-rule 2))
(defrule
(or	(building-type-count-total lumber-camp <= 0)
(or	(and	(up-compare-goal buildmill != yes)
		(wood-amount < 300))
(or	(building-type-count town-center <= 0)
	(building-type-count-total mill >= 1))))
=>
	(up-jump-rule 1))
(defrule
(or	(and	(up-compare-goal forage-count < 1)
		(game-time s:>= sn-home-exploration-time))
(or	(cc-players-unit-type-count 0 forage-bush-class <= 0)
	(map-type scandanavia)))
(or	(dropsite-min-distance deer-hunting s:<= sn-maximum-hunt-drop-distance)
	(dropsite-min-distance deer-hunting <= 30)); 30
	(can-build mill)
=>
	(chat-local-to-self "Scandi mill.")
	(set-strategic-number sn-mill-max-distance 25)
	(set-strategic-number sn-preferred-mill-placement 1)
	(build mill)
	(up-jump-rule 12))
(defrule
(or	(up-compare-goal forage-count < 1)
	(cc-players-unit-type-count 0 forage-bush-class <= 0)); tbs
;	(cc-players-unit-type-count 0 deer > 0)
(or	(game-time s:< sn-home-exploration-time)
	(game-time < 300))
(nand	(unit-type-count villager >= 7)
	(unit-type-count villager-food < 3)); 6
	(wood-amount < 300); 200
	(dropsite-min-distance deer-hunting s:> sn-maximum-hunt-drop-distance)
	(dropsite-min-distance deer-hunting > 30); 30
=>
	(up-jump-rule 11))
(defrule
(or	(and	(wood-amount < 230); 130
		(and	(building-type-count-total house <= 0)
			(and	(housing-headroom < 3)
				(population-headroom >= 1))))
(or	(up-compare-goal buildmill != yes)
(or	(building-type-count town-center < 1)
	(building-type-count-total mill >= 1))))
=>
	(up-jump-rule 10))
(defrule
(or	(not	(can-build mill))
	(up-pending-placement c: mill))
=>
	(up-jump-rule 9))
(defrule
	(strategic-number sn-preferred-mill-placement == 2)
=>
	(set-goal temporary-goal 18)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-filter-distance c: -1 c: 20)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: ocean-fish-class c: 32)
	(up-find-resource c: shore-fish-class c: 32)
	(up-clean-search search-remote object-data-distance search-order-desc)
	(up-get-search-state local-total))
(defrule
(or	(strategic-number sn-preferred-mill-placement != 2)
	(up-compare-goal remote-total <= 0))
=>
	(set-goal temporary-goal 18)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-filter-distance c: -1 c: 20)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: forage-bush-class c: 32)
	(up-clean-search search-remote object-data-distance search-order-desc)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal remote-total >= 1)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-object-data object-data-distance temporary-goal)
;	(up-chat-data-to-self "temporary-goal: %d" g: temporary-goal)
	(up-modify-goal temporary-goal c:max 12)
	(up-modify-goal temporary-goal c:min 18))
(defrule
	(false);	(resource-found food)
	(can-build mill)
=>
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-filter-distance c: -1 c: 24)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: forage-bush-class c: 32)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object object-point-x)
	(up-set-target-point object-point-x)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 8)
	(up-find-local c: mill c: 1)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total <= 0)
	(up-compare-goal remote-total >= 1)
	(false);	(resource-found food)
(or	(unit-type-count villager-forager >= 1)
(or	(wood-amount >= 300)
	(building-type-count-total lumber-camp >= 2)))
	(can-build mill)
=>
;	(chat-local-to-self "Building mill.0")
	(up-copy-point building-point-x object-point-x)
	(up-set-target-point building-point-x)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-placement-zone-size 4)
	(up-build place-point 0 c: mill)
	(disable-self)
	(up-jump-rule 4))
(defrule
	(resource-found food)
(or	(game-time >= 1200)
(or	(unit-type-count-total villager >= 20)
(or	(unit-type-count villager-forager >= 1)
(or	(wood-amount >= 300)
	(building-type-count-total lumber-camp >= 2)))))
	(can-build mill)
=>
;	(chat-local-to-self "Building mill.1")
	(up-modify-sn sn-mill-max-distance g:= temporary-goal);	(set-strategic-number sn-mill-max-distance 18)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build mill)
;	(disable-self)
	(up-jump-rule 3))
(defrule
	(resource-found food)
	(game-time >= 120)
	(unit-type-count villager >= 7)
(or	(unit-type-count villager-food <= 0); 5
(or	(unit-type-count-total villager >= 18)
(or	(wood-amount >= housecamp2-cost)
	(building-type-count-total lumber-camp >= 1))))
	(can-build mill)
=>
;	(chat-local-to-self "Building mill.2")
	(up-modify-sn sn-mill-max-distance g:= temporary-goal);	(set-strategic-number sn-mill-max-distance 18)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build mill)
	(disable-self)
	(up-jump-rule 2))
(defrule
(not	(resource-found food)); test
	(game-time >= 125)
;	(military-population >= 1); scout
(or	(unit-type-count villager-food <= 0); 5
(or	(unit-type-count-total villager >= 19)
(or	(wood-amount >= 220)
	(building-type-count-total lumber-camp >= 2))))
	(can-build mill)
=>
;	(chat-local-to-self "Building mill.3")
	(up-modify-sn sn-mill-max-distance g:= temporary-goal);	(set-strategic-number sn-mill-max-distance 18)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build mill)
	(disable-self)
	(up-jump-rule 1))
(defrule
;	(up-timer-status embassy != timer-triggered);
	(game-time >= 130)
	(unit-type-count scout-unit <= 0)
	(up-compare-goal scouting-unit <= -1)
(or	(unit-type-count-total villager >= 20)
(or	(building-type-count-total lumber-camp >= 2); (building-type-count-total barracks >= 1)
	(wood-amount >= 240)))
	(can-build mill)
=>
;	(chat-local-to-self "Building mill.4")
	(set-strategic-number sn-placement-zone-size 10)
	(up-set-placement-data my-player-number -1 c: -4)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(up-build place-control 0 c: mill)
	(disable-self)); end jumps

(defrule
(or	(and	(building-type-count-total blacksmith <= 0)
		(strategic-number sn-current-age == feudal)); <=
(or	;(and
	(up-compare-goal forage-count < 1)
	;	(up-gaia-type-count c: forage-bush-class < 1)); test
(or	(building-type-count-total lumber-camp < 2); 1
(or	(building-type-count-total town-center < 1)
	(building-type-count-total mill != 1)))))
=>
	(up-jump-rule 1))
(defrule
	(resource-found food)
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
(or	(map-type yucatan)
	(and	(unit-type-count villager-forager >= 1); hmm
		(sheep-and-forage-too-far))); foragers + forage too far = more berries / badly placed first mill
	(can-build mill)
=>
; dbg	(set-strategic-number sn-preferred-mill-placement 0)
;	(chat-local-to-self "2nd mill for 2nd forage.")
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-mill-max-distance 18)
	(build mill)
	(disable-self)); end mini jump
(defrule
(or	(building-type-count-total town-center <= 0)
(or	(and	(civ-selected khmer)	
		(up-compare-const de-game == 1))
(or	(goal underattack yes)
	(and	(up-compare-goal excessWood < farmmb-cost)
		(and	(goal strategy stonewall)
			(and	(up-research-status c: imperial-age >= research-pending)
				(building-type-count-total barracks <= 0)))))))
=>
	(up-jump-rule 3))
(defrule
;	(up-pending-objects c: mill <= 0)
	(building-type-count-total farm >= 8)
	(building-type-count-total mill < 16)
	(can-build mill)
=>
	(up-get-fact building-type-count-total mill temporary-goal)
	(up-get-fact building-type-count-total town-center temporary-goal2)
	(up-get-fact building-type-count-total farm temporary-goal3)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal2 c:max 2); 0
	(up-modify-goal temporary-goal4 g:= temporary-goal)
	(up-modify-goal temporary-goal4 c:+ 6)
	(up-modify-goal temporary-goal4 c:min 24)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal temporary-goal c:* 8))
(defrule
;	(up-pending-objects c: mill <= 0)
	(up-compare-goal temporary-goal3 g:>= temporary-goal)
	(building-type-count-total farm >= 8)
	(building-type-count-total mill < 16)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-mill-max-distance 18)
	(up-modify-sn sn-mill-max-distance g:max temporary-goal4)
	(up-modify-goal temporary-goal4 c:* -1)
	(up-set-placement-data my-player-number -1 g: temporary-goal4)
	(set-strategic-number sn-placement-zone-size 10)
	(up-build place-control 0 c: mill)
	(disable-self)
	(up-jump-rule 1))
(defrule
;	(up-pending-objects c: mill <= 0)
	(up-compare-goal temporary-goal3 g:>= temporary-goal)
	(building-type-count-total farm >= 8)
	(building-type-count-total mill < 16)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-mill-max-distance 18)
	(up-modify-sn sn-mill-max-distance g:max temporary-goal4)
	(build mill)); end jump
(defrule
	(building-type-count-total town-center < 3)
	(building-type-count-total town-center >= 1)
;(or	(strategic-number sn-current-age <= fcastlea); feudal
;(or	(goal strategy s-flush)
;(or	(goal strategy r-flush)
;	(goal strategy krush))))
(or	(and	(building-type-count-total farm g:<= maxfarms)
		(and	(building-type-count-total farm >= 12)
			(building-type-count-total mill < 1)))
	(building-type-count-total farm >= 24)); 20
	(building-type-count-total mill < 2)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-mill-max-distance 18)
	(build mill))
(defrule
	(up-compare-goal excessWood >= 2400)
	(food-amount >= 2400)
	(up-research-status c: feudal-age <= research-available)
	(strategic-number sn-current-age <= dark)
(or	(building-type-count-total lumber-camp < 1)
	(building-type-count-total barracks < 1))
	(building-type-count-total town-center >= 1)
	(building-type-count-total mill < 1)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-mill-max-distance 16)
	(build mill))
#load-if-defined DARK-AGE-END
(defrule
	(building-type-count-total town-center >= 1)
	(goal researchplan yes)
	(building-type-count barracks >= 2)
	(strategic-number sn-current-age >= imperial)
(or	(strategic-number sn-military-superiority >= 0)
(or	(goal milunits no)
	(military-population > 20)))
	(building-type-count-total farm >= 18)
	(building-type-count-total mill < 8)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-mill-max-distance 18)
	(build mill))
(defrule
	(strategic-number sn-current-age >= imperial)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mill >= 1)
	(building-type-count-total mining-camp >= 1)
	(building-type-count-total barracks < 16)
	(can-build barracks)
=>
	(build barracks))
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(building-type-count-total town-center >= 1)
	(goal researchplan yes)
	(building-type-count barracks >= 2)
	(strategic-number sn-current-age >= imperial)
(or	(strategic-number sn-military-superiority >= 0)
(or	(goal milunits no)
	(military-population > 20)))
	(building-type-count-total farm >= 18)
	(building-type-count-total mill < 8)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-mill-max-distance 18)
	(build mill))
(defrule
	(strategic-number sn-current-age >= imperial)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mill >= 1)
	(building-type-count-total mining-camp >= 1)
	(building-type-count-total archery-range >= 1)
	(building-type-count-total barracks < 12)
	(can-build barracks)
=>
	(build barracks))
#end-if
#load-if-defined CASTLE-AGE-END
(defrule
	(strategic-number sn-current-age >= imperial)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mill >= 1)
	(building-type-count-total mining-camp >= 1)
	(building-type-count-total archery-range >= 1)
	(building-type-count-total stable < 10)
	(can-build stable)
=>
	(build stable))
(defrule
	(strategic-number sn-current-age >= imperial)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mill >= 1)
	(building-type-count-total mining-camp >= 1)
(not	(building-available archery-range))
	(building-type-count-total barracks < 10)
	(can-build barracks)
=>
	(build barracks))
#end-if
;(defrule
;	(building-type-count-total town-center >= 1)
;	(strategic-number sn-current-age >= imperial)
;(or	(strategic-number sn-military-superiority >= 0)
;	(population > del-civ-pop))
;(or	(dropsite-min-distance wood > 254)
;	(dropsite-min-distance wood == -1))
;	(building-type-count-total mill < 6)
;	(can-build mill)
;=>
;	(set-strategic-number sn-allow-adjacent-dropsites 1)
;;	(set-strategic-number sn-dropsite-separation-distance 6)
;	(set-strategic-number sn-mill-max-distance 18)
;	(build mill))


(defrule
;(or	(up-compare-goal forage-count >= 7); 6
(or	(idle-farm-count >= 1)
(or	(up-compare-goal mysheep >= 3); 2
(or	(strategic-number sn-current-age > dark)
(or	(building-type-count-total farm g:>= maxfarms)
(or	(building-type-count town-center <= 0); total
	(building-type-count-total lumber-camp <= 0))))));)
=>
	(up-jump-rule 3))
(defrule
	(unit-type-count villager >= 7)
(or	(up-compare-goal excessWood >= farmmb-cost); farmcamp-cost); 335
	(unit-type-count villager-food < 9)); 7
(or	(building-type-count dock <= 0)
	(up-compare-goal excessWood >= farmfish-cost))
	(up-compare-goal total-food-amount < feudal-food); 50
; test	(up-pending-objects c: villager <= 1)
;	(up-compare-flag escrow-flag == 64)
;(not	(up-compare-goal gl-threat-time < 10000)); 12000
	(building-type-count-total farm < 7); 6
	(dropsite-min-distance wood < 5)
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(building-type-count-total lumber-camp >= 2)
	(up-compare-goal total-food-amount < feudal-f2); feudal-food
	(up-pending-objects c: villager <= 0)
	(goal trainvillager no)
	(up-compare-flag escrow-flag != 64)
;(not	(up-compare-goal gl-threat-time < 10000)); 12000
(or	(unit-type-count-total fishing-ship < 16)
(or	(building-type-count dock <= 0)
	(up-compare-goal excessWood >= farmfish-cost)))
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(building-type-count-total lumber-camp >= 2)
	(up-compare-goal total-food-amount < feudal-food)
(or	(up-compare-goal excessWood >= farmmb-cost); farmcamp-cost); 335
	(unit-type-count villager-food < 9)); 7
	(up-compare-goal mysheep <= 0)
	(dropsite-min-distance deer-hunting s:> sn-maximum-hunt-drop-distance)
	(dropsite-min-distance boar-hunting >= 35)
	(sheep-and-forage-too-far)	
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
=>
	(up-modify-goal farm-goal c:max 200)); end jump

;(defrule
;	(goal map water)
;	(strategic-number sn-current-age == dark)
;	(building-type-count-total dock <= 0)
;	(unit-type-count villager-food < 6)
;;(or	(building-type-count-total mining-camp >= 1)
;;	(up-compare-goal excessWood >= farmcamp-cost))
;	(building-type-count town-center >= 1); -total
;	(building-type-count-total lumber-camp >= 1)
;	(up-gaia-type-count-total c: shore-fish-class <= 0)
;	(up-gaia-type-count-total c: ocean-fish-class <= 0)
;	(building-type-count-total farm < 6)
;(or	(dropsite-min-distance wood < 5)
;	(up-compare-goal excessWood >= farmcamp-cost))
;	(building-type-count-total farm g:< maxfarms)
;	(idle-farm-count <= 0)
;=>
;	(up-modify-goal farm-goal c:max 200))

(defrule
(or	(building-type-count town-center <= 0); total
(or	(building-type-count-total farm g:>= maxfarms)
(or	(and	(dropsite-min-distance wood >= 5)
			(up-compare-goal excessWood < farmcamp-cost))
	(idle-farm-count >= 2))))
=>
	(up-jump-rule 2))
(defrule
	(goal milunits no)
(or	(up-compare-goal excessWood >= boomprep-cost)
(or	(unit-type-count villager-forager >= 8); 7
	(strategic-number sn-current-age <= dark)))
	(strategic-number sn-current-age <= dfeudal)
	(up-compare-goal total-food-amount < 1500)
(or	(goal strategy fast-imp)
	(up-compare-goal total-food-amount < 1100))
	(building-type-count-total farm < 8); 9
	(idle-farm-count <= 0); 1
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(strategic-number sn-current-age <= dark)
	(up-compare-goal total-food-amount < feudal-food)
	(building-type-count-total farm < 3)
	(building-type-count-total mill >= 1)
	(building-type-count-total barracks >= 1)
	(idle-farm-count <= 0); 1
=>
	(up-modify-goal farm-goal c:max 200)); end jump

(defrule
;nn(or	(dropsite-min-distance wood >= 5)
;nn(or	(building-type-count-total lumber-camp <= 0)
(or	(building-type-count town-center <= 0); total
(or	(building-type-count-total farm g:>= maxfarms)
	(idle-farm-count >= 3))););); 1
=>
	(up-jump-rule 6))
(defrule
	(strategic-number sn-current-age == feudal)
	(up-compare-goal strategy-type == feudal-war)
	(up-compare-goal excessWood < farmmb-cost)
	(building-type-count-total archery-range <= 0)
	(building-type-count-total stable <= 0)
	(building-type-count-total barracks <= 1)
	(unit-type-count villager-food >= 6)
(or	(up-compare-goal excessFood >= 225)
(or	(unit-type-count villager-food >= 12)
(or	(up-compare-goal forage-count >= 2); 3
	(up-compare-goal mysheep >= 2)))); 3
=>
	(up-jump-rule 5))
(defrule
	(strategic-number sn-current-age >= fcastlea)
	(up-research-status c: castle-age >= research-pending)
	(up-compare-goal strategy-type >= imperial-war)
	(goal dreitc no)
	(up-compare-goal excessWood < 710)
(or	(up-compare-goal excessWood < 435)
	(stone-amount >= twotc-stone))
	(stone-amount >= tc-stone)
	(civilian-population < up-max-civ)
	(population < max-civ-pop)
	(building-type-count-total town-center <= 4)
=>
	(up-jump-rule 4))
(defrule
	(strategic-number sn-current-age <= dfeudal)
	(up-research-status c: ri-horse-collar < research-complete)
	(building-type-count-total farm >= 8)
	(unit-type-count villager-food >= 12)
=>
	(up-jump-rule 3))
(defrule
	(up-compare-goal milunits != no)
	(building-type-count-total farm g:< maxfarms)
(or	(up-compare-goal excessWood >= rushprep-cost)
	(strategic-number sn-current-age <= dark))
	(strategic-number sn-current-age <= dfeudal)
	(up-compare-goal total-food-amount < 1100)
	(up-compare-goal strategy-type >= castle-war)
	(building-type-count-total farm < 8)
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(idle-farm-count <= 1)
=>
	(up-modify-goal farm-goal c:max 200)); fc
(defrule
	(up-compare-goal excessWood >= farmmb-cost)
(or	(strategic-number sn-current-age >= fcastlea); ^
	(and	(strategic-number sn-current-age <= feudal)
		(or	(strategic-number sn-current-age <= dark)
			(up-compare-goal excessWood >= flushprep-cost))))
(or	(up-research-status c: ri-horse-collar <= research-unavailable)
(or	(up-research-status c: ri-horse-collar >= research-complete)
	(up-compare-goal excessWood >= 235))); 135
	(up-research-status c: ri-heavy-plow <= research-unavailable)
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(up-compare-goal excessWood >= farmmb-cost)
(or	(strategic-number sn-current-age >= fcastlea); ^
	(and	(strategic-number sn-current-age <= feudal)
		(or	(strategic-number sn-current-age <= dark)
			(up-compare-goal excessWood >= flushprep-cost))))
	(up-research-status c: ri-horse-collar >= research-complete)
(or	(up-research-status c: ri-heavy-plow <= research-unavailable)
(or	(up-research-status c: ri-heavy-plow >= research-complete);!= research-available)
	(up-compare-goal excessWood >= 285))); 185
=>
	(up-modify-goal farm-goal c:max 200)); end jump


(defrule
(or	(building-type-count town-center <= 0); total
(or	(building-type-count-total farm g:>= maxfarms)
(or	(and	(up-compare-goal total-food-amount >= 250); 250
		(building-type-count-total farm >= 12)); 10
(or	(up-compare-goal strategy-type == feudal-war)
	(and	(goal strategy drush)
		(and	(up-compare-goal excessWood < farmmb-cost)
			(building-type-count-total barracks <= 0)))))))
=>
	(up-jump-rule 3))
(defrule
(or	(and	(up-compare-goal map != land)
		(or	(building-type-count-total dock >= 1)
			(up-compare-goal excessWood < farmdock-cost)))
(or	(and	(building-type-count-total dock >= 1)
		(up-compare-goal excessWood < farmfish-cost))
(or	(up-compare-goal mysheep >= 5);(up-compare-goal totalsheep >= 8)
(or	(building-type-count-total lumber-camp < 2)
	(strategic-number sn-current-age != dark)))))
=>
	(up-jump-rule 2))
(defrule
(or	(up-pending-objects c: villager >= 2); test
(or	(and	(goal milunits no)
		(up-research-status c: castle-age >= research-available))
(or	(goal trainvillager yes);	(unit-type-count-total villager <= 26)
(or	(building-type-count-total barracks >= 1)
	(up-compare-goal excessWood >= farmmb-cost))))); 185
	(dropsite-min-distance wood < 5)
	(idle-farm-count <= 0)
=>
	(up-modify-goal farm-goal c:max 200)); fc
(defrule
(or	(building-type-count-total mining-camp >= 1)
	(up-compare-goal excessWood >= farmcamp-cost))
	(unit-type-count villager-hunter <= 0)
	(unit-type-count villager-shepherd <= 0)
(or	(up-compare-goal forage-count <= 2)
	(up-compare-goal total-food-amount < castle-food))
	(up-compare-goal forage-count <= 4)
	(up-compare-goal total-food-amount < castle-fs)
	(building-type-count-total farm < 8)
	(dropsite-min-distance wood < 5)
	(idle-farm-count <= 0)
=>
	(up-modify-goal farm-goal c:max 200)); fc ; end jump

(defrule
(or	(building-type-count-total farm g:>= maxfarms)
(or	(up-compare-goal map != land)
(or	(building-type-count town-center <= 0); total
(or	(up-compare-goal mysheep >= 2);(up-compare-goal totalsheep >= 8)
(or	(up-compare-goal forage-count >= 2); 3
	(and	(goal strategy drush)
		(and	(up-compare-goal excessWood < farmmb-cost)
			(building-type-count-total barracks <= 0))))))))
=>
	(up-jump-rule 1))
(defrule
	(building-type-count-total lumber-camp >= 2); 1
	(strategic-number sn-current-age == dark)
;	(up-compare-goal strategy-type == feudal-war)
	(up-compare-goal total-food-amount < feudal-food)
(or	(up-pending-objects c: villager >= 2); test
(or	(building-type-count-total mining-camp >= 1)
	(up-compare-goal excessWood >= farmcamp-cost)))
	(building-type-count-total farm < 2); 3
	(dropsite-min-distance wood < 5)
	(unit-type-count villager-wood >= 1)
	(idle-farm-count <= 0)
=>
	(up-modify-goal farm-goal c:max 200)); fl ; end jump

(defrule
(or	(building-type-count-total farm g:>= maxfarms)
(or	(building-type-count-total dock >= 1); (up-compare-goal map != land)
(or	(building-type-count town-center <= 0); total
(or	(building-type-count-total lumber-camp <= 1)
(or	(strategic-number sn-current-age > dark)
	(building-type-count-total mining-camp < 1))))))
=>
	(up-jump-rule 1))
(defrule
(or	(unit-type-count villager-forager >= 6); 9
(or	(building-type-count-total barracks >= 1)
(or	(up-compare-goal excessWood >= farmmb-cost)
	(goal milunits no))))
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count-total farm < 8); 7
(or	(up-compare-goal strategy-type != feudal-war)
	(building-type-count-total farm < 2)); 3
	(idle-farm-count <= 0); 1
=>
	(up-modify-goal farm-goal c:max 200)); end jump

(defrule
	(goal map water)
	(strategic-number sn-current-age == dark)
	(building-type-count-total dock >= 1)
	(up-compare-goal excessWood >= farmfish-cost)
(or	(building-type-count-total mining-camp >= 1)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count town-center >= 1); -total
	(building-type-count-total lumber-camp >= 2)
;	(building-type-count-total farm < 6)
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 0); 2
=>
	(up-modify-goal farm-goal c:max 200))

(defrule
	(building-type-count town-center >= 1); -total
	(building-type-count-total lumber-camp >= 2)
	(building-type-count-total mining-camp >= 1)
(or	(building-type-count-total barracks >= 1)
	(goal milunits no))
	(up-compare-goal excessWood >= flushprep-cost)
	(strategic-number sn-current-age <= dfeudal)
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count-total farm g:< maxfarms)
	(building-type-count-total farm < 8); 10
	(idle-farm-count <= 1); 2
=>
	(up-modify-goal farm-goal c:max 200)); 3
#load-if-defined KHMER-CIV
(defrule
	(building-type-count town-center >= 1); -total
	(building-type-count-total lumber-camp >= 2)
	(building-type-count-total mining-camp >= 1)
	(strategic-number sn-current-age <= dfeudal)
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count-total farm g:< maxfarms)
	(building-type-count-total farm < 10); 9
(or	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal excessWood >= farmmb-cost))
	(idle-farm-count <= 0); 1
=>
	(up-modify-goal farm-goal c:max 200)); 3
#end-if

(defrule
	(building-type-count town-center >= 1); -total
	(building-type-count-total lumber-camp >= 1)
	(unit-type-count-total fishing-ship < 5)
	(strategic-number sn-current-age == dfeudal)
	(up-compare-goal total-food-amount < castle-feco)
	(up-compare-goal strategy-type >= castle-war)
;	(up-compare-goal enemy-goal != flush)
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count-total farm g:< maxfarms)
	(building-type-count-total farm < 8); 4
	(unit-type-count villager-food < 14); 6
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); fc

(defrule
(or	(building-type-count-total farm g:>= maxfarms)
(or	(building-type-count town-center <= 0); total
	(building-type-count-total lumber-camp <= 0)))
=>
	(up-jump-rule 1))
(defrule
	(unit-type-count-total fishing-ship < 3)
	(unit-type-count villager-food < 7); 6
(or	(strategic-number sn-current-age == dfeudal)
	(strategic-number sn-current-age == feudal))
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count-total farm < 2); 4
	(up-compare-goal total-food-amount < 150); 150
(or	(up-compare-goal excessWood < farmmb-cost)
	(up-compare-goal total-food-amount < 100))
	(up-pending-objects c: villager <= 1)
	(idle-farm-count <= 0); 1
=>
	(up-modify-goal farm-goal c:max 200)); hmm

(defrule
(or	(and	(dropsite-min-distance wood >= 5)
		(up-compare-goal excessWood < farmcamp-cost))
(or	(building-type-count town-center <= 0); -total
(or	(building-type-count-total lumber-camp <= 0)
(or	(up-compare-goal strategy-type == feudal-war)
	(and	(up-research-status c: ri-horse-collar < research-complete);research-pending)
		(up-compare-goal excessWood < 235)))))); for now; 200; 135
=>
	(up-jump-rule 1))
(defrule
(or	(building-type-count-total blacksmith >= 1)
	(up-compare-goal excessWood >= farmsmith-cost))
(or	(building-type-count-total archery-range >= 1)
(or	(building-type-count-total market >= 1)
	(building-type-count-total stable >= 1)))
	(strategic-number sn-current-age == feudal)
	(current-age == feudal-age); insurance
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); fc ; end jump
(defrule
(or	(strategic-number sn-current-age < feudal)
(or	(current-age-time < 5)
(or	(building-type-count-total farm g:>= maxfarms)
(or	(and	(dropsite-min-distance wood >= 5)
		(up-compare-goal excessWood < farmcamp-cost))
(or	(building-type-count town-center <= 0); -total
(or	(building-type-count-total lumber-camp <= 0)
	(up-compare-goal strategy-type != feudal-war)))))))
=>
	(up-jump-rule 4))
(defrule
(or	(and	(up-research-status c: ri-horse-collar >= research-complete);(building-type-count-total farm < 3); 4
		(building-type-count-total archery-range >= 2))
(or	(building-type-count-total blacksmith >= 1)
	(up-compare-goal excessWood >= farmsmith-cost)))
;(or
	(building-type-count-total archery-range >= 1); 2
;	(building-type-count-total stable >= 1))
(or	(up-research-status c: ri-horse-collar >= research-complete);research-pending)
	(and	(building-type-count-total farm < 3); 4
		(up-compare-goal excessWood >= 235))); 135
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); fl
(defrule
	(goal maa-var yes)
	(goal trainchamp yes);
(or	(building-type-count-total barracks >= 1)
	(up-compare-goal excessWood >= farmmb-cost))
	(up-research-status c: ri-horse-collar >= research-complete)
(or	(building-type-count-total farm < 13)
(or	(building-type-count-total archery-range >= 1)
(or	(up-compare-goal excessWood >= farmmb-cost)
	(up-research-status c: castle-age >= research-available))))
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); maa-fl
(defrule
	(up-compare-goal excessWood < farmmb-cost)
	(up-compare-goal milunits != no)
;	(current-age-time < 32)
	(building-type-count-total archery-range <= 0)
	(building-type-count-total stable <= 0)
	(building-type-count-total barracks <= 1)
=>
	(up-jump-rule 1))
(defrule
(or	(and	(unit-type-count villager-food < 6)
		(building-type-count-total farm < 6)); 7
(or	(up-research-status c: ri-horse-collar >= research-complete);research-pending)
	(and	(building-type-count-total farm < 3); 4
		(up-compare-goal excessWood >= 235)))); 135
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); fl ; end jump

(defrule
	(building-type-count-total farm g:< maxfarms)
	(strategic-number sn-current-age == feudal)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-complete);research-pending)
	(building-type-count town-center >= 1); -total
	(building-type-count-total lumber-camp >= 1)
(or	(up-compare-goal excessWood >= farmsmith-cost)
	(building-type-count-total blacksmith >= 1)); test
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
;(or	(up-compare-goal total-food-amount < castle-food)
	(idle-farm-count <= 1);); 0
=>
	(up-modify-goal farm-goal c:max 200)); all

(defrule
(or	(and	(up-compare-goal strategy-type == feudal-war)
		(and	(building-type-count-total stable < 2)
			(and	(building-type-count-total archery-range < 2)
				(up-compare-goal excessWood < farmmb-cost))))
	(and	(up-compare-goal strategy-type != feudal-war)
		(and	(up-research-status c: castle-age <= research-unavailable)
			(up-compare-goal excessWood < farmmb-cost))))
=>
	(up-jump-rule 1))
(defrule
	(strategic-number sn-current-age == feudal)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-complete);research-pending)
	(building-type-count town-center >= 1); -total
	(building-type-count-total lumber-camp >= 1)
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count-total farm g:< maxfarms)
(or	(up-compare-goal total-food-amount < castle-food); test
	(idle-farm-count <= 1)); 0
=>
	(up-modify-goal farm-goal c:max 200)); all ; end jump

(defrule
(or	(goal scoutmicro no)
(or	(goal trainhussar no)
(or	(and	(building-type-count-total farm >= 24)
		(and	(building-type-count-total mill < 3); 3
			(building-type-count-total town-center < 2))); 3
(or	(building-type-count town-center <= 0); -total
	(building-type-count-total lumber-camp <= 0)))))
=>
	(up-jump-rule 2))
(defrule
(or	(up-compare-goal excessWood >= scrushprep-cost)
	(building-type-count-total stable >= 1))
(or	(building-type-count-total farm g:< maxfarms)
	(building-type-count-total farm < 12))
	(building-type-count-total farm < 14)
	(idle-farm-count <= 2); 4
(or	(idle-farm-count <= 0); 1
	(and	(up-research-status c: ri-horse-collar >= research-complete)
		(building-type-count-total farm < 12)))
=>
	(up-modify-goal farm-goal c:max 200)); s-flush
(defrule
	(building-type-count-total stable >= 1)
(or	(building-type-count-total farm < 16)
	(building-type-count-total mill >= 2))
(or	(building-type-count-total archery-range >= 1)
	(building-type-count-total blacksmith >= 1))
(or	(building-type-count-total farm g:< maxfarms)
	(building-type-count-total farm < 14))
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); end mini jump s-flush

(defrule
	(goal strategy sling)
	(building-type-count town-center >= 1); -total
	(building-type-count-total lumber-camp >= 1)
	(strategic-number sn-current-age >= feudal)
(or	(up-compare-goal excessWood >= 235); 135
	(up-research-status c: ri-horse-collar >= research-complete));research-pending)
(or	(up-compare-goal excessWood >= farmmb-cost)
	(building-type-count-total market >= 1)); test
(or	(dropsite-min-distance wood < 4)
	(up-compare-goal excessWood >= farmcamp-cost))
	(building-type-count-total farm g:< maxfarms)
;	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200))


(defrule
(or	(building-type-count town-center < 1); -total
(or	(building-type-count-total lumber-camp < 1)
(or	(and	(dropsite-min-distance wood >= 5)
		(up-compare-goal excessWood < farmcamp-cost))
(or	(building-type-count-total farm g:>= maxfarms)
	(and	(up-research-status c: ri-horse-collar < research-complete);research-pending)
		(up-compare-goal excessWood < 235)))))); for now; 200; 135
=>
	(up-jump-rule 2))
(defrule
	(strategic-number sn-current-age == fcastlea)
(or	(up-compare-goal excessWood >= 235); 135
	(up-research-status c: ri-horse-collar >= research-complete));research-pending)
(or	(building-type-count-total farm < 8); 7
(or	(up-compare-goal excessWood >= 785); 2 TCs, monastery and farm
	(and	(up-compare-goal excessWood >= 610)
		(building-type-count-total farm < 12)))); TC, b-s, monastery and farm
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(up-compare-goal strategy == castledrop)
	(strategic-number sn-current-age >= fcastlea)
(or	(up-compare-goal excessWood >= 235); 135
	(and	(up-research-status c: ri-horse-collar >= research-complete);research-pending)
		(up-research-status c: ri-double-bit-axe >= research-pending)))
	(building-type-count-total castle < 1)
	(stone-amount < castle-stone)
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); end jump

(defrule
(or	(up-compare-goal strategy != fast-imp)
	(building-type-count-total farm g:>= maxfarms))
=>
	(up-jump-rule 1))
(defrule
(or	(up-compare-goal excessWood >= fiprep-cost)
	(building-type-count-total farm < 10)); 9
	(up-research-status c: imperial-age <= research-available)
	(up-research-status c: castle-age >= research-available)
	(up-research-status c: ri-horse-collar != research-pending)
	(strategic-number sn-current-age <= castlea)
	(up-compare-goal total-food-amount < imperial-fs)
	(building-type-count-total farm < 17)
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
	(idle-farm-count <= 0); 1
=>
	(up-modify-goal farm-goal c:max 200)); end jump

(defrule
(or	(and	(strategic-number sn-current-age != castlea)
		(strategic-number sn-current-age != fcastlea))
(or	(building-type-count-total lumber-camp <= 0)
(or	(building-type-count town-center <= 0); -total
	(and	(civilian-population < up-max-civ)
		(and	(building-type-count-total town-center <= 2)
			(and	(up-compare-goal excessWood < farmtc-cost); 610
				(stone-amount >= tc-stone)))))))
=>
	(up-jump-rule 1))
(defrule
	(goal milunits no)
	(up-compare-goal strategy != fast-imp)
	(building-type-count town-center >= 1); -total
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
(or	(up-research-status c: ri-horse-collar >= research-complete);research-pending)
	(up-compare-goal excessWood >= 235)); 135
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); end jump

(defrule
(or	(up-research-status c: ri-horse-collar == research-pending)
(or	(up-research-status c: ri-heavy-plow == research-pending)
(or	(strategic-number sn-current-age < castlea)
(or	(building-type-count-total lumber-camp <= 0)
(or	(building-type-count town-center <= 0); -total
	(and	(dropsite-min-distance wood >= 5)
		(up-compare-goal excessWood < farmcamp-cost)))))))
=>
	(up-jump-rule 5))
(defrule
	(strategic-number sn-current-age == castlea)
	(building-type-count-total town-center <= 1);
(or	(research-completed ri-heavy-plow)
(or	(up-compare-goal excessWood >= farmtc-cost)
(or	(food-amount < 50)
	(up-compare-goal total-food-amount < 300)))); test
	(building-type-count-total farm g:< maxfarms)
	(building-type-count-total farm < 12); 10
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(strategic-number sn-current-age >= castlea)
(or	(goal dreitc yes)
	(building-type-count-total town-center >= 2))
(or	(stone-amount < tc-stone)
(or	(up-compare-goal excessWood >= farmtc-cost)
	(building-type-count-total farm < 18))); 16
(or	(up-compare-goal excessWood >= farmtc-cost)
	(up-compare-goal total-food-amount < 300)); test
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(strategic-number sn-current-age >= castlea)
(or	(goal dreitc yes)
	(building-type-count-total town-center >= 3))
(or	(building-type-count-total farm < 24); 22
(or	(up-compare-goal excessWood >= farmtc-cost)
	(up-compare-goal total-food-amount < 300)))
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(strategic-number sn-current-age >= castlea)
	(goal dreitc yes)
(or	(up-compare-goal excessWood >= farmmb-cost)
(or	(building-type-count-total stable >= 2)
(or	(building-type-count-total archery-range >= 2)
	(building-type-count-total barracks >= 2))))
(or	(stone-amount < tc-stone)
	(building-type-count-total town-center >= 3))
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(strategic-number sn-current-age >= castlea)
;	(goal dreitc yes)
	(building-type-count-total castle >= 1)
(or	(stone-amount < tc-stone)
(or	(up-compare-goal excessWood >= farmtc-cost)
	(goal dreitc yes))); (building-type-count-total town-center >= 3)
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 1); 0
=>
	(up-modify-goal farm-goal c:max 200)); end jump

(defrule
(or	(up-compare-goal milunits == no)
(or	(building-type-count town-center <= 0); -total
(or	(building-type-count-total lumber-camp <= 0); 1
	(and	(strategic-number sn-current-age != castlea)
		(strategic-number sn-current-age != fcastlea)))))
=>
	(up-jump-rule 2))
(defrule
	(strategic-number sn-military-superiority <= -1); 0
	(up-compare-goal excessWood < farmmb-cost)
	(building-type-count-total stable < number-stables)
	(building-type-count-total archery-range < number-archery-ranges)
	(building-type-count-total barracks < number-barracks)
	(building-type-count-total stable < 4)
	(building-type-count-total archery-range < 4)
	(building-type-count-total barracks < 4)
=>
	(up-jump-rule 1))
(defrule
(or	(goal dreitc yes)
(or	(stone-amount < tc-stone)
(or	(up-compare-goal excessWood >= farmtc-cost)
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop)))))
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
;(or
	(building-type-count-total farm g:< maxfarms)
	(idle-farm-count <= 1); 0
;)
=>
	(up-modify-goal farm-goal c:max 200)); end jump

(defrule
(or	(strategic-number sn-current-age < feudal)
(or	(building-type-count town-center <= 0); -total
(or	(building-type-count-total lumber-camp <= 0)
	(and	(up-research-status c: ri-horse-collar < research-complete);research-pending)
		(up-compare-goal excessWood < 235))))); 135
=>
	(up-jump-rule 2))
(defrule
	(up-compare-goal strategy == krush)
(or	(up-compare-goal excessWood >= farmsmith-cost)
	(building-type-count-total blacksmith >= 1))
	(building-type-count-total stable >= 1)
;(or	(up-compare-goal excessWood >= farmmb-cost)
;	(building-type-count-total stable >= 2))
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
(or	(building-type-count-total farm g:< maxfarms)
	(building-type-count-total farm < 12)); 13
	(idle-farm-count <= 4); 1
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
(or	(up-compare-goal strategy == a-rush)
	(up-compare-goal strategy == ca-rush))
(or	(up-compare-goal excessWood >= farmsmith-cost)
	(building-type-count-total blacksmith >= 1))
	(building-type-count-total archery-range >= 1)
;(or	(up-compare-goal excessWood >= farmmb-cost)
;	(building-type-count-total archery-range >= 2))
(or	(dropsite-min-distance wood < 5)
	(up-compare-goal excessWood >= farmcamp-cost))
(or	(building-type-count-total farm g:< maxfarms)
	(building-type-count-total farm < 11)); 11.1 ; 12
; snbn	(building-type-count-total farm < 13); 13 ; 14
	(idle-farm-count <= 2); 1
=>
	(up-modify-goal farm-goal c:max 200)); end mini jump

#load-if-not-defined WONDER-RACE
(defrule
(or	(and	(dropsite-min-distance wood >= 5)
		(up-compare-goal excessWood < farmcamp-cost))
(or	(building-type-count-total farm g:>= maxfarms)
(or	(building-type-count town-center <= 0); -total
	(building-type-count-total lumber-camp <= 0))))
=>
	(up-jump-rule 3))
(defrule
(or	(and	(up-research-status c: ri-heavy-plow == research-pending)
		(up-compare-goal excessWood >= 610))
(or	(and	(up-research-status c: ri-heavy-plow <= research-unavailable)
		(strategic-number sn-current-age >= imperial))
	(up-research-status c: ri-heavy-plow >= research-complete)))
=>
	(up-modify-goal farm-goal c:max 200))
(defrule
	(up-compare-goal excessWood < farmtc-cost)
	(up-compare-goal excessFood >= 150)
(or	(up-compare-goal dreitc != yes)
	(stone-amount < tc-stone))
=>
	(up-jump-rule 1))
(defrule
(or	(unit-type-count villager-food < 6);(building-type-count-total farm < 6)
(or	(up-compare-sn sn-current-age g:>= strategy-type)
(or	(and	(or	(building-type-count-total town-center >= 3)
				(goal dreitc yes))
		(building-type-count-total farm < 18))
	(and	(or	(building-type-count-total town-center >= 2)
				(strategic-number sn-current-age >= castlea))
		(building-type-count-total farm < 12)))))
=>
	(up-modify-goal farm-goal c:max 200)); end jump
#else
(defrule
	(strategic-number sn-food-gatherer-percentage <= 0)
	(up-compare-goal farm-goal >= 0)
=>
	(chat-local-to-self "No food gatherers.")
	(set-goal farm-goal 0))
#end-if
(defrule
	(up-pending-objects c: farm >= 1)
	(up-compare-goal main-zone >= 0)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: farm c: 16)
	(up-remove-objects search-local object-data-map-zone-id g:== main-zone)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-pending-objects c: farm >= 1)
	(up-compare-goal main-zone >= 0)
=>
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-map-zone-id temporary-goal2)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-find-remote c: town-center c: 16)
	(up-find-remote c: mill c: 16)
	(up-remove-objects search-remote object-data-map-zone-id g:!= temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total <= 0)
	(up-pending-objects c: farm >= 1)
	(up-compare-goal main-zone >= 0)
=>
	(up-set-target-object search-local c: 0)
	(up-get-point position-object point-x)
	(chat-local-to-self "Deleting farms on other zones.")
	(up-target-point 0 action-delete -1 -1)
	(set-goal farm-goal 0)
	(up-jump-rule 6))
(defrule
	(up-compare-goal farm-goal >= 1)
=>
	(up-modify-goal temporary-goal g:= villagercount)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal c:max 1))
(defrule
(or	(up-compare-goal farm-goal <= 0)
(or	(unit-type-count villager-builder g:>= temporary-goal)
	(unit-type-count villager <= 0)))
=>
	(set-goal farm-goal 0)
	(up-jump-rule 4))
(defrule
	(goal strategy drush)
	(up-compare-goal excessWood < farmmb-cost)
	(building-type-count-total barracks <= 0)
(or	(up-compare-goal forage-count >= 2)
(or	(idle-farm-count >= 1)
(or	(up-compare-goal total-food-amount >= 100)
	(unit-type-count villager-food >= 7))))
=>
	(set-goal farm-goal 0)
	(up-jump-rule 3))
(defrule
	(strategic-number sn-current-age >= dfeudal)
	(building-type-count-total mining-camp <= 0)
	(unit-type-count villager-gold >= 2)
	(up-compare-goal excessWood < farmcamp-cost)
=>
	(set-goal farm-goal 0)
	(up-jump-rule 2))
(defrule
	(game-time < 300)
(or	(game-time < 30)
	(unit-type-count villager-food >= 3))
(or	(building-type-count-total lumber-camp <= 0)
	(building-type-count-total mill <= 0))
	(up-compare-goal excessWood < farmcamp-cost)
=>
	(set-goal farm-goal 0)
	(up-jump-rule 1))
(defrule
	(goal migration-state 1)
	(building-type-count-total transport-ship < 1)
	(unit-available transport-ship)
	(goal traintransport yes)
	(building-type-count-total dock >= 1)
	(up-compare-goal excessWood < 185)
=>
	(set-goal farm-goal 0)); end jump
#load-if-defined HAMBURGER-MAP
(defrule
	(building-type-count lumber-camp <= 1)
(or	(and	(building-type-count lumber-camp <= 0)
		(up-compare-goal excessWood < farmcamp-cost))
	(and	(dropsite-min-distance wood >= 20)
		(dropsite-min-distance wood s:>= sn-maximum-wood-drop-distance)))
=>
	(set-goal farm-goal 0))
#end-if

#load-if-defined CROSSROADS-MAP

(defrule
	(wood-amount < 160)
	(building-type-count-total farm > 1)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total lumber-camp < 2)
	(game-time < 900)
	(current-age == dark-age)
=>
	(set-goal farm-goal 0)
)

#end-if

#load-if-defined CRATER-MAP

(defrule
	(wood-amount < 160)
	(building-type-count-total farm > 1)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total lumber-camp < 2)
	(game-time < 900)
	(current-age == dark-age)
=>
	(set-goal farm-goal 0)
)

#end-if
(defrule
	(goal migration-state 1)
	(up-compare-goal relocating <= 0)
	(building-type-count-total town-center <= 0); todo
(or	(and	(unit-type-count-total transport-ship >= 1)
		(can-build-with-escrow town-center))
(or	(up-compare-goal total-food-amount >= feudal-food)
(or	(up-research-status c: feudal-age >= research-pending)
(or	(unit-type-count villager-food >= 7)
	(unit-type-count fishing-ship-class >= 6)))))
=>
;	(up-chat-data-to-player my-player-number "Food4: %d." s: sn-food-gatherer-percentage)
	(set-goal farm-goal 0))
(defrule
	(up-compare-goal excessWood < farmcamp-cost)
	(strategic-number sn-current-age == feudal)
	(building-type-count-total lumber-camp < 3)
	(dropsite-min-distance wood >= 3)
	(resource-found wood)
(or	(building-type-count-total blacksmith >= 1)
	(up-research-status c: castle-age >= research-available))
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(dropsite-min-distance wood g:< map-size)
	(up-pending-objects c: lumber-camp <= 0)
=>
	(set-goal farm-goal 0))
(defrule
	(up-compare-goal farm-goal >= 1)
=>
;	(up-chat-data-to-all "farm-goal: %d" g: farm-goal)
	(up-modify-goal temporary-goal g:= maxfarms)
	(up-modify-goal temporary-goal2 g:= maxfarms)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal temporary-goal2 c:+ 15)
	(up-modify-goal temporary-goal g:max temporary-goal2)
	(up-modify-goal farm-goal g:min temporary-goal)
	(up-modify-goal farm-goal g:min villagercount)
	(up-modify-goal farm-goal c:min up-max-civ))
(defrule
(or	(up-compare-goal farm-goal <= 0)
(or	(up-pending-objects c: farm g:>= farm-goal)
(or	(up-pending-placement c: farm)
	(not (up-can-build 0 c: farm)))))
=>
	(up-jump-rule 18))
(defrule
(or	(up-compare-const diff-fp != 1)
(or	(civ-selected khmer)
(or	(up-enemy-units-in-town >= 1)
(or	(goal underattack yes)
	(goal defend yes)))))
=>
	(up-jump-rule 16))
(defrule
	(true)
=>
	(set-goal temporary-goal town-center)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 40)
	(up-modify-goal temporary-goal5 s:min sn-safe-town-size)
	(set-goal temporary-goal8 0)
	(up-modify-goal temporary-goal9 g:= map-size)
	(set-goal temporary-goal10 0))
(defrule
	(true)
=>
	(set-goal object-point-x -1)
	(up-set-target-point position-self-x)
	(up-full-reset-search)
	(up-find-local g: temporary-goal c: 12)
	(up-remove-objects search-local object-data-distance g:> temporary-goal5)
	(up-clean-search search-local object-data-distance search-order-asc))
(defrule; end neg jump
(not	(up-set-target-object search-local g: temporary-goal4))
=>
	(up-jump-rule 12))
(defrule
	(up-set-target-object search-local g: temporary-goal4)
	(up-object-data object-data-type == town-center)
=>
	(set-goal temporary-goal2 2)
	(set-goal temporary-goal3 3)
	(set-goal temporary-goal6 4)
	(set-goal temporary-goal7 1))
(defrule
	(up-set-target-object search-local g: temporary-goal4)
	(up-object-data object-data-type == mill)
=>
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 2)
	(set-goal temporary-goal6 4)
	(set-goal temporary-goal7 1))
(defrule
	(goal temporary-goal10 1)
	(goal object-point-x -1)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal6 c:+ 1))
(defrule
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-get-point position-object point-x)
	(up-copy-point saved-point-x point-x)
	(up-modify-goal saved-point-x c:+ 40)
	(up-modify-goal saved-point-y c:+ 40)
	(up-modify-goal point-x g:+ temporary-goal2)
	(up-modify-goal point-y g:+ temporary-goal3))
(defrule
	(up-compare-goal point-x >= 0)
	(up-can-build-line 0 point-x c: farm)
	(up-point-distance saved-point-x point-x g:< temporary-goal9)
=>
	(up-get-point-distance saved-point-x point-x temporary-goal9)
;	(up-chat-data-to-player my-player-number "goal9: %d" g: temporary-goal9)
	(up-copy-point object-point-x point-x))
(defrule
	(up-compare-goal temporary-goal6 >= 2)
=>
	(up-modify-goal point-x g:- temporary-goal7)
	(up-modify-goal temporary-goal6 c:- 1)
	(up-jump-rule -2))
(defrule
	(up-compare-goal temporary-goal6 == 1)
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-get-point position-object point-x)
	(up-modify-goal point-x g:+ temporary-goal3)
	(up-modify-goal point-y g:+ temporary-goal3)
	(set-goal temporary-goal6 -7))
(defrule
	(up-compare-goal temporary-goal6 <= -2)
=>
	(up-modify-goal point-y g:- temporary-goal7)
	(up-modify-goal temporary-goal6 c:+ 1)
	(up-jump-rule -4))
(defrule
	(goal temporary-goal8 0)
=>
	(set-goal temporary-goal6 4)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal2 c:* -1)
	(up-modify-goal temporary-goal3 c:* -1)
	(up-modify-goal temporary-goal7 c:* -1)
	(set-goal temporary-goal8 1)
	(up-jump-rule -6))
(defrule
	(goal temporary-goal10 0)
	(goal object-point-x -1)
=>
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal10 1)
	(up-jump-rule -10))
(defrule
	(up-compare-goal object-point-x >= 0)
	(up-can-build-line 0 object-point-x c: farm)
	(can-build farm);
	(up-can-build 0 c: farm)
=>
;	(chat-to-player my-player-number "Manual farm.")
	(up-build-line object-point-x object-point-x c: farm)
	(up-jump-rule 3))
(defrule
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-modify-goal temporary-goal4 c:+ 1)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal10 0)
	(up-jump-rule -13)); end jump
(defrule
	(goal underattack no)
	(goal defend no)
	(up-compare-goal targetdistance >= 45)
(not	(up-set-target-object search-local g: temporary-goal4))
	(goal temporary-goal town-center)
	(building-type-count mill >= 1)
=>
	(set-goal temporary-goal mill)
	(up-full-reset-search)
	(up-find-local g: temporary-goal c: 20)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal10 0)
	(up-jump-rule -14)); end jump
(defrule
	(can-build farm);
	(up-can-build 0 c: farm)
=>
;	(chat-to-player my-player-number "Normal farm.")
;	(up-chat-data-to-all "maxfarms: %d" g: maxfarms)
;	(up-chat-data-to-all "farm-goal: %d" g: farm-goal)
	(build farm)); end jump



#load-if-not-defined INFINITE-RESOURCES-START
;#load-if-defined PORTUGUESE-CIV
(defrule
(or	(not	(building-available feitoria))
(or	(building-type-count-total feitoria g:>= feitoria-cap)
(or	(up-compare-goal increase-ts != 0)
(or	(gold-amount < 250)
(or	(stone-amount < 250)
	(current-age < imperial-age))))))
=>
	(up-jump-rule 4))
(defrule
(or	(and	(up-compare-goal excessGold >= 5000)
		(up-compare-goal excessStone >= 1550))
	(and	(housing-headroom < 20)
		(population-headroom < 20)))
=>
	(up-jump-rule 3))
(defrule
	(population-headroom < 80)
(or	(up-compare-goal tradeunits >= 24)
	(and	(stone-amount < castle-stone)
		(and	(goal uugoal yes)
			(building-type-count-total castle < 2))))
=>
	(up-jump-rule 2))
(defrule
	(population < max-civ-pop)
(or	(up-compare-goal custom-civ-pop < up-max-civ)
	(up-compare-goal tradeunits < 16))
(or	(up-compare-const sd-game == 1)
(or	(up-compare-goal excessWood < 600)
(or	(up-compare-goal excessFood < 600)
(or	(up-compare-goal excessGold < 600)
	(up-compare-goal excessStone < castle-stone))))); twocastle-stone
=>
	(set-goal increase-ts feitoria)
	(up-jump-rule 1))
(defrule
	(population < max-civ-pop)
(or	(up-compare-goal custom-civ-pop < up-max-civ)
	(up-compare-goal tradeunits < 24))
(or	(up-compare-goal custom-civ-pop < min-number-vills)
(or	(commodity-buying-price stone >= 400)
(or	(cc-players-unit-type-count 0 gold-mine < 1)
	(cc-players-unit-type-count 0 stone-mine < 1))))
=>
	(set-goal increase-ts feitoria)); end jump
;#end-if
#end-if



#load-if-not-defined WONDER-RACE
(defrule
(or	(up-compare-goal excessWood < mb-cost)
(or	(up-compare-goal increase-ts != 0)
(or	(building-type-count-total town-center <= 0)
(not	(building-available monastery)))))
=>
	(up-jump-rule 16))
(defrule
	(gold-amount < 100)
	(strategic-number sn-gold-gatherer-percentage <= 0)
	(current-age <= castle-age)
	(current-age-time < 300)
	(up-compare-goal tradeunits <= 0)
	(unit-type-count villager-gold < 5)
	(unit-type-count-total villager < 45)
=>
	(up-jump-rule 15))
(defrule
	(up-compare-const dm-game == 1)
(or	(not	(civ-selected aztec))
(or	(players-unit-type-count any-enemy eagle-warrior-line >= 18)
	(players-unit-type-count any-enemy scout-cavalry-line >= 16)))
	(game-time < 300)
	(unit-type-count-total villager < 30)
=>
	(up-jump-rule 14))
(defrule
	(goal strategy fast-imp)
	(building-type-count-total monastery < 1)
	(up-research-status c: imperial-age <= research-unavailable)
	(strategic-number sn-current-age <= castlea)
	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(population >= max-civ-pop)
	(and	(building-type-count-total monastery < 1)
		(and	(game-time < 1800)
			(and	(up-gaia-type-count-total c: relic >= 1);(cc-players-unit-type-count 0 relic >= 1)
				(or	(not	(player-in-game any-ally))
					(up-gaia-type-count-total c: relic >= 9)))))))
=>
	(up-jump-rule 1))
(defrule
	(building-type-count-total town-center < 3)
(or	(and	(up-compare-goal excessWood < tc-175-wood);	(and	(up-compare-goal excessWood < 350)
		(and	(building-type-count-total town-center < 3);	(building-type-count-total stable < 2))
			(stone-amount >= tc-stone)))
(or	(up-gaia-type-count-total c: relic <= 0)
	(and	(gold-amount < 100); 200
		(unit-type-count villager-gold < 8))))
	(current-age-time < 480); 300
	(strategic-number sn-current-age <= castlea)
=>
	(up-jump-rule 11)); end mini-jump
(defrule
(or	(strategic-number archers >= 20)
(or	(players-unit-type-count any-enemy eagle-warrior-line >= 20)
(or	(players-unit-type-count any-enemy scout-cavalry-line >= 16)
	(and	(strategic-number sn-current-age < cimperial)
		(up-compare-goal excessWood < tc-100-wood))))); hmm
=>
	(up-jump-rule 3))
(defrule
;	(goal milunits yes)
(or	(players-unit-type-count focus-player war-elephant-line >= 4)
(or	(players-unit-type-count focus-player knight-line >= 24)
(or	(players-unit-type-count focus-player boyar >= 18)
(or	(players-unit-type-count focus-player elephant-archer >= 8)
	(players-unit-type-count focus-player teutonic-knight-line >= 6)))))
;	(unit-type-count-total monastery-class < 16)
	(up-compare-goal excessGold >= 100);	(gold-amount > 200)
	(goal trainmonk yes)
	(building-type-count-total monastery < 4); 3
	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
;	(goal milunits yes)
(or	(players-unit-type-count focus-player battle-elephant >= 8)
	(players-unit-type-count focus-player elite-battle-elephant >= 8))
;	(unit-type-count-total monastery-class < 16)
	(up-compare-goal excessGold >= 100);	(gold-amount > 200)
	(goal trainmonk yes)
	(building-type-count-total monastery < 4); 3
	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
;	(goal milunits yes)
(or	(cc-players-unit-type-count 0 tree-class < 200)
	(strategic-number husks >= 8))
;	(unit-type-count-total monastery-class < 16)
	(up-compare-goal excessGold >= 100);	(gold-amount > 200)
	(goal trainmonk yes)
	(building-type-count-total monastery < 4); 3
	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7)); end mini jump

(defrule
	(civ-selected aztec)
	(goal trainmonk yes)
	(strategic-number archers < 24)
(or	(up-compare-goal excessWood >= tc-175-wood)
	(population >= up-max-civ)); civilian
(or	(gold-amount > 1100)
	(strategic-number sn-current-age >= imperial))
	(building-type-count-total barracks >= number-barracks)
	(building-type-count-total archery-range >= number-archery-ranges)
	(building-type-count-total monastery < 6)
	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal milunits yes)
(or	(goal milunits no)
(or	(building-type-count-total stable >= 2)
(or	(building-type-count-total archery-range >= 3)
(or	(cc-players-unit-type-count 0 relic >= 3)
(or	(strategic-number sn-current-age >= imperial)
	(building-type-count-total town-center >= 3)))))))
	(building-type-count-total monastery < 1)
;	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
	(cc-players-unit-type-count 0 relic >= 3); 5
	(goal inseln no)
(not	(player-in-game any-ally))
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
	(goal underattack no)
	(goal defend no)
	(strategic-number sn-military-superiority >= 0)
	(game-time < 1800)
	(building-type-count-total monastery < 1)
;	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-compare-goal relic-count >= 10)
(nor	(up-pending-objects c: monastery >= 1)
	(up-pending-placement c: monastery))
	(building-type-count-total monastery < 40)
=>
	(up-full-reset-search)
	(up-filter-garrison c: -1 c: 9)
	(up-find-local c: monastery c: 40))
(defrule
(not	(up-set-target-object search-local c: 0))
	(up-compare-goal relic-count >= 10)
(nor	(up-pending-objects c: monastery >= 1)
	(up-pending-placement c: monastery))
	(building-type-count-total monastery < 40)
	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal milunits yes)
(or	(up-pending-objects c: monk >= 2)
	(up-pending-objects c: missionary >= 2))
(or	(gold-amount > 500)
(or	(and	(up-compare-goal excessWood >= 330)
		(current-age-time >= 15))
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total monastery < 2)
	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal milunits yes)
	(up-research-status c: ri-hussite-reforms >= research-pending)
	(goal trainmonk yes)
	(building-type-count-total monastery < 4)
	(building-available monastery)
=>
	(set-goal increase-ts monastery)
	(enable-timer increase-ts-timer 7)); end jumps




(defrule
(nor	(civ-selected korean)
(or	(civ-selected celtic)
	(civ-selected khmer)))
	(goal trainram no)
	(goal trainmangonel no)
	(goal trainscorpion no)
	(goal trainbombard no)
=>
	(up-jump-rule 2))
(defrule
	(building-type-count-total town-center >= 1)
	(unit-type-count-total villager >= 7)
(or	(strategic-number sn-current-age >= imperial)
	(up-compare-goal strategy-type <= castle-war))
	(building-type-count-total barracks >= number-barracks)
	(building-type-count-total archery-range >= number-archery-ranges)
	(building-type-count-total stable >= number-stables)
	(building-type-count-total barracks >= 1)
	(building-type-count-total siege-workshop < 6)
	(building-available siege-workshop)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
	(unit-type-count-total villager >= 7)
	(strategic-number sn-current-age >= imperial)
(or	(civ-selected korean)
(or	(civ-selected celtic)
	(civ-selected khmer)))
	(building-type-count-total barracks >= 1)
	(building-type-count-total siege-workshop < 6)
	(building-available siege-workshop)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7)); end jump

(defrule
	(goal strategy fast-imp)
	(building-type-count-total siege-workshop < 1)
(or	(up-research-status c: imperial-age <= research-pending)
	(and	(strategic-number sn-current-age >= imperial)
		(goal underattack no)))
	(building-available siege-workshop)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))

#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(building-type-count-total blacksmith < 1)
	(current-age >= feudal-age)
	(strategic-number sn-current-age >= feudal)
(or	(building-type-count-total archery-range >= 1)
(or	(building-type-count-total stable >= 1)
	(building-type-count-total market >= 1)))
=>
	(set-goal temporary-goal7 1486509219))
(defrule
(or	(goal strategy sling)
(or	(building-type-count-total town-center <= 0)
(or	(building-type-count-total blacksmith >= 1)
	(up-compare-goal strategy-type == feudal-war))))
=>
	(up-jump-rule 2))
(defrule
	(civ-selected khmer)
	(strategic-number sn-current-age <= castlea)
	(military-population < 2)
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < up-max-civ)
(or	(goal dreitc no)
	(and	(building-type-count-total farm g:< maxfarms)
		(up-compare-goal excessWood < farmsmith-cost)))
	(up-compare-goal excessWood < khmerprep-cost)
=>
	(up-jump-rule 1))
(defrule
;	(up-compare-goal strategy != r-flush)
(or	(goal temporary-goal7 1486509219)
	(and	(up-compare-goal excessWood >= 445); 415
		(current-age <= feudal-age)))
(or	(building-type-count-total archery-range >= 1)
(or	(building-type-count-total stable >= 1)
	(building-type-count-total market >= 1)))
	(building-available blacksmith)
	(up-compare-goal excessWood >= smith-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts blacksmith)
	(enable-timer increase-ts-timer 7)); end jump

(defrule
(or	(goal strategy sling)
(or	(building-type-count-total town-center <= 0)
(or	(building-type-count-total blacksmith >= 1)
(or	(and	(or	(up-research-status c: ri-horse-collar == research-available); test
			(up-research-status c: ri-horse-collar == research-pending))
		(and	(building-type-count-total farm g:< maxfarms)
			(up-compare-goal excessWood < farmsmith-cost)))
	(up-compare-goal strategy-type != feudal-war)))))
=>
	(up-jump-rule 3))
(defrule
	(civ-selected khmer)
	(strategic-number sn-current-age <= castlea)
	(military-population < 2)
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < up-max-civ)
(or	(goal dreitc no)
	(and	(building-type-count-total farm g:< maxfarms)
		(up-compare-goal excessWood < farmsmith-cost)))
	(up-compare-goal excessWood < khmerprep-cost)
=>
	(up-jump-rule 2))
(defrule
(or	(goal temporary-goal7 1486509219)
	(and	(up-compare-goal excessWood >= 445); 415
		(current-age <= feudal-age)))
(or	(building-type-count-total market >= 1)
(or	(building-type-count-total archery-range >= 2)
	(building-type-count-total stable >= 2)))
	(building-available blacksmith)
	(up-compare-goal excessWood >= smith-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts blacksmith)
	(enable-timer increase-ts-timer 7)); end jump
(defrule
(or	(goal temporary-goal7 1486509219)
	(and	(up-compare-goal excessWood >= 445); 415
		(current-age <= feudal-age)))
(or	(goal maa-var yes)
	(goal sk-var yes))
	(building-type-count-total archery-range >= 1)
	(building-available blacksmith)
	(up-compare-goal excessWood >= smith-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts blacksmith)
	(enable-timer increase-ts-timer 7)); end jump

(defrule
	(civ-selected khmer)
	(strategic-number sn-current-age <= castlea)
	(military-population < 2)
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < up-max-civ)
(or	(goal dreitc no)
	(and	(building-type-count-total farm g:< maxfarms)
		(up-compare-goal excessWood < farmsmith-cost)))
	(up-compare-goal excessWood < khmerprep-cost)
=>
	(up-jump-rule 2))
(defrule
	(goal strategy s-flush)
	(building-type-count-total town-center >= 1)
	(goal position-goal pocket)
;(or	(building-type-count-total mining-camp >= 1)
;(or	(up-compare-goal total-gold-amount >= castle-gold)
;	(dropsite-min-distance gold <= 5)))
	(building-type-count-total stable >= 1)
	(building-type-count-total blacksmith < 1)
	(building-available blacksmith)
	(up-compare-goal excessWood >= smith-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts blacksmith)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal strategy grush)
(or	(up-compare-goal fg-var != yes)
	(building-type-count-total dock >= 3))
	(building-type-count-total town-center >= 1)
	(building-type-count-total mining-camp >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total blacksmith < 1)
	(building-available blacksmith)
	(up-compare-goal excessWood >= smith-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts blacksmith)
	(enable-timer increase-ts-timer 7)); end jump

#load-if-not-defined BULGARIANS-CIV
#load-if-not-defined UP-BULGARIANS-CIV-ALLY
(defrule
(or	(up-research-status c: imperial-age != research-pending)
(or	(and	(up-research-status c: ri-fletching >= research-pending)
		(or	(up-research-status c: ri-scale-barding >= research-pending)
			(up-research-status c: ri-scale-mail >= research-pending)))
(or	(up-compare-goal excessWood < smith-cost)
(or	(up-compare-goal increase-ts != 0)
	(building-type-count-total blacksmith >= 2)))))
=>
	(up-jump-rule 1))
(defrule; testing~
	(civilian-population >= 100)
(or	(unit-type-count-total archery-class >= 16)
(or	(unit-type-count-total archery-cannon-class >= 16)
	(unit-type-count-total cavalry-archer-class >= 16)))
(or	(unit-type-count-total infantry-class >= 16); test
(or	(unit-type-count-total cavalry-class >= 16)
	(unit-type-count-total cavalry-cannon-class >= 16)))
	(building-type-count-total town-center >= 1)
	(building-available blacksmith)
=>
	(set-goal increase-ts blacksmith)
	(enable-timer increase-ts-timer 7)
	(disable-self))
#end-if
#end-if

(defrule
	(goal increase-ts blacksmith)
(or	(up-pending-objects c: blacksmith >= 1)
	(building-type-count-total blacksmith >= 2))
=>
	(chat-local-to-self "Debugging blacksmith-construction.")
	(set-goal increase-ts 0))

(defrule
	(goal strategy stonewall)
	(up-research-status c: imperial-age >= research-available)
	(up-compare-goal excessWood < tc-100-wood)
	(building-type-count-total barracks < 5)
=>
	(up-jump-rule 5))
(defrule
	(game-time < 1800)
	(strategic-number sn-current-age >= cimperial)
	(up-compare-goal excessWood < 400)
;	(building-type-count-total barracks < 1)
	(building-type-count-total archery-range < 1)
;	(building-type-count-total stable < 1)
	(building-type-count-total siege-workshop < 1)
=>
	(up-jump-rule 4))
(defrule
	(goal dreitc yes)
(or	(strategic-number sn-current-age >= cimperial)
(or	(strategic-number sn-military-superiority >= 2)
(or	(building-type-count-total town-center >= 5)
(or	(population >= max-civ-pop)
	(unit-type-count archery-class >= 20)))))
	(building-type-count-total university < 1)
	(building-available university)
	(up-compare-goal excessWood >= uni-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts university)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal dreitc yes)
(or	(goal strategy grush)
(or	(unit-type-count-total galley-line >= 10)
	(unit-type-count-total longboat-line >= 10)))
	(building-type-count-total university < 1)
	(building-available university)
	(up-compare-goal excessWood >= uni-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts university)
	(enable-timer increase-ts-timer 7))
(defrule
	(civ-selected khmer)
	(up-compare-goal excessWood < khmerprep-cost)
	(strategic-number sn-current-age < cimperial)
=>
	(up-jump-rule 2))
(defrule
	(goal milunits no)
	(strategic-number sn-current-age == castlea)
	(population >= up-max-civ)
	(building-type-count-total university < 1)
	(building-type-count-total siege-workshop < 1)
	(building-type-count-total castle < 1)
	(building-available university)
	(up-compare-goal excessWood >= uni-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts university)
	(enable-timer increase-ts-timer 7)
	(disable-self)); end jump
(defrule
	(goal strategy fast-imp)
(nor	(civ-selected turkish)
	(civ-selected portuguese))
;	(building-type-count-total archery-range >= 1)
	(building-type-count-total university < 1)
(or	(building-type-count-total siege-workshop <= 0)
	(strategic-number sn-current-age >= cimperial))
	(building-available university)
	(up-compare-goal excessWood >= uni-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts university)
	(enable-timer increase-ts-timer 7)
	(disable-self)); end mini jump
#end-if

(defrule
	(goal increase-ts university)
(or	(up-pending-objects c: university >= 1)
	(building-type-count-total university >= 1))
=>
	(chat-local-to-self "Debugging university-construction.")
	(set-goal increase-ts 0))


(defrule
(or	(building-type-count-total market >= 1)
(or	(up-compare-goal excessWood < market-cost)
(or	(not	(building-available market))
(or	(building-type-count-total town-center <= 0)
	(up-compare-goal increase-ts != 0)))))
=>
	(up-jump-rule 12))
(defrule
	(up-compare-goal milunits != no)
	(game-time < 300)
	(unit-type-count villager < 8)
	(up-research-status c: castle-age >= research-pending)
	(up-compare-goal excessWood >= 5000)
	(up-compare-goal excessFood >= 5000)
	(up-compare-goal excessGold >= 5000)
	(up-compare-goal excessStone >= castle-stone)
=>
	(up-jump-rule 11))
(defrule
	(up-compare-const inf-game == yes)
(or	(not	(player-in-game any-ally))
(or	(building-type-count-total market >= 1)
	(and	(goal attacking no)
		(game-time < 750))))
=>
	(up-jump-rule 10))
(defrule
;	(goal dreitc yes)
(or	(goal strategy sling)
(or	(up-compare-goal excessWood >= 900)
(or	(and	(up-compare-goal excessFood < 100)
		(up-compare-goal excessGold >= 800))
	(and	(up-compare-goal excessFood >= 800)
		(up-compare-goal excessGold < 100)))))
=>
	(set-goal increase-ts market))
(defrule
(or	(players-building-type-count any-ally market >= 1)
(or	(building-type-count-total town-center >= 4)
(or	(research-available imperial-age)
(or	(building-type-count-total castle >= 1)
	(up-compare-goal excessWood >= 750)))))
	(building-type-count-total town-center >= 3)
=>
	(set-goal increase-ts market))
(defrule
	(building-type-count-total town-center < 3)
	(goal dreitc no)
	(goal underattack no)
	(building-available town-center); 	(strategic-number sn-current-age >= castlea)
	(current-age-time >= 60)
	(up-compare-goal excessWood >= 315)
	(stone-amount < tc-stone)
	(unit-type-count villager-stone <= 0)
=>
	(set-goal increase-ts market))
(defrule
(or	(strategic-number sn-current-age >= imperial)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(civilian-population >= up-max-civ)
(or	(population >= max-civ-pop)
	(unit-type-count-total trade-cart >= 10)))))
	(players-building-type-count any-ally market >= 1)
=>
	(set-goal increase-ts market))
(defrule
	(strategic-number sn-current-age <= feudal)
;	(current-age-time >= 12)
	(building-type-count-total blacksmith >= 1)
(or	(up-compare-goal excessWood >= 350); 250
(or	(building-type-count-total archery-range >= 3)
	(building-type-count-total stable >= 2)))
(or	(up-compare-goal total-food-amount < 800)
	(gold-amount < 200))
(or	(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance)
(or	(up-compare-goal excessWood >= farmmb-cost)
	(building-type-count-total farm g:>= maxfarms)))
=>
	(set-goal increase-ts market))
(defrule
	(research-available castle-age)
(or	(goal underattack no)
	(up-compare-goal gl-threat-time >= 12000)); test
;(or	(building-type-count-total archery-range >= 1)
;	(building-type-count-total stable >= 1))
	(up-compare-goal total-food-amount >= 600)
	(gold-amount <= 100)
	(unit-type-count villager-gold <= 0)
=>
	(set-goal increase-ts market))
(defrule
	(up-research-status c: castle-age <= research-unavailable)
	(strategic-number sn-current-age <= feudal)
(or	(up-compare-goal excessWood >= 575)
(or	(and	(goal strategy grush)
		(building-type-count-total blacksmith >= 1))
(or	(up-compare-goal strategy == castledrop)
	(goal milunits no))))
=>
	(set-goal increase-ts market))
(defrule
	(strategic-number sn-current-age <= feudal)
	(current-age-time >= 420)
(or	(up-compare-goal excessWood >= 350)
(or	(food-amount >= castle-food)
	(gold-amount >= castle-gold)))
(nand	(up-research-status c: castle-age == research-available)
	(and	(food-amount >= castle-food)
		(gold-amount >= castle-gold)))
=>
	(set-goal increase-ts market))
(defrule
	(game-time > 2)
(or	(and	(up-compare-goal tradeunits >= 7); 9
		(up-research-status c: imperial-age >= research-available))
(or	(cc-players-unit-type-count 0 tree-class < 150); 125
(or	(dropsite-min-distance wood s:> sn-maximum-wood-drop-distance)
	(dropsite-min-distance wood > 20))))
=>
	(set-goal increase-ts market))
(defrule
(or	(players-building-type-count any-ally market >= 1)
(or	(research-available imperial-age)
	(strategic-number sn-military-superiority >= 0))); 800+ wood
(or	(building-type-count-total town-center >= 3)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(civilian-population >= up-max-civ)))
=>
	(set-goal increase-ts market)); end jump

(defrule
	(goal increase-ts market)
(or	(up-pending-placement c: market)
(or	(building-type-count-total market >= 1)
(or	(up-compare-goal excessWood < market-cost)
	(not	(building-available market)))))
=>
	(chat-local-to-self "Debugging market-construction.")
	(set-goal increase-ts 0))

(defrule
	(goal inseln yes)
	(goal increase-ts 0)
(or	(strategic-number sn-current-age >= imperial)
	(unit-type-count-total trade-cog >= 6)); 8
	(building-type-count-total town-center >= 1)
	(players-building-type-count any-ally dock >= 1)
	(goal tradecarts no)
(or	(building-type-count-total dock == 10)
	(building-type-count-total dock <= 0))
	(can-build dock)
=>
	(set-strategic-number sn-dock-placement-mode -1)
	(build dock))

#load-if-defined DEFEND-WONDER
(defrule
	(game-time < 900)
	(goal defend no)
	(goal underattack no)
	(goal inseln yes)
	(building-type-count-total dock <= 0)
(or	(goal increase-ts 0)
(or	(goal increase-ts barracks)
(or	(goal increase-ts archery-range)
	(goal increase-ts stable))))
	(can-build dock)
=>
	(set-goal increase-ts 0)
	(build dock)
	(disable-self))
	
#end-if

#load-if-defined HAMBURGER-MAP
(defrule
	(building-type-count lumber-camp <= 1)
	(up-compare-goal excessWood < 350)
(or	(goal position-goal pocket)
(or	(and	(building-type-count lumber-camp <= 0)
			(up-compare-goal excessWood < 250))
	(and	(dropsite-min-distance wood >= 20)
		(dropsite-min-distance wood s:>= sn-maximum-wood-drop-distance))))
=>
	(up-jump-rule 15))
#end-if
(defrule
(or	(building-type-count-total town-center <= 0)
	(up-compare-goal excessWood < 1600))
(or	(building-type-count-total town-center <= 0)
(or	(building-type-count-total lumber-camp <= 0)
	(and	(goal inseln no)
		(and	(up-compare-goal increase-ts != 0)
			(up-compare-goal excessWood < 425)))))
=>
	(up-jump-rule 14))
(defrule
	(game-time < 150)
	(unit-type-count villager < 10)
	(unit-type-count villager-builder >= 2)
	(building-type-count-total dock >= 1)
	(goal enemy-boats no)
	(goal islands no)
	(up-compare-const extra-water-focus == 0)
=>
	(up-jump-rule 13))	
(defrule
	(goal strategy drush)
	(building-type-count-total barracks <= 0)
	(up-compare-goal excessWood < 325)
=>
	(up-jump-rule 12))
(defrule
	(goal inseln yes)
(or	(goal map water);wbody?
	(goal enemy-boats yes))
(or	(goal defend no)
(or	(goal attacking yes)
	(up-compare-goal biggestenemynavy <= 0)))
	(building-type-count-total dock <= 0)
	(can-build dock)
=>
	(build dock))
(defrule
	(up-compare-goal strategy-type2 == water)
	(goal fishing yes)
(or	(goal defend no)
(or	(goal attacking yes)
	(up-compare-goal biggestenemynavy <= 0)))
	(building-type-count-total dock <= 0)
	(can-build dock)
=>
	(build dock))
(defrule
(or	(and	(strategic-number sn-current-age < fcastlea)
		(and	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq2)
			(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq2)))
	(and	(strategic-number sn-current-age == feudal)
		(building-type-count-total blacksmith <= 0)))
=>
	(up-jump-rule 1))
(defrule
; test	(goal fleet yes)
	(strategic-number sn-current-age == dark)
(or	(goal map water);wbody?
	(goal enemy-boats yes))
(or	(goal defend no)
(or	(goal attacking yes)
	(up-compare-goal biggestenemynavy <= 0)))
	(building-type-count-total dock <= 0)
	(can-build dock)
=>
	(build dock)); end jump
(defrule
	(goal fleet yes)
(or	(goal defend no)
	(population >= max-civ-pop))
;(or	(goal map water);wbody?
	(goal enemy-boats yes);)
(or	(building-type-count-total town-center >= 3)
	(population >= up-max-civ)); civilian ;	(up-compare-goal strategy-type >= imperial-war)); for now
(or	(and	(building-type-count-total market >= 1)
		(building-type-count-total blacksmith >= 1))
	(strategic-number sn-current-age >= fcastlea));(goal dreitc yes)
	(building-type-count-total dock < 3)
	(can-build dock)
=>
	(build dock))
(defrule
	(goal fleet yes)
(or	(goal defend no)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(population >= max-civ-pop)))
	(goal inseln yes)
	(up-compare-goal excessWood >= 800)
(or	(goal map water)
	(goal enemy-boats yes))
	(building-type-count-total dock < 3)
	(can-build dock)
=>
	(build dock))
(defrule
;	(goal fleet yes)
	(goal defend no)
	(goal strategy grush)
(or	(strategic-number sn-current-age >= dfeudal)
	(up-compare-goal gr-var >= 2))
	(building-type-count-total dock < 5)
(or	(building-type-count-total dock < 3)
(or	(building-type-count-total market >= 1)
	(up-compare-goal excessWood >= 325)))
	(can-build dock)
=>
	(build dock))
(defrule
	(up-compare-goal excessWood < 4200)
	(building-type-count-total dock >= 3)
	(up-compare-goal traingalley != yes)
	(up-compare-goal trainfire != yes)
	(up-compare-goal traindemo != yes)
	(up-compare-goal traincaravel != yes)
	(up-compare-goal trainturtle != yes)
	(up-compare-goal trainlongboat != yes)
	(up-compare-goal traincannon != yes)
	(up-compare-goal trainfish != yes)
	(up-compare-goal traincog != yes)
=>
	(up-jump-rule 3))
(defrule
	(goal inseln no)
	(up-compare-goal excessWood < 445); 295
(or	(up-compare-goal excessWood < 325); 235
	(up-compare-goal navycount g:>= maxnavy))
	(building-type-count-total stable < number-stables); or?
	(building-type-count-total archery-range < number-archery-ranges)
	(building-type-count-total barracks < number-barracks)
	(building-type-count-total stable < 6); or?
	(building-type-count-total archery-range < 6)
	(building-type-count-total barracks < 6)
	(building-type-count-total siege-workshop < 3)
=>
	(up-jump-rule 2))
(defrule
	(up-compare-goal excessWood < 2200)
	(building-type-count-total town-center < 5)
(or	(up-compare-goal custom-civ-pop < up-max-civ)
	(and	(up-compare-const civilian-percent < 33)
		(up-research-status c: castle-age <= research-available)))
	(strategic-number sn-current-age < imperial)
=>
	(up-jump-rule 1))
(defrule
	(goal fleet yes)
	(goal defend no)
;	(goal map water)
(or	(and	(goal map water)
		(up-compare-goal excessWood >= 4200))
(or	(goal inseln yes)
	(goal enemy-boats yes)))
	(building-type-count-total dock < 10)
	(can-build dock)
=>
	(build dock))
(defrule
	(goal fleet yes)
	(goal defend no)
	(strategic-number sn-current-age >= imperial)
(or	(up-compare-goal excessWood >= 325)
	(goal enemy-boats yes))
	(building-type-count-total dock < 1)
	(can-build dock)
=>
	(build dock)); end jump


#load-if-not-defined BATTLE-ROYALE
#load-if-not-defined INFINITE-RESOURCES-START
#load-if-not-defined DEFEND-WONDER;
(defrule
(or	(up-compare-goal tradecarts != yes)
(or	(building-type-count-total town-center <= 0)
(or	(up-compare-goal increase-ts != 0)
(or	(and	(building-type-count-total market >= 1)
		(building-type-count-total market >= market-diff))
	(and	(not	(player-in-game any-ally))
		(players-building-type-count every-ally market <= 0))))))
=>
	(up-jump-rule 5))
(defrule
	(strategic-number sn-current-age < imperial)
	(up-research-status c: ri-caravan < research-pending)
(or	(unit-type-count-total trade-cart < 12)
	(building-type-count-total market >= 2))
	(building-type-count-total town-center < 5); 4
	(civilian-population < up-max-civ)
	(up-compare-goal custom-civ-pop < up-max-civ)
	(population < max-civ-pop)
(or	(building-type-count-total town-center < 3)
	(up-compare-goal custom-civ-pop < 120))
	(up-compare-goal excessWood < 850)
	(game-time < 2400)
=>
	(up-jump-rule 4))
(defrule
(or	(unit-type-count-total trade-cart < 12)
	(building-type-count-total market >= 2))
	(up-compare-goal excessWood < 450)
(or	(and	(building-type-count-total market >= 1)
			(and	(strategic-number sn-current-age < imperial)
				(goal traincart no)))
	(and	(strategic-number sn-current-age <= castlea); ==
		(and	(up-compare-goal excessWood < marketmb-cost)
			(up-research-status c: imperial-age <= research-unavailable))))
=>
	(up-jump-rule 3))
(defrule
	(strategic-number sn-current-age >= imperial)
(or	(unit-type-count-total trade-cart < 12)
	(building-type-count-total market >= 2))
	(strategic-number sn-military-superiority <= 1)
	(up-compare-goal excessWood < marketmb-cost)
	(goal uugoal no);	(building-type-count-total castle < 2)
	(building-type-count-total stable < 6)
	(building-type-count-total archery-range < 6)
	(building-type-count-total barracks < 6)
	(building-type-count-total stable < number-stables)
	(building-type-count-total archery-range < number-archery-ranges)
	(building-type-count-total barracks < number-barracks)
	(building-type-count-total siege-workshop < 3)
=>
	(up-jump-rule 2))
(defrule
	(building-type-count-total market < 4); 3
	(can-build market)
=>
	(set-strategic-number sn-placement-zone-size 10); 20
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: market-neg-dist)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: market))
(defrule
(or	(building-type-count-total market == 4); 3
	(building-type-count-total market == 0))
	(goal tradecarts yes)
	(players-population any-ally >= max-civ-pop)
	(can-build market)
=>
	(set-strategic-number sn-placement-zone-size 10); 20
	(set-strategic-number sn-placement-to-center 1); testo 2
	(up-set-placement-data this-any-ally -1 c: market-neg-dist)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: market)
;	(disable-self); end jump
)
#end-if;
#end-if
#end-if


(defrule
	(civ-selected portuguese)
	(building-type-count-total feitoria g:< feitoria-cap)
	(up-compare-goal excessWood < 675)
(or	(up-research-status c: imperial-age == research-pending)
	(building-available feitoria))
=>
	(up-jump-rule 4))
(defrule
	(civ-selected khmer)
	(up-compare-goal excessWood < khmerprep-cost)
	(strategic-number sn-current-age <= castlea)
(or	(strategic-number sn-current-age <= feudal)
	(goal position-goal pocket))
(or	(building-type-count-total market <= 0)
	(building-type-count-total blacksmith <= 0))
;	(up-compare-goal excessWood < farmmb-cost)
;	(strategic-number sn-current-age <= dfeudal)
;	(building-type-count-total farm g:< maxfarms)
	(up-compare-goal maa-var != yes)
	(strategic-number cavalry < 3)
	(goal trainchamp no)
	(goal trainpike no)
	(goal traincondottiero no)
=>
	(up-jump-rule 1))
(defrule
	(goal strategy fast-imp)
(not	(building-available archery-range))
	(building-type-count-total barracks < 1)
(or	(goal trainhandcannon yes)
(or	(goal trainarcher yes)
	(up-research-status c: imperial-age == research-pending)))
	(up-research-status c: imperial-age >= research-pending)
	(building-available barracks)
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7)); end jump
(defrule
	(goal strategy fast-imp)
	(building-type-count-total archery-range < 2)
(or	(goal trainhandcannon yes)
(or	(goal trainarcher yes)
	(up-research-status c: imperial-age == research-pending)))
	(up-research-status c: imperial-age >= research-pending)
	(building-available archery-range)
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal strategy fast-imp)
	(building-type-count-total archery-range >= 1); (unit-available hand-cannoneer)
	(building-type-count-total archery-range < number-archery-ranges)
(or	(up-compare-goal excessWood >= tc-175-wood)
(or	(stone-amount < tc-stone)
(or	(up-compare-goal custom-civ-pop >= 60)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(population >= max-civ-pop)))))
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7)); end jump

(defrule
(or	(up-compare-goal excessWood < mb-cost)
(or	(up-compare-goal increase-ts != 0)
(or	(building-type-count-total lumber-camp <= 0)
(or	(building-type-count-total mill <= 0)
	(building-type-count-total town-center <= 0)))))
=>
	(up-jump-rule 9))
(defrule
	(up-compare-goal strategy != r-flush)
	(up-compare-goal strategy != s-flush)
	(up-compare-goal strategy != krush)
	(up-compare-goal strategy != a-rush)
	(up-compare-goal strategy != ca-rush)
	(up-compare-goal milunits != yes)
=>
	(up-jump-rule 8))
(defrule
	(goal strategy r-flush)
	(building-type-count-total archery-range < 5)
(or	(up-compare-goal excessWood >= tc-175-wood)
(or	(up-compare-goal total-stone-amount < tc-stone)
	(goal dreitc yes)))
;(or	(and	(current-age <= feudal-age)
;		(not	(building-available siege-workshop))
(or	(building-type-count-total siege-workshop >= 1)
	(up-compare-goal excessWood >= 375));)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal strategy r-flush)
	(building-type-count-total archery-range < 3)
(or	(building-type-count-total archery-range < 2)
(or	(up-compare-goal custom-civ-pop >= 42)
	(up-compare-goal feinde <= 1)))
(or	(building-type-count-total archery-range < 2)
(or	(up-research-status c: ri-wheel-barrow >= research-pending); test
	(building-type-count-total market >= 1)))
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal strategy a-rush)
(or	(building-type-count-total archery-range < 1)
	(building-type-count-total blacksmith >= 1))
(or	(building-type-count-total archery-range < 2)
(or	(goal dreitc yes)
	(building-type-count-total town-center >= 3))); 2
	(building-type-count-total archery-range < 3)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal strategy a-rush)
	(goal strategy ca-rush))
	(building-type-count-total town-center >= 3)
	(building-type-count-total siege-workshop >= 1)
	(building-type-count-total archery-range < 6)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal strategy ca-rush)
(or	(building-type-count-total archery-range < 1)
	(building-type-count-total blacksmith >= 1))
(or	(and	(building-type-count-total archery-range < 2)
		(or	(building-type-count-total town-center >= 3); 2
			(goal dreitc yes)))
	(building-type-count-total town-center >= 3)); 2
	(building-type-count-total archery-range < 3)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(civ-selected khmer)
	(up-compare-goal excessWood < khmerprep-cost)
	(strategic-number sn-current-age <= castlea)
(or	(strategic-number sn-current-age <= feudal)
	(goal position-goal pocket))
(or	(building-type-count-total market <= 0)
	(building-type-count-total blacksmith <= 0))
;	(up-compare-goal excessWood < farmmb-cost)
;	(strategic-number sn-current-age <= dfeudal)
;	(building-type-count-total farm g:< maxfarms)
	(up-compare-goal maa-var != yes)
	(strategic-number cavalry < 3)
	(goal trainchamp no)
	(goal trainpike no)
	(goal traincondottiero no)
=>
	(up-jump-rule 2))
(defrule
	(up-compare-goal milunits != no)
	(strategic-number sn-current-age >= dfeudal)
(or	(building-type-count-total mining-camp >= 1)
(or	(and	(or	(goal strategy s-flush)
			(goal sk-var yes))
		(building-type-count-total lumber-camp >= 2))
	(up-compare-goal excessWood >= raxcamp-cost)))
	(building-type-count-total barracks < 1)
	(building-available barracks)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal trainpike yes)
(or	(goal strategy r-flush)
	(goal strategy a-rush)))
(or	(strategic-number cavalry >= 7)
	(players-building-type-count target-player stable >= 2))
	(strategic-number sn-current-age >= fcastlea)
	(building-type-count-total archery-range >= 2)
	(building-type-count-total barracks < 2)
	(building-available barracks)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7)); end jump
	
(defrule
	(goal strategy s-flush)
	(building-type-count-total town-center >= 1)
	(building-type-count-total stable < 1)
	(building-available stable)
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal strategy s-flush)
	(building-type-count-total town-center >= 1)
	(goal position-goal flank)
	(building-type-count-total mining-camp >= 1)
	(building-type-count-total archery-range < 1)
	(building-available archery-range)
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(up-compare-goal strategy != krush)
(or	(not	(building-available stable))
(or	(up-compare-goal excessWood < mb-cost)
(or	(up-compare-goal increase-ts != 0)
(or	(building-type-count-total stable >= 4)
	(building-type-count-total town-center <= 0))))))
=>
	(up-jump-rule 4))
(defrule
	(building-type-count-total stable < 2)
	(up-compare-goal kr-var >= 2)
(or	(current-age >= castle-age)
(or	(building-type-count-total farm g:>= maxfarms)
(or	(and	(up-compare-goal excessWood >= 235); farmmb-cost
		(up-research-status c: ri-horse-collar != research-available))
	(up-compare-goal excessWood >= 250))))
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total stable < 2)
	(up-compare-goal kr-var >= 2)
	(strategic-number sn-current-age >= fcastlea)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(building-type-count-total stable < 1)
(or	(building-type-count-total town-center >= 3)
(or	(up-compare-const sd-game == 1)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(population >= max-civ-pop)))))
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(building-type-count-total town-center >= 2); 2
	(up-compare-goal custom-civ-pop >= 40)); 40
	(up-pending-objects c: knight-line >= 2); 3
	(strategic-number ep-civilian-superiority >= 3)
	(strategic-number ep-military-superiority <= -5)
	(building-type-count-total stable < 3)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7)); end jump

(defrule
(or	(building-type-count-total town-center <= 0)
	(up-compare-goal excessWood < mb-cost))
	(up-compare-goal excessWood < tc-175-wood)
=>
	(up-jump-rule 8))
(defrule
(or	(up-compare-goal increase-ts != 0)
(or	(up-compare-goal strategy == stonewall)
(or	(up-compare-goal strategy == krush)
(or	(up-compare-goal strategy == a-rush)
(or	(up-compare-goal strategy == ca-rush)
(or	(up-compare-goal strategy == r-flush)
	(up-compare-goal strategy == s-flush)))))))
=>
	(up-jump-rule 7))
(defrule
(or	(up-compare-goal milunits == no)
	(up-compare-goal milunits == castledrop))
(or	(up-compare-goal excessWood < tc-175-wood)
	(and	(strategic-number sn-current-age <= feudal)
		(up-compare-goal excessWood < marketmb-cost))); 1000
	(up-research-status c: ri-heavy-plow < research-pending)
	(building-type-count-total town-center < 5);
	(up-compare-goal custom-civ-pop < up-max-civ)
	(population < del-civ-pop)
	(goal underattack no)
=>
	(up-jump-rule 6))
(defrule
(or	(goal enemy-goal2 klew)
	(strategic-number eagles >= 16))
(or	(unit-type-count-total militiaman-line >= 2)
	(goal trainchamp yes))
	(building-type-count-total blacksmith >= 1)
(or	(building-type-count-total barracks < 2)
	(and	(strategic-number sn-military-superiority <= -1)
		(building-type-count-total barracks < 3)))
	(building-available barracks)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(and	(goal enemy-goal rush)
		(players-building-type-count focus-player archery-range >= 2))
(or	(and	(players-building-type-count focus-player archery-range >= 2)
		(strategic-number archers >= 7))
		(strategic-number archers >= 10)))
	(building-type-count-total archery-range < 2)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total archery-range < 2)
(or	(and	(goal enemy-goal rush)
		(players-building-type-count focus-player barracks >= 2))
(or	(and	(players-building-type-count focus-player barracks >= 2)
		(strategic-number infantry >= 7))
		(strategic-number infantry >= 10)))
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal milunits yes)
(or	(population >= up-max-civ)
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total barracks < 2)
	(strategic-number sn-current-age >= dfeudal)
	(goal trainpike yes)
(or	(players-building-type-count focus-player stable >= 2)
	(strategic-number cavalry >= 10))
	(building-available barracks)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal milunits yes)
(or	(population >= up-max-civ)
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total barracks < 3)
	(strategic-number sn-current-age >= dfeudal)
	(goal trainpike yes)
(or	(players-building-type-count focus-player stable >= 3)
	(strategic-number cavalry >= 15))
	(building-available barracks)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
	(goal enemy-goal rush)
	(strategic-number moenchesiege >= 6)
	(building-type-count-total stable < 2)
	(building-available stable)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7)); end jumps


(defrule
(or	(up-compare-goal milunits == no)
	(up-compare-goal milunits == castledrop))
(or	(up-compare-goal excessWood < tc-175-wood)
	(and	(current-age <= feudal-age)
		(and	(strategic-number sn-current-age < imperial)
			(up-compare-goal excessWood < 1000))))
	(up-research-status c: ri-heavy-plow < research-pending)
	(building-type-count-total town-center < 5);
	(up-compare-goal custom-civ-pop < up-max-civ)
	(population < del-civ-pop)
	(goal underattack no)
=>
	(up-jump-rule 12))
(defrule
	(goal position-goal pocket)
	(strategic-number sn-current-age <= castlea)
(or	(up-research-status c: imperial-age == research-unavailable)
	(building-type-count-total market <= 0))
	(up-compare-goal excessWood < 400)
(or	(building-type-count-total stable >= 2)
(or	(building-type-count-total archery-range >= 2)
	(building-type-count-total barracks >= 2)))
=>
	(up-jump-rule 11))
(defrule
(or	(up-compare-goal excessWood < mb-cost)
(or	(up-compare-goal increase-ts != 0)
(or	(up-compare-goal strategy == krush)
(or	(up-compare-goal strategy == a-rush)
(or	(up-compare-goal strategy == ca-rush)
(or	(building-type-count-total town-center <= 0)
(not	(building-available stable))))))))
=>
	(up-jump-rule 10))
(defrule
	(up-compare-goal milunits != no)
	(up-compare-goal strategy != krush)
	(goal enemy-goal rush)
(or	(players-unit-type-count focus-player scorpion-line >= 3)
	(players-unit-type-count focus-player mangonel-line >= 3))
	(unit-type-count-total knight-line < 8)
	(unit-type-count-total scout-cavalry-line < 20)
	(building-type-count-total stable < 2)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
(or	(and	(strategic-number moenchesiege >= 10)
		(building-type-count-total stable < 2))
	(and	(strategic-number moenchesiege >= 15)
		(building-type-count-total stable < 3)))
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
(or	(and	(strategic-number moenchesiege >= 20)
		(building-type-count-total stable < 4))
	(and	(strategic-number moenchesiege >= 25)
		(building-type-count-total stable < 5)))
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal enemy-goal rush)
	(players-unit-type-count focus-player spearman-line < 16)
	(strategic-number sn-military-superiority <= 0)
(or
;	(and
	(building-type-count-total stable < 1)
;		(building-type-count-total monastery >= 1))
	(and	(strategic-number sn-military-superiority <= -2)
		(building-type-count-total stable < 2)))
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
	(strategic-number sn-current-age >= fcastlea)
	(strategic-number sn-military-superiority <= 0)
(or	(up-compare-goal enemy-goal != 0)
(or	(and	(up-compare-goal excessWood >= 350)
		(strategic-number sn-military-superiority <= -1))
	(strategic-number sn-military-superiority <= -2)))
	(building-type-count-total stable < 1)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
	(building-type-count castle == 0)
	(strategic-number sn-current-age >= fcastlea)
(or	(goal trainhussar yes);
	(goal trainknight yes));
(or	(and	(goal strategy r-flush)
		(or	(strategic-number sn-military-superiority <= -1); 1
			(civ-selected turkish)))
	(goal dreitc yes))
	(building-type-count-total stable < 1)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal position-goal flank)
;	(up-compare-const mp-game == 1)
	(building-type-count castle == 0)
	(strategic-number sn-current-age >= fcastlea)
(or	(goal trainhussar yes);
	(goal trainknight yes));
	(strategic-number sn-military-superiority <= 0)
	(strategic-number moenche < 10)
	(players-unit-type-count every-enemy spearman-line < 16)
	(building-type-count-total stable < 1)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
	(building-type-count-total stable < 2)
	(goal dreitc yes)
(or	(building-type-count castle == 0)
	(strategic-number sn-current-age >= imperial))
(or	(up-compare-goal excessWood > 220)
	(building-type-count-total siege-workshop > 0))
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
	(cc-players-unit-type-count 0 gold-mine < 2)
	(up-compare-goal excessWood >= 500)
(or	(building-type-count castle == 0)
	(strategic-number sn-current-age >= imperial))
	(building-type-count-total stable < 2)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
(or	(and	(cc-players-unit-type-count 0 gold-mine < 6)
		(building-type-count-total market >= 1))
(or	(up-compare-goal excessWood >= 1000); 745
	(strategic-number sn-current-age >= imperial)))
;	(strategic-number sn-maximum-town-size >= 22)
	(goal allowdmstable yes)
	(building-type-count-total stable < number-stables)
	(game-time >= max-delay)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7)) ; end jump

#load-if-not-defined ETHIOPIAN-CIV
#load-if-not-defined KHMER-CIV
#load-if-not-defined MALAY-CIV
#load-if-not-defined MALIAN-CIV
#load-if-not-defined VIETNAMESE-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined TEUTONIC-CIV ; Mongols, 
#load-if-not-defined VIKING-CIV ; Huns, Spanish, Franks, Turks, Saracens, Magyars, Indians, Berbers, Burmese, Portuguese, Bulgarians, Cumans, Tatars

(defrule
	(building-type-count-total town-center >= 1)
	(strategic-number sn-current-age >= castlea)
	(strategic-number spears < 15)
	(goal milunits yes)
(or	(strategic-number sn-military-superiority <= -2)
(or	(building-type-count archery-range >= 3)
;(or	(not	(goal enemy-goal 0))
	(goal dreitc yes)));)
	(building-type-count-total stable < 1)
	(building-available stable)
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))

#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

#load-if-defined TURKISH-CIV
(defrule
	(building-type-count-total town-center >= 1)
        (building-type-count-total stable < 1)
	(goal milunits yes); new
	(strategic-number sn-military-superiority <= -1)
(or	(players-building-type-count focus-player stable >= 3)
(or	(and	(players-building-type-count focus-player stable >= 2)
		(strategic-number cavalry >= 10))
	(strategic-number cavalry >= 15)))
	(building-available stable)
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
#end-if

(defrule
(or	(up-compare-goal milunits == no)
	(up-compare-goal milunits == castledrop))
(or	(up-compare-goal excessWood < tc-175-wood)
	(and	(current-age <= feudal-age)
		(and	(strategic-number sn-current-age < imperial)
			(up-compare-goal excessWood < 1000))))
	(up-research-status c: ri-heavy-plow < research-pending)
	(building-type-count-total town-center < 5);
	(up-compare-goal custom-civ-pop < up-max-civ)
	(population < del-civ-pop)
	(goal underattack no)
=>
	(up-jump-rule 10))
(defrule
	(goal position-goal pocket)
	(strategic-number sn-current-age <= castlea)
(or	(up-research-status c: imperial-age == research-unavailable)
	(building-type-count-total market <= 0))
	(up-compare-goal excessWood < 400)
(or	(building-type-count-total stable >= 2)
(or	(building-type-count-total archery-range >= 2)
	(building-type-count-total barracks >= 2)))
=>
	(up-jump-rule 9))
(defrule
(or	(up-compare-goal excessWood < mb-cost)
(or	(up-compare-goal increase-ts != 0)
(or	(up-compare-goal strategy == stonewall)
(or	(up-compare-goal strategy == krush)
(or	(up-compare-goal strategy == s-flush)
(or	(building-type-count-total town-center <= 0)
(not	(building-available archery-range))))))))
=>
	(up-jump-rule 8))
(defrule
	(building-type-count-total archery-range < 1)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total archery-range < 2)
(or	(goal dreitc yes)
(or	(goal enemy-goal flush)
	(strategic-number sn-military-superiority <= -1)))
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal enemy-goal flush)
	(strategic-number sn-military-superiority <= -2))
	(players-current-age focus-player == feudal-age)
	(strategic-number sn-military-superiority <= 0)
(or	(strategic-number sn-current-age >= fcastlea)
(or	(building-type-count-total market >= 1)
	(strategic-number sn-military-superiority <= -1)))
	(building-type-count-total archery-range < 4)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total archery-range < 4)
(or	(building-type-count-total siege-workshop >= 1)
(or	(building-type-count-total university >= 1)
(or	(up-compare-goal excessWood >= 375); 275
	(strategic-number sn-current-age >= imperial))))
	(goal dreitc yes)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(building-type-count-total archery-range < 3)
	(and	(goal position-goal flank)
		(and	(strategic-number sn-current-age >= fcastlea)
			(and	(not	(building-available stable))
				(strategic-number sn-military-superiority <= -1))))); -2
;	(building-type-count-total archery-range < 4)
	(building-type-count-total archery-range < number-archery-ranges)
	(goal dreitc yes)
	(game-time >= max-delay)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(up-compare-goal excessWood > 275)
	(not	(building-available town-center)))
	(strategic-number sn-current-age >= fcastlea)
(or	(strategic-number infantry >= 10)
	(strategic-number archers >= 15))
	(building-type-count-total archery-range < 4)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-compare-goal excessWood >= 220)
	(cc-players-unit-type-count 0 gold-mine < 4)
	(building-type-count-total archery-range < 6)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(and	(cc-players-unit-type-count 0 gold-mine < 6)
		(building-type-count-total market >= 1))
(or	(up-compare-goal excessWood >= 1000); 745
	(strategic-number sn-current-age >= imperial)))
;	(strategic-number sn-maximum-town-size >= 22)
	(goal allowdmarchery yes)
	(building-type-count-total archery-range < number-archery-ranges)
	(game-time >= max-delay)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7)) ; end jump


(defrule
(nor	(civ-selected aztec)
(or	(civ-selected incan)
	(civ-selected mayan)))
=>
	(up-jump-rule 2))
(defrule
	(building-type-count-total town-center >= 1)
(or	(and	(strategic-number moenche >= 10)
		(building-type-count-total barracks < 2))
	(and	(strategic-number moenche >= 15)
		(building-type-count-total barracks < 3)))
	(building-available barracks)
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
(or	(and	(strategic-number moenche >= 20)
		(building-type-count-total barracks < 4))
	(and	(strategic-number moenche >= 25)
		(building-type-count-total barracks < 5)))
	(building-available barracks)
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7)); end jump


(defrule
	(civ-selected khmer)
	(up-compare-goal excessWood < khmerprep-cost)
	(strategic-number sn-current-age <= castlea)
(or	(strategic-number sn-current-age <= feudal)
	(goal position-goal pocket))
(or	(building-type-count-total market <= 0)
	(building-type-count-total blacksmith <= 0))
;	(up-compare-goal excessWood < farmmb-cost)
;	(strategic-number sn-current-age <= dfeudal)
;	(building-type-count-total farm g:< maxfarms)
	(up-compare-goal maa-var != yes)
	(strategic-number cavalry < 3)
	(goal trainchamp no)
	(goal trainpike no)
	(goal traincondottiero no)
=>
	(up-jump-rule 14))
(defrule
	(goal position-goal pocket)
	(strategic-number sn-current-age <= castlea)
(or	(up-research-status c: imperial-age == research-unavailable)
	(building-type-count-total market <= 0))
	(up-compare-goal excessWood < 400)
(or	(building-type-count-total stable >= 2)
(or	(building-type-count-total archery-range >= 2)
	(building-type-count-total barracks >= 2)))
=>
	(up-jump-rule 13))
(defrule
(or	(up-compare-goal excessWood < mb-cost)
(or	(up-compare-goal increase-ts != 0)
(or	(up-compare-goal strategy == krush)
(or	(up-compare-goal strategy == s-flush)
(or	(building-type-count-total town-center <= 0)
(not	(building-available barracks)))))))
=>
	(up-jump-rule 12))
(defrule
(or	(up-compare-goal milunits == no)
	(up-compare-goal milunits == castledrop))
(or	(up-compare-goal excessWood < tc-175-wood)
	(and	(current-age <= feudal-age)
		(and	(strategic-number sn-current-age < imperial)
			(up-compare-goal excessWood < 1000))))
	(up-research-status c: ri-heavy-plow < research-pending)
	(building-type-count-total town-center < 5);
	(up-compare-goal custom-civ-pop < up-max-civ)
	(population < del-civ-pop)
	(goal underattack no)
=>
	(up-jump-rule 11))
(defrule
(or	(and	(up-unit-type-in-town c: scout-cavalry-line >= 4)
		(strategic-number sn-current-age >= dfeudal))
	(and	(up-compare-goal excessWood >= 650)
		(strategic-number sn-current-age <= dark)))
	(building-type-count-total barracks < 1)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal strategy drush)
;(or	(goal milunits yes)
;(or	(population >= up-max-civ)
;	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total town-center >= 1)
(or	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mill >= 1))
	(building-type-count-total barracks < 1)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal strategy stonewall)
(or	(strategic-number sn-current-age >= imperial)
	(research-available imperial-age))
	(building-type-count-total town-center >= 1)
	(current-age >= castle-age)
(or	(up-compare-goal excessWood > 220)
	(building-type-count-total siege-workshop > 0))
	(building-type-count-total barracks < 6)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal milunits yes)
(or	(population >= up-max-civ)
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total town-center >= 1)
	(up-compare-goal excessWood >= raxcamp-cost)
	(cc-players-unit-type-count 0 gold-mine < 4)
	(up-compare-goal relic-count < 20)
	(strategic-number sn-current-age >= dfeudal)
	(building-type-count-total barracks < 6)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
(or	(up-research-status c: imperial-age >= research-available)
(or	(building-type-count-total town-center >= 5)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(population >= max-civ-pop)
	(goal underattack yes)))))
;(or	(up-compare-goal excessWood >= raxcamp-cost)
	(strategic-number sn-current-age >= dfeudal);)
	(building-type-count-total barracks < 1)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total town-center >= 1)
(or	(and	(cc-players-unit-type-count 0 gold-mine < 6)
		(building-type-count-total market >= 1))
(or	(up-compare-goal excessWood >= 1000); 745
	(strategic-number sn-current-age >= imperial)))
;(or	(goal allowdmbarracks yes)
;	(current-age == dark-age))
	(strategic-number sn-current-age >= dfeudal)
	(building-type-count-total barracks < number-barracks)
	(game-time >= max-delay)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(strategic-number sn-current-age >= dfeudal)
(or	(goal milunits yes)
(or	(population >= up-max-civ)
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total mill >= 1)
	(building-type-count-total town-center >= 1)
(or	(building-type-count-total mining-camp >= 1)
	(up-compare-goal excessWood >= raxcamp-cost))
	(building-type-count-total barracks < 1)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(strategic-number sn-current-age >= dfeudal)
(or	(goal milunits yes)
(or	(population >= up-max-civ)
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total mining-camp >= 1)
	(building-type-count-total town-center >= 1)
(or	(players-military-population any-enemy >= 2)
	(food-amount >= 450)); 25 vils
	(building-type-count-total barracks < 1)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal milunits yes)
(or	(population >= up-max-civ)
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total town-center >= 1)
	(goal dreitc yes)
(or	(building-type-count-total archery-range >= 3)
	(building-type-count-total stable >= 3))
	(building-type-count-total siege-workshop >= 1)
	(building-type-count-total barracks < 2)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal milunits yes)
(or	(population >= up-max-civ)
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total town-center >= 1)
	(goal dreitc yes)
(or	(building-type-count-total archery-range >= 4)
	(building-type-count-total stable >= 4))
	(building-type-count-total siege-workshop >= 1)
	(building-type-count-total barracks < 3)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(goal milunits yes)
(or	(population >= up-max-civ)
	(strategic-number sn-current-age >= imperial)))
	(building-type-count-total town-center >= 1)
	(current-age >= castle-age)
	(goal dreitc yes)
(or	(players-building-type-count target-player stable >= 3)
	(strategic-number cavalry >= 15))
	(strategic-number sn-current-age >= dfeudal)
	(building-type-count-total barracks < 3)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7)); end jump




(defrule
(or	(and	(strategic-number sn-military-superiority <= 0)
		(and	(unit-type-count-total villager < 16)
			(game-time < 128)))
(or	(building-type-count-total town-center <= 0)
(not	(building-available siege-workshop))))
=>
	(up-jump-rule 17))
(defrule
(or	(goal strategy krush)
	(goal milunits castledrop))
	(building-type-count-total town-center < 3)
	(players-building-type-count target-player stone-wall-line < 3)
(nand	(strategic-number sn-maximum-town-size < 40)
	(or	(and	(up-unit-type-in-town c: archer-line >= 5)
			(military-population < 3))
		(or	(up-building-type-in-town c: watch-tower >= 1)
			(up-building-type-in-town c: castle >= 1))))
; test	(goal attacking no)
=>
	(up-jump-rule 16))
(defrule
	(strategic-number sn-current-age <= feudal)
(or	(goal attacking no)
	(strategic-number teamsuperiority <= 2))
=>
	(up-jump-rule 15))
(defrule
	(civ-selected khmer)
	(up-compare-goal excessWood < khmerprep-cost)
	(strategic-number sn-current-age < cimperial)
=>
	(up-jump-rule 2))
(defrule
	(goal increase-ts archery-range)
(or	(building-type-count-total town-center >= 3)
	(goal dreitc yes))
(or	(goal milunits no)
	(goal position-goal pocket))
	(strategic-number sn-current-age == castlea)
	(building-type-count-total monastery >= 1)
	(building-type-count-total university < 1)
	(building-type-count-total siege-workshop < 1)
	(building-type-count castle < 1)
	(up-compare-goal excessWood < sw-cost)
=>
	(chat-local-to-self "Delaying archery-range.")
	(set-goal increase-ts 0))
(defrule ; go up 4 - no esc
(or	(building-type-count-total town-center >= 3)
	(goal dreitc yes))
(or	(goal milunits no)
	(goal position-goal pocket))
	(strategic-number sn-current-age == castlea)
	(building-type-count-total monastery >= 1)
	(building-type-count-total university < 1)
	(building-type-count-total siege-workshop < 1)
	(building-type-count castle < 1)
	(up-compare-goal excessWood >= sw-cost); was escr
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7)); end mini jump
(defrule
	(up-compare-goal milunits != no)
(or	(and	(goal enemy-goal rush)
		(players-building-type-count focus-player archery-range >= 2))
(or	(and	(players-building-type-count focus-player archery-range >= 3); 2
		(strategic-number skirmsarchers >= 7)); archers
	(strategic-number skirmsarchers >= 10))); archers
	(building-type-count-total siege-workshop < 1)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(building-type-count-total archery-range >= 3)
(or	(building-type-count-total barracks >= 3)
	(building-type-count-total stable >= 3)))
(or	(goal dreitc yes)
(or	(strategic-number sn-current-age >= imperial)
	(strategic-number sn-military-superiority >= 1))); 2
	(building-type-count-total siege-workshop < 1)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-compare-goal milunits != no)
(or	(strategic-number archers >= 10)
	(players-unit-type-count focus-player skirmisher-line >= 20))
	(players-unit-type-count every-enemy scout-cavalry-line <= 5)
	(strategic-number cavalry <= 5)
	(players-unit-type-count every-enemy huskarl-line <= 5)
	(players-unit-type-count every-enemy eagle-warrior-line <= 5)
	(players-unit-type-count every-enemy woad-raider-line <= 5)
	(strategic-number sn-military-superiority <= -1)
	(building-type-count-total siege-workshop < 1)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(players-building-type-count focus-player krepost >= 1)
(or	(players-building-type-count focus-player donjon >= 1)
(or	(players-building-type-count focus-player castle >= 1)
(or	(players-building-type-count focus-player bombard-tower >= 1)
	(players-building-type-count focus-player watch-tower >= 4)))))
	(building-type-count-total siege-workshop < 1)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
	(strategic-number skirmsarchers >= 16)
(or	(up-compare-goal milunits != no)
(or	(up-compare-goal total-stone-amount < tc-stone)
	(goal dreitc yes)))
	(building-type-count-total siege-workshop < 1)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal dreitc yes)
(or	(population >= up-max-civ)
	(up-compare-goal custom-civ-pop >= 60))
(or	(goal attacking yes)
(or	(and	(strategic-number sn-military-superiority >= 0); 1
		(strategic-number sn-current-age >= imperial))
	(strategic-number sn-military-superiority >= 3))); 2
	(building-type-count-total siege-workshop < 2)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(population >= up-max-civ)
	(up-compare-goal custom-civ-pop >= 90))
(or	(strategic-number sn-current-age >= imperial)
	(cc-players-unit-type-count 0 gold-mine < 6))
	(building-type-count-total siege-workshop < 4)
(or	(building-type-count-total siege-workshop < 3)
(or	(goal attacking yes)
	(strategic-number sn-military-superiority >= 3))); 2
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
	(up-compare-goal excessWood >= 650)
	(up-compare-goal custom-civ-pop >= 60)
	(strategic-number sn-current-age >= imperial)
	(building-type-count-total siege-workshop < 5)
(or	(goal trainram yes)
(or	(goal trainscorpion yes)
(or	(goal trainmangonel yes)
	(goal trainbombard yes))))
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(players-unit-type-count focus-player mangonel-line >= 2)
	(players-unit-type-count focus-player scorpion-line >= 4))
(or	(goal dreitc yes)
	(players-unit-type-count focus-player scorpion-line >= 6))
	(building-type-count-total siege-workshop < 1)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
(or	(players-unit-type-count focus-player scorpion-line >= 12)
	(building-type-count-total siege-workshop < 2))
	(players-unit-type-count focus-player scorpion-line >= 9)
	(building-type-count-total siege-workshop < 3)
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal attacking yes)
	(building-type-count-total siege-workshop < 1)
	(strategic-number sn-military-superiority >= 3)
(or	(up-compare-goal custom-civ-pop >= 40)
	(population >= max-civ-pop))
(or	(not	(building-available town-center))
(or	(building-type-count-total town-center >= 3)
	(stone-amount < tc-stone)))
	(up-compare-goal excessWood >= sw-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7))
(defrule
	(strategic-number sn-current-age >= imperial)
	(building-type-count-total siege-workshop < 2)
	(goal underattack no)
;	(strategic-number sn-military-superiority >= -1); -2
(or	(goal increase-ts barracks)
(or	(goal increase-ts archery-range)
	(goal increase-ts stable)))
(or	(building-type-count-total barracks >= 6);number-barracks)
(or	(building-type-count-total archery-range >= 6);number-archery-ranges)
	(building-type-count-total stable >= 6)));number-stables)0
	(up-compare-goal excessWood >= sw-cost)
=>
	(set-goal increase-ts siege-workshop)
	(enable-timer increase-ts-timer 7)); end jump




(defrule
(or	(up-compare-const dm-game != 1)
	(up-compare-const postimp-start != 1))
=>
	(up-jump-rule 4))
(defrule
	(game-time < 300)
	(building-type-count-total town-center >= 1)
	(building-type-count-total dm-building < 7); 8
(or	(up-compare-goal excessWood >= 2000)
(or	(food-amount >= 2000)
	(gold-amount >= 2000)))
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts 0)
=>
	(set-goal increase-ts dm-building)
	(enable-timer increase-ts-timer 7))
(defrule
	(game-time < 300)
	(building-type-count-total town-center >= 1)
	(building-type-count-total dm-building < 7); 8
(or	(up-compare-goal excessWood >= 2000)
(or	(food-amount >= 2000)
	(gold-amount >= 2000)))
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts archery-range)
	(up-compare-const dm-building != archery-range)
=>
	(set-goal increase-ts dm-building)
	(enable-timer increase-ts-timer 7))
(defrule
	(game-time < 300)
	(building-type-count-total town-center >= 1)
	(building-type-count-total dm-building < 7); 8
(or	(up-compare-goal excessWood >= 2000)
(or	(food-amount >= 2000)
	(gold-amount >= 2000)))
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts stable)
	(up-compare-const dm-building != stable)
=>
	(set-goal increase-ts dm-building)
	(enable-timer increase-ts-timer 7))
(defrule
	(game-time < 300)
	(building-type-count-total town-center >= 1)
	(building-type-count-total dm-building < 7); 8
(or	(up-compare-goal excessWood >= 2000)
(or	(food-amount >= 2000)
	(gold-amount >= 2000)))
	(up-compare-goal excessWood >= mb-cost)
	(goal increase-ts barracks)
	(up-compare-const dm-building != barracks)
=>
	(set-goal increase-ts dm-building)
	(enable-timer increase-ts-timer 7)); end jump




#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(up-research-status c: castle-age >= research-complete); imperial pending
=>
	(up-jump-rule 5))
(defrule
(or	(up-compare-goal enemyState >= fcastlea)
(or	(players-current-age any-enemy >= castle-age)
(or	(up-pending-placement c: watch-tower-building);	(up-pending-objects c: watch-tower >= 1)
(or	(and	(strategic-number sn-dock-placement-mode == -1); test
		(and	(up-compare-goal navycount <= 0); test
			(unit-type-count fishing-ship < 4))); test
(or	(up-compare-goal strategy == stonewall)
	(goal position-goal pocket)))))); test
=>
	(up-jump-rule 4))
(defrule
(or	(up-pending-placement c: watch-tower-building)
(or	(building-type-count-total watch-tower-building >= 2)
(or	(building-type-count-total town-center <= 0)
(or	(building-type-count-total dock <= 0)
(or	(and	(unit-type-count-total fishing-ship <= 0)
		(up-compare-goal navycount <= 0))
	;(and	(players-building-type-count target-player dock <= 0); enemy-boats
		(up-compare-goal biggestenemynavy <= 0)))))););	(players-unit-type-count target-player galley-line >= 1))
=>
	(up-jump-rule 3))
(defrule
	(can-build watch-tower-building)
=>
	(up-full-reset-search)
	(up-find-local c: dock c: 24)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: dock c: 24)
	(up-get-point position-center point-x)
	(up-get-search-state local-total))
(defrule
	(players-building-count target-player >= 1)
	(can-build watch-tower-building)
=>
	(up-get-point position-target point-x))
(defrule
	(up-compare-goal local-total >= 1)
	(can-build watch-tower-building)
=>
	(up-set-target-point point-x)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object object-point-x)
	(up-lerp-tiles object-point-x point-x c: 1)
	(up-copy-point building-point-x object-point-x)
	(up-set-target-point building-point-x)
	(set-strategic-number sn-ignore-tower-elevation 1)
	(set-strategic-number sn-placement-zone-size 2)
	(up-build place-point 0 c: watch-tower-building)
	(disable-self)); end jump

;(defrule; test
;;	(building-type-count-total watch-tower-building <= 0)
;;(or	(goal enemy-boats yes)
;;	(stone-amount >= 200))
;	(can-build watch-tower-building)
;=>
;	(set-strategic-number sn-ignore-tower-elevation 1)
;	(set-strategic-number sn-placement-zone-size 2)
;	(up-set-placement-data my-player-number dock c: 2)
;	(up-build place-control 0 c: watch-tower-building)
;	(disable-self))

#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE
#load-if-defined DEBUG
(defrule
	(game-time >= 4)
=>
	(set-goal temporary-goal7 4385)
	(up-jump-rule 5))
#end-if
;(defrule
;	(up-pending-placement c: watch-tower-building)
;=>
;	(up-jump-rule 5))
(defrule
(or	(goal inseln yes)
(or	(building-type-count-total gate-class >= 2)
	(building-type-count-total stone-wall-line >= 4)))
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100)); test
=>
	(up-jump-rule 16))
(defrule
(or	(building-type-count-total watch-tower-building >= 1)
(or	(building-type-count-total town-center < 1)
(or	(players-current-age any-enemy >= imperial-age)
(or	(and	(players-current-age focus-player >= castle-age);	(players-current-age every-enemy >= castle-age)
		(strategic-number skirmsarchers < 3))
	(building-type-count-total castle >= 1)))))
=>
	(up-jump-rule 15))
(defrule
(or	(strategic-number sn-current-age >= imperial)
(or	(and	(goal position-goal pocket)
		(up-compare-goal strategy != sling))
(or	(or	(unit-type-count-total 213 >= 2);(and	(up-compare-goal gl-threat-time < 10000); 12000
		(unit-type-count-total 225 >= 2));	(up-compare-goal gl-threat-time >= 0))
(or	(building-type-count-total town-center >= 2)
(or	(goal defend yes); test
	(goal underattack yes))))))
=>
	(up-jump-rule 14))
(defrule
(or	(up-projectile-detected projectile-watch-tower >= 20000)
	(strategic-number sn-number-civilian-militia >= 1))
	(up-compare-goal ttower-distance < 32)
	(current-age == feudal-age)
	(players-current-age target-player <= feudal-age)
=>
	(up-assign-builders c: watch-tower-building c: 5)
	(up-jump-rule 1))
(defrule
(or	(up-compare-const watch-tower-building != donjon)
	(and	(goal dreitc no)
		(goal uugoal no)))
(or	(players-military-population target-player <= 1)
	(players-building-count target-player <= 0))
=>
	(up-jump-rule 12)); end jump
(defrule
;(or
	(strategic-number target-military-superiority <= -3); number ; ; ;  ; ; ;  ;  pocket
;	(strategic-number sn-military-superiority <= -1))
	(players-current-age target-player <= feudal-age)
	(strategic-number skirms >= 4)
	(strategic-number archers < 2)
	(players-unit-type-count target-player militiaman-line < 1)
	(players-unit-type-count target-player scout-cavalry <= 1)
	(players-unit-type-count target-player eagle-warrior <= 1)
	(players-building-type-count target-player stable < 1)
	(goal sk-var no)
	(unit-type-count archer-line >= 2)
	(unit-type-count cavalry-class < 2)
	(unit-type-count militiaman-line < 2)
	(unit-type-count scout-cavalry-line < 2)
	(unit-type-count eagle-warrior-line < 2)
	(strategic-number sn-current-age <= feudal)
=>
	(set-goal temporary-goal7 4385)); target-player hmm
(defrule
(or	(and	(players-current-age target-player == feudal-age)
		(or	(and	(strategic-number target-military-superiority <= -4); 5
				(strategic-number sn-military-superiority <= 0))
			(and	(or	(up-projectile-detected projectile-watch-tower >= 20000)
						(strategic-number sn-number-civilian-militia >= 1))
				(up-compare-goal ttower-distance < 32))))
	(and	(strategic-number sn-military-superiority <= -1)
		(players-current-age target-player == feudal-age)))
=>
	(set-goal temporary-goal7 4385))
(defrule
	(strategic-number sn-military-superiority <= 0); 0
	(up-compare-goal strategy-type >= castle-war)
	(players-military-population target-player >= 2)
	(players-current-age target-player == feudal-age)
	(players-unit-type-count target-player scout-cavalry-line < 2); (goal enemy-goal flush)
	(players-unit-type-count target-player militiaman-line < 2)
	(players-unit-type-count target-player eagle-warrior-line < 2)
=>
	(set-goal temporary-goal7 4385))
(defrule
	(goal strategy sling)
	(goal position-goal flank)
	(players-current-age focus-player == feudal-age)
=>
	(set-goal temporary-goal7 4385))
(defrule
(or	(up-compare-goal enemyState <= dfeudal); feudal
	(players-current-age-time target-player < 16))
	(players-current-age focus-player <= feudal-age)
	(players-military-population target-player <= 2);
(or	(players-unit-type-count target-player 124 >= 1)
	(players-unit-type-count target-player 220 >= 1))
	(players-building-type-count target-player market <= 0)
=>
	(set-goal temporary-goal7 4385))
(defrule
	(goal temporary-goal7 4385)
=>
	(up-full-reset-search)
	(set-goal temporary-goal mining-camp)
	(set-goal temporary-goal5 lumber-camp)
	(set-goal temporary-goal6 mill)
	(up-get-fact building-type-count mining-camp temporary-goal2)
	(up-get-fact building-type-count lumber-camp temporary-goal3)
	(up-get-fact building-type-count mill temporary-goal4)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal9 0))
(defrule
	(goal temporary-goal7 4385)
=>
	(up-find-local g: temporary-goal g: temporary-goal2)
	(up-get-search-state local-total))
(defrule
	(goal temporary-goal7 4385)
	(up-compare-goal local-total >= 1)
=>
	(up-get-point position-target point-x)
	(up-set-target-point point-x)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-index >= 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object object-point-x)
	(up-get-point-distance object-point-x point-x temporary-goal8)
	(up-modify-goal temporary-goal9 g:= targetdistance)
	(up-modify-goal temporary-goal9 c:- 1)); 2
(defrule
	(goal temporary-goal7 4385)
(or	(up-compare-goal local-total <= 0)
	(up-compare-goal temporary-goal8 g:> temporary-goal9))
(or	(goal temporary-goal mining-camp)
	(goal temporary-goal lumber-camp))
;(or	(up-compare-goal temporary-goal3 >= 1)
;	(up-compare-goal temporary-goal4 >= 1))
=>
	(up-modify-goal temporary-goal g:= temporary-goal5)
	(up-modify-goal temporary-goal2 g:= temporary-goal3)
	(up-modify-goal temporary-goal5 g:= temporary-goal6)
	(up-modify-goal temporary-goal3 g:= temporary-goal4)
	(up-full-reset-search)
	(up-jump-rule -3))
(defrule
	(goal temporary-goal7 4385)
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal8 g:<= temporary-goal9)
=>
	(up-lerp-tiles object-point-x point-x c: 2)
	(up-copy-point building-point-x object-point-x)
	(up-set-target-point building-point-x)
	(set-goal temporary-goal7 4395))

(defrule
	(up-compare-goal temporary-goal7 == 4385)
;	(up-compare-goal strategy-type != aggressive)
	(can-build watch-tower)
=>
;	(set-strategic-number sn-ignore-tower-elevation 1)
	(set-strategic-number sn-placement-zone-size 2)
	(up-set-placement-data my-player-number -1 c: 15); 14
	(up-build place-control 0 c: watch-tower-building)
	(chat-local-to-self "Bad one.")
	(disable-self))

(defrule
	(goal temporary-goal7 4395)
	(up-point-distance building-point-x position-self-x < 50)
;	(up-compare-goal building-point-x g:< map-size)
;	(up-compare-goal building-point-y g:< map-size)
;	(up-compare-goal building-point-x > 0)
;	(up-compare-goal building-point-y > 0)
	(can-build watch-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(set-strategic-number sn-placement-zone-size 2)
	(up-build place-point 0 c: watch-tower-building)
	(chat-local-to-self "Good one.")
	(set-goal temporary-goal7 4385)); end jump


(defrule
(or	(goal inseln yes)
(or	(building-type-count-total gate-class >= 2)
(or	(building-type-count-total palisade-wall >= 4)
	(building-type-count-total stone-wall-line >= 4))))
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100)); test
=>
	(up-jump-rule 18))
(defrule
(or	(building-type-count-total outpost >= 2)
(or	(building-type-count-total watch-tower-building >= 2)
(or	(building-type-count-total town-center < 1)
(or	(goal defend yes)
(or	(goal underattack yes)
(or	(strategic-number sn-current-age >= imperial)
(or	(players-current-age any-enemy >= imperial-age)
	(building-type-count-total castle >= 1))))))))
=>
	(up-jump-rule 17))
(defrule
(or	(strategic-number sn-current-age <= dark)
(or	(or	(unit-type-count-total 213 >= 2);(and	(up-compare-goal gl-threat-time < 10000); 12000
		(unit-type-count-total 225 >= 2));	(up-compare-goal gl-threat-time >= 0))
(or	(building-type-count-total town-center >= 2)
(or	(players-building-count target-player <= 0)
(or	(goal position-goal pocket)
	(and	(building-type-count-total lumber-camp <= 0)
		(building-type-count-total mining-camp <= 0)))))))
=>
	(up-jump-rule 16))
(defrule
(or	(up-compare-goal targetdistance >= 90)
(or	(and	(up-compare-sn sn-current-age g:>= enemyState)
		(up-compare-goal enemy-goal != trush))
(or	(unit-type-count-total villager < 2)
	(up-compare-goal ttower-distance < 32))))
=>
	(up-jump-rule 15))
(defrule
	(up-research-status c: feudal-age == research-pending)
	(building-type-count town-center >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: town-center c: 40)
	(up-remove-objects search-local object-data-researching != 1))
(defrule
	(up-research-status c: feudal-age == research-pending)
	(building-type-count town-center >= 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-progress-value < 90)
=>
	(up-jump-rule 1))
(defrule
	(true)
=>
	(up-jump-rule 12)); end jump
(defrule
	(true)
=>
	(set-goal temporary-goal 6)
	(up-modify-goal temporary-goal s:+ sn-current-age)
	(up-modify-goal temporary-goal c:+ outpost-bonus)
	(up-modify-goal temporary-goal c:+ 5); 6
	(up-modify-goal temporary-goal c:max 12)
	(up-modify-goal temporary-goal c:min 20)
	(set-goal temporary-goal2 0)
	(set-goal object-point-x -1))
(defrule
(or	(up-research-status c: ri-town-watch >= research-pending)
	(and	(civ-selected byzantine)
		(strategic-number sn-current-age == dfeudal)))
=>
	(up-modify-goal temporary-goal c:+ 4))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal3 g:= temporary-goal)
	(up-modify-goal temporary-goal3 c:* -1)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-filter-distance c: -1 c: 32)
	(up-find-local c: lumber-camp c: 2)
	(up-find-local c: mining-camp c: 2)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: lumber-camp c: 2)
	(up-find-status-local c: mining-camp c: 2)
	(up-get-point position-target target-point-x)
	(up-set-target-point target-point-x)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-index >= 1))
(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object object-point-x)
	(up-lerp-tiles object-point-x target-point-x c: 1)
	(up-lerp-tiles object-point-x position-self-x c: -1)
	(up-copy-point saved-point-x object-point-x)
	(up-copy-point temporary-point-x object-point-x)
	(up-cross-tiles object-point-x position-self-x g: temporary-goal)
	(up-cross-tiles saved-point-x position-self-x g: temporary-goal3)
	(up-bound-precise-point object-point-x 0 c: 8)
	(up-bound-precise-point saved-point-x 0 c: 8))
(defrule; end neg jump
(or	(up-point-explored object-point-x == explored-no)
	(not	(up-can-build-line escrow-state object-point-x c: outpost)))
	(up-point-distance object-point-x temporary-point-x > 8); g:>= temporary-goal
	(up-compare-goal object-point-x >= 0)
=>
	(up-lerp-tiles object-point-x temporary-point-x c: 1)
	(up-jump-rule -1))
(defrule
(or	(up-point-explored object-point-x == explored-active)
	(not	(up-can-build-line escrow-state object-point-x c: outpost)))
	(up-point-distance object-point-x temporary-point-x g:< temporary-goal)
	(up-point-distance object-point-x target-point-x g:> temporary-goal)
	(up-point-distance object-point-x position-self-x < 32)
	(up-compare-goal object-point-x >= 0)
=>
	(up-lerp-tiles object-point-x target-point-x c: 1)
	(up-jump-rule -1))
(defrule
	(up-point-distance object-point-x position-self-x > 16)
(not	(up-can-build-line escrow-state object-point-x c: outpost))
	(up-compare-goal object-point-x >= 0)
=>
	(up-lerp-tiles object-point-x position-self-x c: 1)
	(up-jump-rule -1))
(defrule
(or	(up-point-distance object-point-x position-self-x < 16)
	(not	(up-can-build-line escrow-state object-point-x c: outpost)))
	(up-point-distance object-point-x target-point-x g:> temporary-goal)
	(up-point-distance object-point-x position-self-x < 32)
	(up-compare-goal object-point-x >= 0)
=>
	(up-lerp-tiles object-point-x target-point-x c: 1)
	(up-jump-rule -1))
(defrule
	(up-point-explored object-point-x == explored-yes)
	(up-point-distance object-point-x position-self-x <= 32)
	(up-compare-goal object-point-x >= 0)
	(up-can-build-line escrow-state object-point-x c: outpost)
=>
	(up-full-reset-search)
	(up-set-target-point object-point-x)
	(up-filter-distance c: -1 g: temporary-goal)
	(up-find-local c: outpost c: 1)
	(up-find-local c: watch-tower-building c: 1)
	(up-find-local c: town-center c: 1)
	(up-find-local c: castle c: 1)
	(up-find-local c: bombard-tower c: 1)
	(up-find-local c: krepost c: 1)
	(set-goal temporary-goal10 2023798))
(defrule
	(goal temporary-goal10 2023799)
=>
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: outpost c: 1)
	(up-find-status-local c: watch-tower-building c: 1)
	(up-find-status-local c: town-center c: 1)
	(up-find-status-local c: castle c: 1)
	(up-find-status-local c: bombard-tower c: 1)
	(up-find-status-local c: krepost c: 1)
	(up-get-point-distance target-point-x object-point-x temporary-goal4)
	(up-get-point-distance target-point-x position-self-x temporary-goal5)
	(set-goal temporary-goal10 2023799))
(defrule
	(goal temporary-goal10 2023799)
(not	(up-set-target-object search-local c: 0))
	(up-compare-goal temporary-goal4 g:<= temporary-goal5)
	(up-can-build-line escrow-state object-point-x c: outpost)
=>
	(up-build-line object-point-x object-point-x c: outpost)
	(up-jump-rule 1))
(defrule
	(goal temporary-goal2 0)
=>
	(set-goal temporary-goal2 1)
	(up-copy-point object-point-x saved-point-x)
	(up-jump-rule -8)); end jump
#end-if
#end-if
#end-if
#end-if
#end-if

#end-if
#end-if
#end-if

(defrule
(or	(game-time >= 3000)
(or	(and	(up-compare-goal strategy-type >= imperial-war)
		(and	(building-type-count-total town-center <= 2)
			(and	(up-compare-goal custom-civ-pop < up-max-civ)
				(population < max-civ-pop))))
(not	(can-build mining-camp))))
=>
	(up-jump-rule 7))
(defrule
(or	(up-compare-goal excessWood < camp-cost)
(or	(up-compare-goal increase-ts != 0)
(or	(building-type-count-total mining-camp <= 0)
(or	(building-type-count-total mining-camp >= 2); 3 but 2 for now
(or	(up-pending-objects c: mining-camp >= 1)
(or	(strategic-number sn-gold-gatherer-percentage == 0)
	(unit-type-count villager-gold < 10)))))))
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 32)
	(up-modify-goal temporary-goal3 s:max sn-camp-max-distance)
	(up-modify-goal temporary-goal3 c:min 40)
	(up-set-target-point position-self-x)
	(up-filter-distance c: -1 g: temporary-goal3)
	(up-find-remote c: gold-mine c: 32)
	(up-get-search-state local-total))
(defrule
	(up-set-target-object search-remote g: temporary-goal2)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-get-point position-object building-point-x)
	(up-set-target-point building-point-x)
	(up-filter-distance c: -1 c: 8)
	(up-find-local c: mining-camp c: 1)
	(up-find-local c: town-center c: 1)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total >= 1)
	(up-compare-goal temporary-goal2 < 48)
	(up-compare-goal temporary-goal2 g:< remote-total)
=>
	(up-reset-search 1 1 0 0)
	(up-set-target-point position-self-x)
	(up-filter-distance c: -1 g: temporary-goal3)
	(up-jump-rule -2))
(defrule
(or	(up-compare-goal local-total >= 1)
(or	(up-compare-goal remote-total <= 0)
(or	(up-compare-goal temporary-goal2 g:>= remote-total)
	(up-compare-goal temporary-goal2 >= 48))))
=>
	(up-jump-rule 1))
(defrule
	(can-build mining-camp)
=>
	(chat-to-player my-player-number "Constructing additional goldcamp.")
	(up-set-target-point building-point-x)
	(set-strategic-number sn-allow-adjacent-dropsites 0); 1 - to be safe
	(set-strategic-number sn-placement-zone-size 3); still testing; 4
	(set-strategic-number sn-dropsite-separation-distance 3); necessary?
	(up-build place-point 0 c: mining-camp))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)); end jump

(defrule ; debug rule
(or	(strategic-number sn-focus-player-number >= 9)
(or	(strategic-number sn-focus-player-number <= 0)
	(stance-toward focus-player ally)))
	(strategic-number sn-target-player-number >= 1)
	(strategic-number sn-target-player-number <= 8)
(not	(stance-toward target-player ally))
	(player-in-game target-player)
=>
	(chat-to-player my-player-number "Debugging focus player. 4")
	(up-modify-goal temporary-goal s:= sn-target-player-number); to prevent further bugs
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)); should be an enemy

#end-if; end: no wonder race


#load-if-defined INFINITE-RESOURCES-START
(defrule
	(goal increase-ts 0)
	(building-type-count-total barracks < number-barracks)
	(building-available barracks)
=>
	(set-goal increase-ts barracks)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal increase-ts 0)
	(building-type-count-total archery-range < number-archery-ranges)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range)
	(enable-timer increase-ts-timer 7))
(defrule
	(goal increase-ts 0)
	(building-type-count-total stable < number-stables)
	(building-available stable)
=>
	(set-goal increase-ts stable)
	(enable-timer increase-ts-timer 7))
#end-if


(defrule
(or	(game-time < max-delay)
(or	(up-compare-goal underattack != no)
(or	(up-compare-goal excessWood < mb-cost)
	(up-compare-goal excessWood >= 350))))
=>
	(up-jump-rule 15))
(defrule
	(goal increase-ts stable)
	(goal position-goal flank)
	(strategic-number sn-current-age <= feudal)
	(goal strategy usual)
	(building-type-count-total archery-range >= 1)
	(building-type-count-total archery-range < 2)
	(players-military-population target-player >= 2)
	(goal traincamel no)
	(goal trainknight no)
	(goal trainhussar no)
	(goal trainbattle no)
	(goal trainsteppe no)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range))
(defrule
	(up-compare-const dm-game != 1)
	(goal increase-ts stable)
	(goal position-goal flank)
	(strategic-number sn-current-age <= feudal)
	(goal strategy usual)
	(building-type-count-total archery-range >= 1)
	(building-type-count-total market < 1)
	(goal traincamel no)
	(goal trainknight no)
	(goal trainhussar no)
	(goal trainbattle no)
	(goal trainsteppe no)
	(building-available market)
=>
	(set-goal increase-ts market))
(defrule
	(goal champgoal yes)
	(building-type-count-total barracks < number-barracks)
(or	(goal increase-ts 0)
(or	(goal increase-ts stable)
	(goal increase-ts archery-range)))
(or	(up-research-status c: imperial-age == research-pending)
	(and	(current-age >= imperial-age)
		(current-age-time < 180)))
	(building-available barracks)
=>
	(set-goal increase-ts barracks))
(defrule
	(goal cavagoal yes)
	(building-type-count-total archery-range < number-archery-ranges)
(or	(goal increase-ts 0)
(or	(goal increase-ts barracks)
	(goal increase-ts stable)))
(or	(up-research-status c: imperial-age == research-pending)
	(and	(current-age >= imperial-age)
		(current-age-time < 180)))
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range))
(defrule
	(goal palagoal yes)
	(building-type-count-total stable < number-stables)
(or	(goal increase-ts 0)
(or	(goal increase-ts barracks)
	(goal increase-ts archery-range)))
(or	(up-research-status c: imperial-age == research-pending)
	(and	(current-age >= imperial-age)
		(current-age-time < 180)))
	(building-available stable)
=>
	(set-goal increase-ts stable))
(defrule
(or	(and	(up-compare-goal increase-ts != barracks)
		(and	(up-compare-goal increase-ts != archery-range)
			(up-compare-goal increase-ts != stable)))
	(up-compare-goal strategy != usual))
=>
	(up-jump-rule 9))
(defrule
	(goal trainpike no)
	(goal trainchamp no)
	(goal traineagle no)
	(goal traincondottiero no)
=>
	(up-jump-rule 2))
(defrule
	(goal increase-ts archery-range)
	(building-type-count-total archery-range >= 1)
	(building-type-count-total barracks < number-barracks)
	(goal trainarcher no)
	(goal trainskirm no)
	(goal trainhandcannon no)
	(goal traincavarcher no)
	(goal trainslinger no)
	(goal traingenitour no)
	(building-available barracks)
=>
	(set-goal increase-ts barracks))
(defrule
	(goal increase-ts stable)
	(building-type-count-total stable >= 1)
	(building-type-count-total barracks < number-barracks)
	(goal traincamel no)
	(goal trainknight no)
	(goal trainhussar no)
	(goal trainbattle no)
	(goal trainsteppe no)
	(building-available barracks)
=>
	(set-goal increase-ts barracks))
(defrule
	(goal trainarcher no)
	(goal trainskirm no)
	(goal trainhandcannon no)
	(goal traincavarcher no)
	(goal trainslinger no)
	(goal traingenitour no)
=>
	(up-jump-rule 2))
(defrule
	(goal increase-ts barracks)
	(building-type-count-total barracks >= 1)
	(building-type-count-total archery-range < number-archery-ranges)
	(goal trainpike no)
	(goal trainchamp no)
	(goal traineagle no)
	(goal traincondottiero no)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range))
(defrule
	(goal increase-ts stable)
	(building-type-count-total stable >= 1)
	(building-type-count-total archery-range < number-archery-ranges)
	(goal traincamel no)
	(goal trainknight no)
	(goal trainhussar no)
	(goal trainbattle no)
	(goal trainsteppe no)
	(building-available archery-range)
=>
	(set-goal increase-ts archery-range))
(defrule
	(goal traincamel no)
	(goal trainknight no)
	(goal trainhussar no)
	(goal trainbattle no)
	(goal trainsteppe no)
=>
	(up-jump-rule 2))
(defrule
	(goal increase-ts barracks)
	(building-type-count-total barracks >= 1)
	(building-type-count-total stable < number-stables)
	(goal trainpike no)
	(goal trainchamp no)
	(goal traineagle no)
	(goal traincondottiero no)
	(building-available stable)
=>
	(set-goal increase-ts stable))
(defrule
	(goal increase-ts archery-range)
	(building-type-count-total archery-range >= 1)
	(building-type-count-total stable < number-stables)
	(goal trainarcher no)
	(goal trainskirm no)
	(goal trainhandcannon no)
	(goal traincavarcher no)
	(goal trainslinger no)
	(goal traingenitour no)
	(building-available stable)
=>
	(set-goal increase-ts stable)); end jump



(defrule
	(goal strategy krush)
(or	(goal increase-ts monastery)
	(goal increase-ts market))
	(building-type-count-total stable < 2)
	(up-compare-goal excessWood < 350)
(or	(up-compare-goal excessGold < 175)
	(up-compare-goal excessFood >= k-buffer-f))
	(strategic-number teamsuperiority <= 2)
	(goal underattack no)
	(building-available stable)
=>
	(set-goal increase-ts stable))
(defrule
	(goal strategy fast-imp)
	(up-compare-goal milunits != yes)
	(up-compare-goal excessWood < tc-175-wood)
	(stone-amount >= tc-stone)
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < up-max-civ)
	(building-available town-center)
	(building-type-count-total town-center < 3)
=>
	(set-goal temporary-goal 2183482))
(defrule
	(goal strategy fast-imp)
	(goal temporary-goal 2183482)
(or	(and	(goal increase-ts barracks)
		(or	(building-type-count-total barracks >= 1)
			(building-type-count-total archery-range >= 2)))
	(goal increase-ts stable))
=>
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))



(defrule
(or	(up-compare-const diff-fp != 1)
(or	(up-compare-goal increase-ts != 0)
(or	(up-compare-goal underattack != no)
(or	(unit-type-count 213 >= minNavy)
(or	(unit-type-count 225 >= minNavy)
(or	(goal inseln yes)
(or	(up-pending-placement c: market)
	(strategic-number sn-current-age < imperial))))))))
=>
	(up-jump-rule 16))
(defrule
(not	(hold-koh-ruin))
(or	(up-compare-goal attacking != yes)
(or	(players-building-count target-player <= 0)
	(not	(player-in-game target-player))))
=>
	(up-jump-rule 15))
(defrule
	(true)
=>
	(set-goal temporary-goal8 0)
	(up-get-point position-target point-x)
	(set-goal temporary-goal2 10))
(defrule
;	(up-compare-const koth-game == 1)
	(hold-koh-ruin)
=>
	(up-get-point position-center point-x)
	(set-goal temporary-goal2 1))
(defrule
	(up-compare-goal excessWood >= 400)
(or	(commodity-buying-price wood < 100)
	(cc-players-unit-type-count 0 tree-class > shorefishreq3))
=>
	(set-goal temporary-goal8 1))
(defrule; jic
(or	(up-point-zone point-x g:!= main-zone)
(or	(up-compare-goal point-x <= -1)
(or	(up-compare-goal point-y <= -1)
(or	(up-compare-goal point-x g:> map-size)
	(up-compare-goal point-y g:> map-size)))))
=>
	(up-jump-rule 11))
(defrule
	(true)
=>
	(up-lerp-tiles point-x position-self-x g: temporary-goal2)
	(up-bound-precise-point point-x 0 c: 4)
	(up-set-target-point point-x)
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 48)
	(up-find-local c: barracks c: 240)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:= local-last)
	(up-find-local c: archery-range c: 240)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal3 g:= local-last)
	(up-find-local c: stable c: 240)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal4 g:= local-last)
	(up-find-local c: siege-workshop c: 240))
(defrule
	(true)
=>
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal5 g:= local-last)
	(up-find-local c: castle c: 240)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal6 g:= local-last)
	(up-find-local c: krepost c: 240)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal7 g:= local-last)
	(set-strategic-number sn-placement-zone-size 8); 10
	(set-goal temporary-goal 2077935))
(defrule
	(goal temporary-goal 2077935)
	(goal temporary-goal8 1)
	(up-compare-goal temporary-goal5 < 6)
	(up-pending-objects c: siege-workshop <= 0)
(not	(up-pending-placement c: siege-workshop))
	(up-can-build 0 c: siege-workshop)
=>
	(up-copy-point building-point-x point-x)
	(up-set-target-point building-point-x)
	(up-build place-point 0 c: siege-workshop))
(defrule
	(goal temporary-goal 2077935)
	(building-type-count-total castle >= 2)
	(up-compare-goal temporary-goal6 < 6)
	(up-compare-goal temporary-goal7 < 6)
	(up-pending-objects c: castle <= 0)
(not	(up-pending-placement c: castle))
	(up-can-build 0 c: castle)
=>
	(up-copy-point building-point-x point-x)
	(up-set-target-point building-point-x)
	(up-build place-point 0 c: castle))
(defrule
	(goal temporary-goal 2077935)
	(building-type-count-total castle >= 2)
	(up-compare-goal temporary-goal6 < 6)
	(up-compare-goal temporary-goal7 < 6)
	(up-pending-objects c: krepost <= 0)
(not	(up-pending-placement c: krepost))
	(up-can-build 0 c: krepost)
=>
	(up-copy-point building-point-x point-x)
	(up-set-target-point building-point-x)
	(up-build place-point 0 c: krepost))
(defrule
	(goal trainchamp no)
	(goal trainpike no)
	(goal traineagle no)
	(goal traincondottiero no)
(or	(up-research-status c: ri-anarchy <= research-unavailable)
	(goal trainunique no))
=>
	(up-jump-rule 1))
(defrule
	(goal temporary-goal 2077935)
	(goal temporary-goal8 1)
	(up-compare-goal temporary-goal2 < number-barracks)
	(up-pending-objects c: barracks <= 0)
(not	(up-pending-placement c: barracks))
	(up-can-build 0 c: barracks)
=>
	(up-copy-point building-point-x point-x)
	(up-set-target-point building-point-x)
	(up-build place-point 0 c: barracks))
(defrule
	(goal trainarcher no)
	(goal trainskirm no)
	(goal traincavarcher no)
	(goal trainhandcannon no)
	(goal trainslinger no)
	(goal traingenitour no)
=>
	(up-jump-rule 1))
(defrule
	(goal temporary-goal 2077935)
	(goal temporary-goal8 1)
	(up-compare-goal temporary-goal3 < number-archery-ranges)
	(up-pending-objects c: archery-range <= 0)
(not	(up-pending-placement c: archery-range))
	(up-can-build 0 c: archery-range)
=>
	(up-copy-point building-point-x point-x)
	(up-set-target-point building-point-x)
	(up-build place-point 0 c: archery-range))
(defrule
	(goal trainhussar no)
	(goal trainknight no)
	(goal traincamel no)
	(goal trainbattle no)
(or	(up-research-status c: ri-marauders <= research-unavailable)
	(goal trainunique no))
=>
	(up-jump-rule 1))
(defrule
	(goal temporary-goal 2077935)
	(goal temporary-goal8 1)
	(up-compare-goal temporary-goal4 < number-stables)
	(up-pending-objects c: stable <= 0)
(not	(up-pending-placement c: stable))
	(up-can-build 0 c: stable)
=>
	(up-copy-point building-point-x point-x)
	(up-set-target-point building-point-x)
	(up-build place-point 0 c: stable)); end jumps


(defrule
(or	(taunt-detected any-human-ally 49)
	(taunt-detected any-human-ally 50))
	(goal underattack yes)
=>
	(set-goal forward-point-x -1)
	(set-goal forward-point-y -1)
	(set-goal forward-flag 0)
	;(chat-to-allies text-under-attack-ask-later)
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(chat-to-allies-using-id 22115); "39 Help! The enemy is in my town!"
	(acknowledge-taunt every-ally 49)
	(acknowledge-taunt every-ally 50))
(defrule
(or	(taunt-detected any-human-ally 49)
	(taunt-detected any-human-ally 50))
(or	(up-compare-goal forward-point-x <= -2)
(or	(up-compare-goal forward-point-y <= -2)
(or	(up-compare-goal forward-point-x g:> map-size)
	(up-compare-goal forward-point-y g:> map-size))))
=>
	(set-goal forward-point-x -1)
	(set-goal forward-point-y -1)
	(set-goal forward-flag 0)
	;(chat-to-allies text-under-attack-ask-later)
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 49)
	(acknowledge-taunt every-ally 50))
(defrule
	(taunt-detected any-human-ally 49)
	(up-compare-flag forward-flag == 1)
=>
	(chat-to-allies-using-id 22153); "39 At once, sire!"
	(up-find-player-flare any-human-ally forward-point-x)
	(acknowledge-taunt every-ally 49))
(defrule
	(taunt-detected any-human-ally 49)
	(cc-players-unit-type-count any-human-ally flare >= 1)
	(building-type-count-total town-center >= 1)
	(unit-type-count-total villager >= 1)
=>
	(chat-to-allies-using-id 22153); "39 At once, sire!"
	(up-find-player-flare any-human-ally forward-point-x)
	(up-modify-flag forward-flag c:+ 1)
	(acknowledge-taunt every-ally 49))
(defrule
	(taunt-detected any-human-ally 50)
	(up-compare-flag forward-flag == 2)
=>
	(chat-to-allies-using-id 22153); "39 At once, sire!"
	(up-find-player-flare any-human-ally forward-point-x)
	(acknowledge-taunt every-ally 50))
(defrule
	(taunt-detected any-human-ally 50)
	(cc-players-unit-type-count any-human-ally flare >= 1)
	(building-type-count-total town-center >= 1)
	(unit-type-count-total villager >= 1)
=>
	(chat-to-allies-using-id 22153); "39 At once, sire!"
	(up-find-player-flare any-human-ally forward-point-x)
	(up-modify-flag forward-flag c:+ 2)
	(acknowledge-taunt every-ally 50))
(defrule
	(taunt-detected any-human-ally 53)
	(up-compare-flag forward-flag == 4)
=>
	(chat-to-allies-using-id 22153); "39 At once, sire!"
	(up-find-player-flare any-human-ally forward-point-x)
	(acknowledge-taunt every-ally 53))
(defrule
	(taunt-detected any-human-ally 53)
	(cc-players-unit-type-count any-human-ally flare >= 1)
;	(building-type-count-total town-center < 8)
	(unit-type-count-total villager >= 1)
=>
	(chat-to-allies-using-id 22153); "39 At once, sire!"
	(up-find-player-flare any-human-ally forward-point-x)
	(up-modify-flag forward-flag c:+ 4)
	(acknowledge-taunt every-ally 53))
(defrule
(or	(up-point-explored forward-point-x == explored-no)
	(up-point-zone forward-point-x g:!= main-zone))
=>
	(up-jump-rule 17))
(defrule
(or	(and	(goal underattack yes)
		(up-compare-goal forward-flag != 4))
	(goal forward-flag 0))
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
=>
	(set-goal forward-point-x -1)
	(set-goal forward-point-y -1)
	(set-goal forward-flag 0))
(defrule
	(up-compare-flag forward-flag == 1)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
=>
	(up-full-reset-search)
	(up-set-target-point forward-point-x)
	(up-filter-distance c: -1 c: 24)
	(up-find-local c: barracks c: 16)
	(up-find-local c: archery-range c: 16)
	(up-find-local c: stable c: 16)
	(up-find-local c: siege-workshop c: 16)
	(up-find-local c: castle c: 16)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal c:= minNavy)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal temporary-goal c:min 16))
(defrule
	(up-compare-flag forward-flag == 1)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: dm-building <= 0)
	(building-type-count-total dm-building < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build dm-building)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: dm-building))
(defrule
	(up-compare-flag forward-flag == 1)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: barracks <= 0)
	(building-type-count-total barracks < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build barracks)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: barracks))
(defrule
	(up-compare-flag forward-flag == 1)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: archery-range <= 0)
	(building-type-count-total archery-range < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build archery-range)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: archery-range))
(defrule
	(up-compare-flag forward-flag == 1)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: stable <= 0)
	(building-type-count-total stable < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build stable)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: stable))
(defrule
	(up-compare-flag forward-flag == 1)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: siege-workshop <= 0)
	(building-type-count-total siege-workshop < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build siege-workshop)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: siege-workshop))
(defrule
	(up-compare-flag forward-flag == 1)
	(up-compare-goal local-total g:>= temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
=>
	(up-modify-flag forward-flag c:- 1))
(defrule
	(up-compare-flag forward-flag == 2)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
=>
	(up-full-reset-search)
	(up-set-target-point forward-point-x)
	(up-filter-distance c: -1 c: 24)
	(up-find-local c: watch-tower-building c: 12)
	(up-find-local c: bombard-tower c: 12)
	(up-find-local c: castle c: 12)
	(up-find-local c: krepost c: 12)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal c:= minNavy)
	(up-modify-goal temporary-goal c:min 12))
(defrule
	(up-compare-flag forward-flag == 2)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: castle <= 0)
	(building-type-count-total castle < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build castle)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: castle))
(defrule
	(up-compare-flag forward-flag == 2)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: krepost <= 0)
	(building-type-count-total castle >= 2)
	(building-type-count-total krepost < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build krepost)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: krepost))
(defrule
	(up-compare-flag forward-flag == 2)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: bombard-tower <= 0)
	(building-type-count-total bombard-tower < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build bombard-tower)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: bombard-tower))
(defrule
	(up-compare-flag forward-flag == 2)
	(up-compare-goal local-total g:< temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: watch-tower-building <= 0)
	(building-type-count-total watch-tower-building < 16)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
(or	(up-research-status c: ri-yasama >= research-available)
	(up-research-status c: ri-bombard-tower <= research-unavailable))
	(can-build watch-tower-building)
=>
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-point 0 c: watch-tower-building))
(defrule
	(up-compare-flag forward-flag == 2)
	(up-compare-goal local-total g:>= temporary-goal)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
=>
	(up-modify-flag forward-flag c:- 2))
(defrule
	(up-compare-flag forward-flag == 4)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
=>
	(up-full-reset-search)
	(up-set-target-point forward-point-x)
	(up-filter-distance c: -1 c: 20)
	(up-find-local c: town-center c: 1)
	(up-get-search-state local-total))
(defrule
	(up-compare-flag forward-flag == 4)
	(up-compare-goal local-total < 1)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
	(up-pending-objects c: town-center <= 0)
	(building-type-count-total town-center < 8)
	(unit-type-count-total 213 < minNavy)
	(unit-type-count-total 225 < minNavy)
	(can-build town-center)
=>
	(chat-to-player my-player-number "Constructing forward town-center.")
	(up-set-target-point forward-point-x)
	(set-strategic-number sn-placement-zone-size 4)
	(up-build place-point 0 c: town-center))
(defrule
	(up-compare-flag forward-flag == 4)
	(up-compare-goal local-total >= 1)
(or	(up-compare-goal forward-point-x != -1)
	(up-compare-goal forward-point-y != -1))
=>
	(up-modify-flag forward-flag c:- 4)); end jump

(defrule
(or	(taunt-detected any-ally 49)
(or	(taunt-detected any-ally 50)
(or	(taunt-detected any-ally 53)
	(taunt-detected any-ally 54))))
	(up-timer-status market-flare-timer == timer-triggered)
=>
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time." ; TODO couldn't detect flare string
	(disable-timer market-flare-timer)
	(acknowledge-taunt every-ally 49)
	(acknowledge-taunt every-ally 50)
	(acknowledge-taunt every-ally 53)
	(acknowledge-taunt every-ally 54))
(defrule
	(taunt-detected any-ally 54)
	(unit-type-count villager <= 0)
=>
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 54))
(defrule
(or	(taunt-detected any-ally 49)
(or	(taunt-detected any-ally 50)
(or	(taunt-detected any-ally 53)
	(taunt-detected any-ally 54))))
	(up-timer-status market-flare-timer == timer-disabled)
=>
	(enable-timer market-flare-timer 12))
(defrule
(not	(taunt-detected any-human-ally 54))
	(up-compare-goal gl-game-time g:>= last-flare-time)
(or	(up-compare-goal blcoord-point-x != -1)
(or	(up-compare-goal blcoord-point-y != -1)
(or	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1))))
=>
	(set-goal blcoord-point-x -1)
	(set-goal blcoord-point-y -1)
	(set-goal blcoord-point2-x -1)
	(set-goal blcoord-point2-y -1))
(defrule
(or	(taunt-detected any-human-ally 54)
	(up-compare-goal gl-game-time g:< last-flare-time))
	(cc-players-unit-type-count any-human-ally flare >= 1)
=>
	(up-find-player-flare any-human-ally temporary-point-x))
(defrule
(or	(taunt-detected any-human-ally 54)
	(up-compare-goal gl-game-time g:< last-flare-time))
	(cc-players-unit-type-count any-human-ally flare >= 1)
	(goal blcoord-point-x -1)
	(goal blcoord-point-y -1)
	(up-compare-goal temporary-point-x g:<= map-size)
	(up-compare-goal temporary-point-y g:<= map-size)
	(up-compare-goal temporary-point-x >= 0)
	(up-compare-goal temporary-point-y >= 0)
=>
	(up-find-player-flare any-human-ally blcoord-point-x))
(defrule
(or	(taunt-detected any-human-ally 54)
	(up-compare-goal gl-game-time g:< last-flare-time))
	(cc-players-unit-type-count any-human-ally flare >= 1)
(nor	(goal blcoord-point-x -1)
	(goal blcoord-point-y -1))
(or	(up-compare-goal temporary-point-x g:!= blcoord-point-x)
	(up-compare-goal temporary-point-y g:!= blcoord-point-y))
	(up-compare-goal temporary-point-x g:<= map-size)
	(up-compare-goal temporary-point-y g:<= map-size)
	(up-compare-goal temporary-point-x >= 0)
	(up-compare-goal temporary-point-y >= 0)
=>
	(up-find-player-flare any-human-ally blcoord-point2-x))
(defrule
	(true)
=>
	(set-goal temporary-goal palisade-gate-foundation1)
	(set-goal temporary-goal2 palisade-gate-foundation2)
	(set-goal temporary-goal3 palisade-gate-foundation3)
	(set-goal temporary-goal4 palisade-gate-foundation4)
	(set-goal temporary-goal5 palisade-wall)
	(set-goal temporary-goal6 -1))
(defrule
	(building-available stone-wall)
	(building-available gate)
=>
	(set-goal temporary-goal stone-gate1)
	(set-goal temporary-goal2 stone-gate2)
	(set-goal temporary-goal3 stone-gate3)
	(set-goal temporary-goal4 stone-gate4)
	(set-goal temporary-goal5 stone-wall))
(defrule
	(taunt-detected any-human-ally 54)
	(up-compare-goal blcoord-point-x g:> blcoord-point2-x)
	(up-compare-goal blcoord-point-x != -1)
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
=>
	(up-copy-point temporary-point-x blcoord-point-x)
	(up-modify-goal blcoord-point-x g:= blcoord-point2-x)
	(up-modify-goal blcoord-point-y g:= blcoord-point2-y)
	(up-modify-goal blcoord-point2-x g:= temporary-point-x)
	(up-modify-goal blcoord-point2-y g:= temporary-point-y))
(defrule
	(taunt-detected any-human-ally 54)
	(up-compare-goal blcoord-point-x != -1)
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
=>
	(up-copy-point temporary-point-x blcoord-point-x)
	(up-copy-point saved-point-x blcoord-point2-x)
	(up-modify-goal temporary-point-y c:* 100)
	(up-modify-goal saved-point-y c:* 100)
	(up-modify-goal temporary-point-y g:- saved-point-y)
	(up-modify-goal temporary-point-x g:- saved-point-x)
	(up-modify-goal temporary-point-y g:/ temporary-point-x))
(defrule; end neg jump
	(taunt-detected any-human-ally 54)
	(up-compare-goal temporary-goal6 >= 0)
	(up-compare-goal temporary-point-y <= -50)
	(up-compare-goal temporary-point-y >= -199)
	(up-compare-goal blcoord-point-x != -1)
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
	(up-point-distance blcoord-point-x blcoord-point2-x >= 2)
	(up-can-build-line 0 blcoord-point-x g: temporary-goal4)
=>
	(up-modify-goal temporary-goal6 c:- 20)
	(up-copy-point saved-point-x blcoord-point-x)
	(up-modify-goal saved-point-x c:+ 1)
	(up-build-line saved-point-x saved-point-x g: temporary-goal4))
(defrule
	(taunt-detected any-human-ally 54)
	(up-compare-goal temporary-goal6 >= 0)
;	(up-compare-goal blcoord-point-y g:<= blcoord-point2-y)
	(up-compare-goal temporary-point-y >= 50)
	(up-compare-goal temporary-point-y <= 199)
	(up-compare-goal blcoord-point-x != -1)	
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
	(up-point-distance blcoord-point-x blcoord-point2-x >= 2)
	(up-can-build-line 0 blcoord-point-x g: temporary-goal3)
=>
	(up-modify-goal temporary-goal6 c:- 20)
	(up-build-line blcoord-point-x blcoord-point-x g: temporary-goal3))
(defrule
	(taunt-detected any-human-ally 54)
	(up-compare-goal temporary-goal6 >= 0)
;	(up-compare-goal blcoord-point-y g:== blcoord-point2-y)
	(up-compare-goal temporary-point-y <= 49)
	(up-compare-goal temporary-point-y >= -49)
	(up-compare-goal blcoord-point-x != -1)
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
	(up-point-distance blcoord-point-x blcoord-point2-x >= 2)
	(up-can-build-line 0 blcoord-point-x g: temporary-goal2)
=>
	(up-modify-goal temporary-goal6 c:- 20)
	(up-build-line blcoord-point-x blcoord-point-x g: temporary-goal2))
(defrule
	(taunt-detected any-human-ally 54)
	(up-compare-goal temporary-goal6 >= 0)
;	(up-compare-goal blcoord-point-x g:== blcoord-point2-x)
(or	(up-compare-goal temporary-point-y >= 200)
	(up-compare-goal temporary-point-y <= -200))
	(up-compare-goal blcoord-point-x != -1)
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
	(up-point-distance blcoord-point-x blcoord-point2-x >= 2)
	(up-can-build-line 0 blcoord-point-x g: temporary-goal)
=>
	(up-modify-goal temporary-goal6 c:- 20)
	(up-build-line blcoord-point-x blcoord-point-x g: temporary-goal))
(defrule
	(taunt-detected any-human-ally 54)
	(up-compare-goal blcoord-point-x != -1)
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
	(up-can-build-line 0 blcoord-point-x g: temporary-goal5)
=>
	(up-modify-goal temporary-goal6 c:+ 1)
	(up-build-line blcoord-point-x blcoord-point-x g: temporary-goal5))
(defrule
	(taunt-detected any-human-ally 54)
	(up-compare-goal blcoord-point-x != -1)
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
	(up-point-distance blcoord-point-x blcoord-point2-x >= 1)
=>
	(up-lerp-tiles blcoord-point-x blcoord-point2-x c: 1)
	(up-jump-rule -6))
(defrule
	(taunt-detected any-human-ally 54)
	(up-compare-goal blcoord-point-x != -1)
	(up-compare-goal blcoord-point-y != -1)
	(up-compare-goal blcoord-point2-x != -1)
	(up-compare-goal blcoord-point2-y != -1)
(or	(up-point-explored blcoord-point-x != explored-no)
	(up-point-explored blcoord-point2-x != explored-no))
=>
	(chat-to-allies-using-id 22153); "39 At once, sire!"
	(acknowledge-taunt every-ally 54)
	(set-goal blcoord-point-x -1)
	(set-goal blcoord-point-y -1)
	(set-goal blcoord-point2-x -1)
	(set-goal blcoord-point2-y -1))
(defrule
	(taunt-detected any-ally 55)
(not	(can-build-wall 2 stone-wall-line))
(or	(current-age <= dark-age)
(or	(civ-selected cumans)
	(civ-selected gothic)))
=>
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 55))
(defrule
	(taunt-detected any-human-ally 55)
=>
	(chat-to-allies-using-id 22153); "39 At once, sire!"
	(disable-self))
(defrule
	(taunt-detected any-human-ally 55)
=>
	(set-goal temporary-goal5 599389))
(defrule
	(taunt-detected any-human-ally 55)
	(goal nomaden no)
	(goal landnomad no)
	(building-type-count-total gate < 5)
	(can-build-gate 2)
=>
	(build-gate 2))
(defrule
	(taunt-detected any-human-ally 55)
	(goal nomaden no)
	(goal landnomad no)
	(can-build-wall 2 stone-wall-line)
=>
	(build-wall 2 stone-wall-line))

#load-if-defined VICTORY-STANDARD
(defrule
	(goal nomaden no)
	(goal landnomad no)
(or	(building-type-count-total wonder >= 1)
	(and	(hold-relics)
		(up-compare-goal relic-count >= 3))); 5
(not	(player-in-game any-ally))
	(building-type-count-total gate < 5)
	(can-build-gate 2)
=>
	(build-gate 2))
(defrule
	(goal nomaden no)
	(goal landnomad no)
(or	(building-type-count-total wonder >= 1)
	(and	(hold-relics)
		(up-compare-goal relic-count >= 3))); 5
(not	(player-in-game any-ally))
	(can-build-wall 2 stone-wall-line)
=>
	(build-wall 2 stone-wall-line))
#end-if

#load-if-defined BALTIC-MAP ; test
(defrule
	(goal position-goal flank)
	(wall-completed-percentage 2 >= 42)
	(strategic-number sn-current-age < imperial)
	(current-age < castle-age)
	(population < up-max-civ)
	(military-population < 20)
=>
	(set-goal temporary-goal5 599389))
(defrule
	(goal position-goal flank)
	(wall-completed-percentage 2 >= 42)
	(strategic-number sn-current-age < imperial)
	(current-age < castle-age)
	(population < up-max-civ)
	(military-population < 20)
	(building-type-count-total gate < 2)
	(can-build-gate 2)
=>
	(build-gate 2))
(defrule
	(goal position-goal flank)
	(wall-completed-percentage 2 >= 42)
	(strategic-number sn-current-age < imperial)
	(current-age < castle-age)
	(population < up-max-civ)
	(military-population < 20)
	(can-build-wall 2 stone-wall-line)
=>
	(build-wall 2 stone-wall-line))
#end-if


(defrule
(or	(difficulty == easiest)
(or	(difficulty == easy)
	(difficulty == moderate)))
	(building-type-count-total castle >= castle-diff)
=>
	(up-jump-rule 7))
(defrule
(or	(up-compare-const wr-game == 1)
(or	(up-pending-objects c: castle >= 4)
(or	(up-pending-placement c: castle)
	(and	(unit-type-count villager < 9)
		(and	(unit-type-count villager < up-max-civ)
			(and	(up-compare-goal custom-civ-pop < up-max-civ)
				(population < max-civ-pop)))))))
=>
	(up-jump-rule 6))
(defrule
	(up-compare-const koth-game == 1)
;	(goal underattack no)
;	(unit-type-count-total 213 <= 3)
;	(unit-type-count-total 225 <= 3)
	(can-build castle)
=>
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: castle)
	(up-jump-rule 5))
(defrule
	(up-pending-objects c: castle <= 0)
	(unit-type-count trade-cart >= 12)
	(building-type-count-total castle >= 2); 3
	(building-type-count-total castle < 12); 8
	(goal underattack no)
	(unit-type-count-total 213 <= 2)
	(unit-type-count-total 225 <= 2)
(or	(goal uugoal no)
	(building-type-count-total castle >= 8)); 6
	(up-compare-const koth-game != 1)
	(can-build castle)
=>
	(up-set-placement-data my-player-number trade-cart c: 2)
	(set-strategic-number sn-placement-zone-size 4)
	(up-build place-control 0 c: castle)
	(up-jump-rule 4))
(defrule
	(up-pending-objects c: castle <= 0)
	(building-type-count-total castle >= 3)
	(building-type-count-total castle < 12)
	(players-building-count target-player >= 1)
	(population >= max-civ-pop)
	(strategic-number sn-military-superiority >= 3)
	(goal defend no)
	(strategic-number teamsuperiority >= 1)
	(goal attacking yes)
	(goal underattack no)
	(goal wwonder no)
	(up-compare-const koth-game != 1)
	(can-build castle)
=>
	(set-strategic-number sn-placement-zone-size 12); 10
	(up-build place-forward 0 c: castle)
	(up-jump-rule 3))
(defrule
	(building-type-count-total castle < 12)
	(goal underattack no)
	(unit-type-count-total 213 <= 2)
	(unit-type-count-total 225 <= 2)
	(up-compare-const koth-game != 1)
	(can-build castle)
=>
	(up-set-placement-data my-player-number -1 c: 10); 10
	(set-strategic-number sn-placement-zone-size 12); 10
	(up-build place-control 0 c: castle)
	(up-jump-rule 2))
(defrule
(or	(goal underattack yes)
(or	(unit-type-count-total 213 >= 3)
	(unit-type-count-total 225 >= 3)))
	(can-build castle)
=>
;	(set-strategic-number sn-placement-to-center 1);test
	(up-set-placement-data my-player-number -1 c: -8); -6
	(set-strategic-number sn-placement-zone-size 12); 10
	(up-build place-control 0 c: castle)
	(up-jump-rule 1))
(defrule
	(up-pending-objects c: castle <= 3); 1
	(building-type-count-total castle < 14)
	(goal wwonder no)
(or	(building-type-count-total wonder <= 0)
	(and	(player-in-game any-ally)
		(players-building-type-count any-ally wonder <= 0)))
	(building-available castle)
	(stone-amount >= castle-stone)
	(goal increase-ts 0)
=>
	(set-goal increase-ts castle)
	(enable-timer increase-ts-timer 7)); end jump
(defrule
	(goal increase-ts castle)
	(up-pending-placement c: castle)
=>
	(chat-local-to-self "Already placing castle.")
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
(or	(and	(up-compare-const dm-game == 1)
		(and	(up-compare-const diff-id >= 1)
			(and	(players-building-type-count every-enemy bombard-tower <= 0)
				(players-building-type-count every-ally bombard-tower <= 0))))
(or	(building-type-count-total castle < 3)
(or	(up-compare-goal increase-ts != 0)
(or	(goal underattack yes)
	(goal wwonder yes)))))
=>
	(up-jump-rule 4))
(defrule
(or	(up-pending-placement c: bombard-tower)
(or	(unit-type-count-total 213 >= minNavy)
	(unit-type-count-total 225 >= minNavy)))
=>
	(up-jump-rule 3))
(defrule
	(unit-type-count trade-cart >= 12)
	(building-type-count-total bombard-tower < 8)
(or	(building-type-count-total bombard-tower < 4)
(or	(goal uugoal no)
	(building-type-count-total castle >= 6))); 4
(or	(building-type-count-total bombard-tower < 2)
	(strategic-number sn-preferred-trade-distance > 60))
	(can-build bombard-tower)
=>
	(set-strategic-number sn-placement-zone-size 3)
	(up-set-placement-data my-player-number trade-cart c: 1)
	(up-build place-control 0 c: bombard-tower)
	(up-jump-rule 2))
(defrule
	(population >= max-civ-pop)
	(strategic-number sn-military-superiority >= 2)
	(strategic-number teamsuperiority >= -2)
	(goal attacking yes)
	(building-type-count-total bombard-tower < 12)
(or	(building-type-count-total bombard-tower < 6)
(or	(goal uugoal no)
	(building-type-count-total castle >= 4)))
	(can-build bombard-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-assign-builders c: bombard-tower c: 2)
	(up-build place-forward 0 c: bombard-tower)
	(up-jump-rule 1))
(defrule
	(population >= max-civ-pop)
	(up-compare-const koth-game == 1)
;	(goal underattack no)
;	(unit-type-count-total 213 <= 3)
;	(unit-type-count-total 225 <= 3)
	(can-build bombard-tower)
=>
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: bombard-tower)); end jumps

(defrule
(or	(up-pending-placement c: watch-tower-building)
(or	(building-type-count-total castle < 2)
(or	(up-compare-goal increase-ts != 0)
(or	(goal underattack yes)
(or	(unit-type-count-total 213 >= minNavy)
(or	(unit-type-count-total 225 >= minNavy)
	(goal wwonder yes)))))))
=>
	(up-jump-rule 3))
(defrule
	(up-compare-const watch-tower-building != donjon)
(or	(and	(goal uugoal yes)
		(building-type-count-total castle < 5))
(or	(up-research-status c: ri-bombard-tower >= research-available)
(or	(building-available bombard-tower)
(or	(up-research-status c: ri-bracer <= research-unavailable)
	(and	(up-research-status c: ri-yeomen <= research-available)
		(up-research-status c: ri-yasama <= research-available))))))
=>
	(up-jump-rule 2))
(defrule
	(unit-type-count trade-cart >= 12)
	(building-type-count-total watch-tower-building < 8)
(or	(commodity-buying-price stone < 100)
(or	(building-type-count-total watch-tower-building < 6)
	(building-type-count-total castle >= 4)))
(or	(building-type-count-total watch-tower-building < 2)
	(strategic-number sn-preferred-trade-distance > 60))
	(can-build watch-tower-building)
=>
	(set-strategic-number sn-placement-zone-size 3)
	(up-set-placement-data my-player-number trade-cart c: 1)
	(up-build place-control 0 c: watch-tower-building)
	(up-jump-rule 1))
(defrule
	(population >= max-civ-pop)
	(strategic-number sn-military-superiority >= 2)
	(strategic-number teamsuperiority >= -2);
	(goal attacking yes)
	(building-type-count-total watch-tower-building < 12)
(or	(commodity-buying-price stone < 100)
(or	(building-type-count-total watch-tower-building < 6)
	(building-type-count-total castle >= 4)))
	(can-build watch-tower-building)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-assign-builders c: watch-tower-building c: 2)
	(up-build place-forward 0 c: watch-tower-building)); end jumps

(defrule
(or	(up-pending-placement c: krepost)
(or	(building-type-count-total castle < 2)
(or	(up-compare-goal increase-ts != 0)
(or	(goal underattack yes)
(or	(unit-type-count-total 213 >= minNavy)
(or	(unit-type-count-total 225 >= minNavy)
	(goal wwonder yes)))))))
=>
	(up-jump-rule 2))
(defrule
	(unit-type-count trade-cart >= 12)
	(building-type-count-total krepost < 6)
(or	(commodity-buying-price stone < 100)
(or	(building-type-count-total krepost < 4)
	(building-type-count-total castle >= 4)))
(or	(building-type-count-total krepost < 2)
	(strategic-number sn-preferred-trade-distance > 60))
	(can-build krepost)
=>
	(set-strategic-number sn-placement-zone-size 3)
	(up-set-placement-data my-player-number trade-cart c: 1)
	(up-build place-control 0 c: krepost)
	(up-jump-rule 1))
(defrule
	(population >= max-civ-pop)
	(strategic-number sn-military-superiority >= 2)
	(strategic-number teamsuperiority >= -2);
	(goal attacking yes)
	(building-type-count-total krepost < 8)
(or	(commodity-buying-price stone < 100)
(or	(building-type-count-total krepost < 4)
	(building-type-count-total castle >= 4)))
	(can-build krepost)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-assign-builders c: krepost c: 2)
	(up-build place-forward 0 c: krepost)); end jumps

#load-if-not-defined UP-MULTIPLE-ENEMIES
(defrule
(or	(up-compare-goal attacking != yes)
(or	(up-compare-goal maa-var != yes)
(or	(up-compare-goal underattack != no)
(or	(up-compare-goal wwonder != no)
(or	(building-available castle)
(or	(building-type-count-total watch-tower-building >= 3)
(or	(strategic-number sn-military-superiority < 1)
	(up-compare-goal enemyState >= fcastlea))))))))
=>
	(up-jump-rule 1))
(defrule
;	(military-population >= 7); 5
	(players-military-population target-player >= 5); 2
	(players-unit-type-count target-player militiaman-line <= 0)
	(strategic-number eagles <= 1)
	(strategic-number sn-military-superiority < 3); 4
	(up-research-status c: castle-age <= research-available); hmmmm
;(or
	(stone-amount >= tc-tower-stone)
;	(building-type-count-total watch-tower-building < 1))
	(can-build watch-tower-building)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-assign-builders c: watch-tower-building c: 3)
	(up-build place-forward 0 c: watch-tower-building))
#end-if

(defrule
	(goal strategy trush)
(or	(stone-amount >= tc-tower-stone)
	(up-research-status c: castle-age <= research-available))
	(can-build watch-tower-building)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-assign-builders c: watch-tower-building c: 3)
	(up-build place-forward 0 c: watch-tower-building))

#load-if-defined INFINITE-RESOURCES-START
#load-if-not-defined BATTLE-ROYALE
(defrule
	(up-pending-objects c: watch-tower-building <= 3)
(not	(building-available castle))
	(building-type-count-total watch-tower-building < preftradedist)
(or	(building-type-count-total stable >= 1)
(or	(building-type-count-total archery-range >= 1)
	(building-type-count-total market >= 1)))
(or	(up-research-status c: castle-age >= research-available)
	(building-type-count-total blacksmith >= 1))
	(can-build watch-tower-building)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-build place-normal 0 c: watch-tower-building))
#else
(defrule
	(up-pending-objects c: watch-tower-building <= 3)
(not	(building-available castle))
	(building-type-count-total watch-tower-building < preftradedist)
(or	(building-type-count-total stable >= 1)
(or	(building-type-count-total archery-range >= 1)
	(building-type-count-total market >= 1)))
	(can-build watch-tower-building)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 10)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: watch-tower-building))
#end-if
#end-if
#end-if
#end-if
#end-if

(defrule
(or	(up-compare-goal increase-ts != 0)
(or	(stone-amount < 175)
	(up-compare-goal dreitc != yes)))
=>
	(up-jump-rule 3))
(defrule
	(building-type-count-total castle >= 1)
(or	(building-type-count-total donjon < 4)
	(building-type-count-total castle >= 2))
	(building-type-count-total donjon < 8)
(or	(goal wwonder no)
	(up-compare-goal excessStone >= 1175))
	(goal underattack no)
;	(goal attacking no)
(or	(goal uugoal yes)
	(goal trainunique yes))
	(building-available donjon)
	(up-compare-goal excessWood >= 75)
=>
	(set-goal increase-ts donjon)
	(enable-timer increase-ts-timer 7))
(defrule
	(current-age <= castle-age)
(or	(goal position-goal pocket)
	(up-research-status c: imperial-age <= research-available))
	(building-type-count-total donjon < 1)
(or	(goal wwonder no)
	(up-compare-goal excessStone >= 1175))
	(goal underattack no)
;	(goal attacking no)
(or	(goal uugoal yes)
	(goal trainunique yes))
	(building-available donjon)
	(up-compare-goal excessWood >= 75)
=>
	(set-goal increase-ts donjon)
	(enable-timer increase-ts-timer 7))
(defrule
	(building-type-count-total castle >= 1)
	(building-type-count-total krepost < 2)
(or	(goal wwonder no)
	(up-compare-goal excessStone >= 1350))
	(goal underattack no)
;	(goal attacking no)
(or	(goal uugoal yes)
	(goal trainunique yes))
	(building-available krepost)
	(stone-amount >= 350)
=>
	(set-goal increase-ts krepost)
	(enable-timer increase-ts-timer 7)); end jump
(defrule
(or	(goal increase-ts donjon)
	(goal increase-ts krepost))
(or	(up-pending-placement c: donjon)
	(up-pending-placement c: krepost))
=>
	(chat-local-to-self "Already placing unique fortification.")
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))

#load-if-defined INFINITE-RESOURCES-START
(defrule
(or	(up-compare-goal increase-ts != 0)
(or	(game-time < 10)
(or	(building-type-count-total town-center <= 0)
(or	(not	(building-available house))
(or	(unit-type-count villager <= 0)
	(population-headroom <= 0))))))
=>
	(up-jump-rule 1))
(defrule
	(up-pending-objects c: house < 5)
	(up-idle-unit-count idle-type-villager >= 1)
	(housing-headroom < 100)
(or	(building-type-count-total barracks >= 1)
(or	(building-type-count-total archery-range >= 1)
(or	(building-type-count-total stable >= 1)
(or	(building-type-count-total siege-workshop >= 1)
(or	(building-type-count-total castle >= 1)
	(building-type-count-total krepost >= 1))))))
=>
	(set-goal increase-ts house)
	(enable-timer increase-ts-timer 7)); end jump
#end-if




#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END
#load-if-not-defined UP-SCENARIO-GAME
#load-if-defined VICTORY-STANDARD
(defrule
(or	(building-type-count-total wonder >= 1)
	(and	(hold-relics)
		(up-compare-goal relic-count >= 1))); 5
=>
	(up-jump-rule 3))
#end-if
(defrule
(or	(up-timer-status twentysec == timer-running)
(or	(population < up-max-civ)
(or	(goal temporary-goal5 599389)
(or	(and	(population < max-pop)
		(game-time < 300))
	(and	(building-type-count wall-class <= 0)
		(building-type-count gate-class <= 0))))))
=>
	(up-jump-rule 2))
(defrule
(or	(population >= siege-pop)
(or	(and	(up-compare-goal tradeunits >= 12)
		(or	(up-compare-goal tradeunits >= 18)
			(strategic-number sn-military-superiority >= 1))); 0
	(and	(civilian-population >= up-max-civ)
		(population >= max-civ-pop))))
=>
	(set-goal temporary-goal5 599390))
(defrule
	(goal temporary-goal5 599390)
=>
	(up-set-target-point position-self-x)
	(up-modify-goal temporary-goal s:= sn-maximum-town-size)
	(up-modify-goal temporary-goal s:max sn-safe-town-size)
	(up-modify-goal temporary-goal c:max 40)
	(up-modify-goal temporary-goal c:min 50)
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal)
;	(up-chat-data-to-all "temporary-goal: %d" g: temporary-goal)
	(up-find-local c: wall-class c: 120)
	(up-find-local c: gate-class c: 12)
;	(chat-local-to-self "Deleting walls.")
	(up-target-point 0 action-delete -1 -1)); end jump

(defrule
(or	(and	(building-type-count stone-wall-line <= 0)
		(and	(building-type-count palisade-wall <= 0)
			(building-type-count gate <= 0)))
(or	(game-time <= 6)
(or	(game-time >= 12)
	(building-type-count town-center <= 0))))
=>
	(up-jump-rule 13))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-filter-distance c: -1 c: 12)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-id temporary-goal2)
	(up-get-search-state local-total)
;	(up-set-target-point position-self-x)
	(up-get-point position-center point-x))
(defrule
	(up-compare-goal local-total >= 1)
(or	(or	(up-compare-goal point-x g:>= map-size)
		(up-compare-goal point-y g:>= map-size))
	(or	(up-compare-goal point-x < 0)
		(up-compare-goal point-y < 0)))
	(up-point-distance position-self-x point-x >= 12)
=>
	(up-lerp-tiles point-x position-self-x c: 1)
	(up-jump-rule -1))
(defrule
	(up-compare-goal local-total >= 1)
	(up-point-explored point-x == explored-no)
	(up-point-distance position-self-x point-x >= 12)
=>
	(up-lerp-tiles point-x position-self-x c: 1)
	(up-jump-rule -1))
(defrule
	(up-compare-goal local-total >= 1)
(or	(up-point-contains point-x c: tree-class)
(or	(up-point-contains point-x c: gold-mine-class)
(or	(up-point-contains point-x c: stone-mine-class)
(or	(up-point-contains point-x c: forage-bush-class)
(or	(up-point-terrain point-x == terrain-water)
	(up-point-terrain point-x == terrain-water-deep))))))
	(up-point-distance position-self-x point-x >= 12)
=>
	(up-lerp-tiles point-x position-self-x c: 1)
	(up-jump-rule -1))
(defrule
	(up-compare-goal local-total >= 1)
(or	(up-point-terrain point-x == terrain-water-medium)
	(up-point-terrain point-x == terrain-water-old))
	(up-point-distance position-self-x point-x >= 12)
=>
	(up-lerp-tiles point-x position-self-x c: 1)
	(up-jump-rule -1))
(defrule
	(up-compare-goal local-total >= 1)
(not	(up-point-contains point-x c: stone-wall-line))
	(up-path-distance point-x 0 == 65535)
=>
	(chat-local-to-self "I'm stuck, deleting walls.")
;	(up-full-reset-search)
;	(up-add-object-by-id search-local g: scouting-unit)
;	(up-set-target-point point-x)
;	(up-target-point 0 action-move -1 -1)
;	(up-send-flare point-x)
	(up-delete-objects c: wall-class c: 32767)
	(up-delete-objects c: gate-class c: 32767))

(defrule
	(true)
=>
	(up-full-reset-search)
	(set-goal temporary-goal 0)
	(up-filter-distance c: -1 c: 16))
(defrule
	(true)
=>
	(up-copy-point saved-point-x position-self-x)
	(up-get-point position-center temporary-point-x)
	(up-lerp-tiles saved-point-x temporary-point-x c: -16)
	(up-set-target-point saved-point-x)
	(up-find-local c: wall-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object saved-point-x)
;	(up-get-point-distance saved-point-x temporary-point-x temporary-goal)
;	(up-modify-goal temporary-goal c:+ 1)
	(up-lerp-tiles saved-point-x position-self-x c: -1))
(defrule
	(up-set-target-object search-local c: 0)
;(or	(up-point-distance saved-point-x temporary-point-x g:>= temporary-goal)
(or	(up-point-explored saved-point-x == explored-no)
(or	(or	(up-compare-goal saved-point-x g:>= map-size)
		(up-compare-goal saved-point-y g:>= map-size))
	(or	(up-compare-goal saved-point-x < 0)
		(up-compare-goal saved-point-y < 0))));)
=>
;	(up-send-flare saved-point-x)
	(up-reset-search 0 1 0 0)
	(up-lerp-tiles saved-point-x position-self-x c: 1)
	(up-jump-rule -2))
(defrule
	(up-set-target-object search-local c: 0)
(or	(up-point-contains saved-point-x c: 934)
(or	(up-point-contains saved-point-x c: tree-class)
(or	(up-point-contains saved-point-x c: gold-mine-class)
(or	(up-point-contains saved-point-x c: stone-mine-class)
(or	(up-point-contains saved-point-x c: forage-bush-class)
	(up-point-terrain saved-point-x == terrain-water))))))
=>
;	(up-send-flare saved-point-x)
	(up-reset-search 0 1 0 0)
	(up-lerp-tiles saved-point-x position-self-x c: 1)
	(up-jump-rule -3))
(defrule
	(up-set-target-object search-local c: 0)
(or	(up-point-terrain saved-point-x == terrain-water-medium)
(or	(up-point-terrain saved-point-x == terrain-water-deep)
	(up-point-terrain saved-point-x == terrain-water-old)))
=>
;	(up-send-flare saved-point-x)
	(up-reset-search 0 1 0 0)
	(up-lerp-tiles saved-point-x position-self-x c: 1)
	(up-jump-rule -4))
(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-by-id g: temporary-goal2)
	(up-path-distance saved-point-x 0 != 65535)
=>
;	(up-send-flare saved-point-x)
	(up-reset-search 0 1 0 0)
	(up-lerp-tiles saved-point-x position-self-x c: 1)
	(up-jump-rule -5))
(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-by-id g: temporary-goal2)
	(up-path-distance saved-point-x 0 == 65535)
=>
;	(chat-local-to-self "Deleting back walls.")
	(up-lerp-tiles saved-point-x position-self-x c: 1)
	(up-set-target-point saved-point-x)
	(up-filter-distance c: -1 c: 1)
	(up-find-local c: wall-class c: 9)
;	(up-find-local c: gate-class c: 8)
;	(up-send-flare saved-point-x)
	(up-target-point 0 action-delete -1 -1)); end jump
#end-if
#end-if
#end-if

(defrule
	(game-time > 300)
	(goal relocating yes)
	(building-type-count town-center <= 0)
	(building-type-count mill >= 1)
	(building-type-count farm >= 1)
=>
	(chat-local-to-self "Deleting old mills.1")
	(up-delete-objects c: mill c: 32767))
(defrule
	(false) ; disabled for now
	(game-time > 300)
	(up-compare-goal relocating >= yes)
	(building-type-count town-center >= 1)
	(building-type-count mill >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: mill c: 32)
	(up-get-point-zone position-self-x temporary-goal)
	(up-remove-objects search-local object-data-map-zone-id g:== temporary-goal)
	(up-remove-objects search-local object-data-map-zone-id g:== migration-zone)
	(up-get-search-state local-total))
(defrule
	(false) ; disabled for now
	(up-compare-goal local-total >= 1)
	(game-time > 300)
	(up-compare-goal relocating >= yes)
	(building-type-count town-center >= 1)
	(building-type-count mill >= 1)
=>
	(chat-local-to-self "Deleting old mills.2")
	(up-target-point 0 action-delete -1 -1))
;(defrule
;	(game-time > 300)
;	(goal relocating yes)
;	(building-type-count town-center <= 0)
;	(building-type-count-total town-center >= 1)
;	(building-type-count mining-camp >= 1)
;=>
;	(chat-local-to-self "Deleting old mining-camps.1"); need to
;	(up-delete-objects c: mining-camp c: 32767)
;	(disable-self))
;(defrule
;	(game-time > 300)
;	(goal relocating yes)
;	(building-type-count town-center <= 0)
;	(building-type-count-total town-center >= 1)
;	(building-type-count lumber-camp >= 1)
;=>
;	(chat-local-to-self "Deleting old lumber-camps.2"); rework
;	(up-delete-objects c: lumber-camp c: 32767)
;	(disable-self))
(defrule
(or	(game-time <= 30)
	(and	(unit-type-count-total trade-cart <= 0)
		(goal increase-ts 0)))
=>
	(up-jump-rule 2))
(defrule
	(cc-players-unit-type-count 0 gold-mine <= 0)
	(cc-players-unit-type-count 0 stone-mine <= 0)
	(building-type-count mining-camp >= 1)
	(up-pending-objects c: mining-camp <= 0)
(or	(dropsite-min-distance gold <= -1)
	(dropsite-min-distance gold g:>= map-size)); 256
(or	(dropsite-min-distance stone <= -1)
	(dropsite-min-distance stone g:>= map-size)); 256
=>
	(chat-local-to-self "Deleting all mining-camps.")
	(up-delete-objects c: mining-camp c: 32767)
	(disable-self))
(defrule
	(cc-players-unit-type-count 0 tree-class <= 0)
	(building-type-count lumber-camp >= 1)
	(up-pending-objects c: lumber-camp <= 0)
(or	(dropsite-min-distance wood <= -1)
	(dropsite-min-distance wood g:>= map-size)); 256
=>
	(chat-local-to-self "Deleting all lumber-camps.")
	(up-delete-objects c: lumber-camp c: 32767)
	(disable-self)); end jump

(defrule
(or	(up-timer-status one-min != timer-triggered)
(or	(building-type-count mining-camp <= 4); 5
	(and	(dropsite-min-distance gold >= 13)
		(dropsite-min-distance stone >= 13))))
;!	(dropsite-min-distance gold >= 0)
;!	(dropsite-min-distance stone >= 0)
=>
	(up-jump-rule 2))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: mining-camp c: 5)
	(up-remove-objects search-local object-data-researching == 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object temporary-point-x)
	(up-set-target-point temporary-point-x)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-filter-distance c: -1 c: 13); 8
	(up-find-remote c: gold-mine c: 1)
	(up-find-remote c: stone-mine c: 1)
	(up-find-resource c: gold c: 1)
	(up-find-resource c: stone c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal remote-total <= 0)
	(up-set-target-object search-local c: 0)
=>
	(chat-local-to-self "Deleting an old mining-camp.")
;	;(chat-to-player every-ally "Deleting an old mining-camp.")
;	(up-send-flare temporary-point-x)
	(up-remove-objects search-local object-data-index >= 1)
	(up-target-point 0 action-delete -1 -1)); end jump
(defrule
(or	(up-timer-status one-min != timer-triggered)
(or	(building-type-count lumber-camp <= 7); 8
	(dropsite-min-distance wood >= 13)))
;!	(dropsite-min-distance wood >= 0)
=>
	(up-jump-rule 2))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: lumber-camp c: 8)
	(up-remove-objects search-local object-data-researching == 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object temporary-point-x)
	(up-set-target-point temporary-point-x)
	(up-filter-distance c: -1 c: 13)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: wood c: 1)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: wood c: 1)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal remote-total <= 0)
	(up-set-target-object search-local c: 0)
=>
	(chat-local-to-self "Deleting an old lumber-camp.")
;	;(chat-to-player every-ally "Deleting an old lumber-camp.")
;	(up-send-flare temporary-point-x)
	(up-remove-objects search-local object-data-index >= 1)
	(up-target-point 0 action-delete -1 -1)); end jump
(defrule
	(timer-triggered MSuperiority)
	(building-type-count town-center >= 1)
	(building-type-count mill >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: mill c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object temporary-point-x)
	(up-set-target-point temporary-point-x)
	(up-filter-distance c: -1 c: 48); 45
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-find-remote c: town-center c: 1)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: town-center-foundation c: 1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-get-search-state local-total))
(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal remote-total <= 0)
	(timer-triggered MSuperiority)
	(building-type-count town-center >= 1)
	(building-type-count mill >= 1)
=>
	(chat-local-to-self "Deleting old mills.3")
	(up-remove-objects search-local object-data-researching == 1)
	(up-remove-objects search-local object-data-index >= 1)
	(up-target-point 0 action-delete -1 -1))
(defrule
	(goal relocating yes);	(timer-triggered MSuperiority)
	(game-time > 600)
	(building-type-count town-center >= 1)
; tl(or	(building-type-count lumber-camp >= 1)
; tl	(building-type-count mining-camp >= 1))
=>
	(chat-local-to-self "Deleting old camps.")
	(up-full-reset-search)
	(up-set-target-point position-self-x)
;	(up-send-flare position-self-x)
	(up-modify-goal temporary-goal s:= sn-maximum-town-size)
	(up-modify-goal temporary-goal s:max sn-camp-max-distance)
	(up-modify-goal temporary-goal c:max 70)
	(up-modify-goal temporary-goal c:+ 10); 8
	(up-filter-distance g: temporary-goal c: -1)
	(up-find-local c: lumber-camp c: 32)
	(up-find-local c: mining-camp c: 32)
	(up-remove-objects search-local object-data-researching == 1)
	(up-target-point 0 action-delete -1 -1))


;(defrule
;	(timer-triggered embassy)
;	(idle-farm-count >= 1)
;(or	(up-pending-objects c: farm <= 0)
;(or	(and	(building-type-count farm >= 1)
;		(unit-type-count villager-farmer <= 0))
;(or	(town-under-attack)
;(or	(goal defend yes)
;(or	(building-type-count town-center == 0)
;	(unit-type-count-total villager < 3))))))
;=>
;	(up-modify-goal temporary-goal s:= sn-maximum-food-drop-distance)
;	(up-modify-goal temporary-goal c:max 20)
;	(up-modify-goal temporary-goal c:min 60); <= 127!
;	(up-delete-distant-farms g: temporary-goal))
(defrule
	(idle-farm-count >= 1)
(or	(timer-triggered embassy)
	(goal relocating yes)); only true for one pass
	(strategic-number sn-maximum-food-drop-distance <= 127); !
=>
	(up-modify-goal temporary-goal s:= sn-maximum-food-drop-distance)
	(up-modify-goal temporary-goal c:max 25)
	(up-modify-goal temporary-goal c:min 50); <= 127!
	(up-delete-distant-farms g: temporary-goal))

(defrule
(taunt-detected my-player-number 199)
(up-compare-goal increase-ts != 0)
=>
(up-chat-data-to-player my-player-number "Building queue: %d." g: increase-ts)
(acknowledge-taunt my-player-number 199))
(defrule
(taunt-detected any-ally 198)
(up-compare-goal increase-ts != 0)
=>
(up-chat-data-to-player every-ally "Building queue: %d." g: increase-ts)
(acknowledge-taunt every-ally 198))
(defrule
(or	(and	(unit-type-count villager-builder g:>= villagercount)
		(up-compare-const inf-game != 1))
	(unit-type-count villager <= 0))
	(up-compare-goal increase-ts != 0)
	(up-compare-goal increase-ts != 2)
=>
;	(up-chat-data-to-self "Not enough builders: %d" g: increase-ts)
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule
(taunt-detected my-player-number 201)
=>
(up-chat-data-to-player my-player-number "current-boar: %d." g: current-boar)
(acknowledge-taunt my-player-number 201))


(defrule
	(up-pending-placement c: town-center)
;	(wood-amount >= 335); test
	(timer-triggered one-min); MSuperiority
	(game-time >= 600)
=>
	(set-strategic-number sn-town-center-placement 0)
	(chat-local-to-self "Resetting tc-placement.")
	(up-reset-placement c: town-center))
(defrule
(or	(building-type-count-total town-center >= 5); 4
;(or	(building-type-count town-center <= 0)
	(not	(building-available town-center)));)
=>
	(up-jump-rule 5))
(defrule
	(up-compare-goal custom-civ-pop < up-max-civ)
	(population < max-civ-pop)
(or	(up-pending-placement c: town-center); test
(or	;(and
	(goal increase-ts town-center)
;		(can-afford-building town-center))
	(and	(up-compare-flag escrow-flag2 == 524288)
		(or	(can-build-with-escrow town-center)
			(can-afford-building town-center)))))
=>
;	(chat-local-to-self "Preparing to place TC."); for now
	(set-strategic-number sn-town-center-placement 0)
	(set-goal temporary-goal10 586642))
(defrule
	(goal temporary-goal10 586642)
=>
;	(up-modify-sn sn-maximum-town-size s:= sn-safe-town-size)
	(up-modify-sn sn-camp-max-distance s:= sn-safe-town-size)
;	(up-modify-sn sn-camp-max-distance c:+ 2)
	(up-modify-sn sn-camp-max-distance c:max 20); 18
	(set-goal temporary-goal 30)
	(up-modify-goal temporary-goal s:+ sn-current-age)
	(up-modify-goal temporary-goal2 g:= gl-game-time)
	(up-modify-goal temporary-goal2 c:/ 60)
	(up-modify-goal temporary-goal2 c:min 40)
	(up-modify-goal temporary-goal g:max temporary-goal2)
	(up-modify-sn sn-camp-max-distance g:min temporary-goal)); 40
(defrule
(or	(resource-found wood)
	(dropsite-min-distance wood s:<= sn-camp-max-distance))
=>
	(set-strategic-number sn-town-center-placement lumber-camp)); mining-camp
(defrule
	(building-type-count-total town-center >= 2)
	(building-type-count-total town-center <= 3)
(or	(resource-found gold)
	(resource-found stone))
(or	(dropsite-min-distance gold s:<= sn-camp-max-distance)
	(dropsite-min-distance stone s:<= sn-camp-max-distance))
=>
	(set-strategic-number sn-town-center-placement mining-camp))
(defrule
	(building-type-count-total town-center <= 0)
	(up-compare-goal migration-state != 1)
	(game-time < 600)
(or	(resource-found food)
	(dropsite-min-distance food s:<= sn-mill-max-distance))
=>
	(set-strategic-number sn-town-center-placement mill)); lumber-camp; end jump



(defrule
	(goal increase-ts town-center)
	(goal underattack yes)
	(population < sixty-pop)
	(up-compare-goal custom-civ-pop < thirty-pop)
	(goal defend yes)
;	(up-compare-flag escrow-flag2 != 524288); town-center
	(can-build town-center)
=>
	(up-set-placement-data my-player-number -1 c: -12)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: town-center)
	(set-goal increase-ts 2)
	(up-jump-rule 1))
(defrule
	(goal increase-ts town-center)
;	(up-compare-flag escrow-flag2 != 524288); town-center
	(can-build town-center)
=>
	(set-strategic-number sn-dropsite-separation-distance 2); 3
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build town-center)
	(set-goal increase-ts 2)); end jump



(defrule
	(goal increase-ts house)
;	(up-pending-objects c: house < 5)
;(or	(up-pending-objects c: house == 0)
;(or	(and	(strategic-number sn-current-age >= dfeudal)
;		(up-pending-objects c: house < 3)) ; real up-pending is in the building rules
;		(strategic-number sn-current-age >= fcastlea)))
	(can-build house)
=>
	(build house)
	(set-goal increase-ts 2))

(defrule
	(goal increase-ts castle)
	(can-build castle)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(build castle)
	(set-goal increase-ts 2));	(set-goal increase-ts 0)
(defrule
	(goal increase-ts donjon)
	(building-type-count mill >= 1)
	(can-build donjon)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(up-set-placement-data my-player-number mill c: 1)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-control 0 c: donjon)
	(disable-self)
	(up-jump-rule 2))
(defrule
	(goal increase-ts donjon)
	(building-type-count farm >= 1)
	(unit-type-count villager-farmer >= 1)
	(can-build donjon)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(up-set-placement-data my-player-number farm c: 1)
	(set-strategic-number sn-placement-zone-size 8)
	(up-build place-control 0 c: donjon)
	(up-jump-rule 1))
(defrule
	(goal increase-ts donjon)
	(can-build donjon)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(build donjon)
	(set-goal increase-ts 2));	(set-goal increase-ts 0); end jump
(defrule
	(goal increase-ts krepost)
	(can-build krepost)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(build krepost)
	(set-goal increase-ts 2));	(set-goal increase-ts 0)


(defrule
	(goal increase-ts market)
	(up-pending-objects c: market == 0)
	(building-type-count lumber-camp >= 1)
	(strategic-number sn-current-age <= feudal)
	(goal defend no)
	(goal underattack no)
	(up-compare-goal migration-state <= 0)
	(building-type-count-total market <= 0)
	(can-build market)
=>
;	(chat-local-to-self "Attempting to place market.")
	(set-strategic-number sn-placement-zone-size 7); 8
	(up-set-placement-data my-player-number lumber-camp c: 2)
	(up-build place-control 0 c: market)
	(set-goal increase-ts 2);	(set-goal increase-ts 0)
	(up-jump-rule 1)); end jump
(defrule
(nand	(goal increase-ts market)
	(or	(player-in-game any-ally)
		(players-building-type-count any-ally market >= 1)))
=>
	(up-jump-rule 1))
(defrule
;	(up-timer-status MSuperiority == timer-running)
;	(building-type-count-total market <= 0)
	(can-build market)
=>
;	(chat-local-to-self "Attempting to place market.")
	(set-strategic-number sn-placement-to-center 1)
	(set-goal temporary-goal 8); 6
	(up-modify-goal temporary-goal s:+ sn-current-age)
	(up-modify-goal temporary-goal c:max 8); 6
	(up-modify-goal temporary-goal c:min 14); 12
	(up-modify-goal temporary-goal c:* -1)
	(up-set-placement-data my-player-number -1 g: temporary-goal); -9
	(set-strategic-number sn-placement-zone-size 12); 10
	(up-build place-control 0 c: market)
	(set-goal increase-ts 2);	(set-goal increase-ts 0)
	(up-jump-rule 1)); end jump
(defrule
	(goal increase-ts market)
;	(building-type-count-total market <= 0)
	(can-build market)
=>
	(build market)
	(set-goal increase-ts 2)); end jump

(defrule
	(goal increase-ts blacksmith)
	(up-pending-objects c: blacksmith == 0)
	(building-type-count lumber-camp >= 1)
	(strategic-number sn-current-age <= castlea)
	(goal defend no)
	(goal underattack no)
	(up-compare-goal migration-state <= 0)
	(building-type-count-total blacksmith <= 0)
	(can-build blacksmith)
=>
;	(chat-local-to-self "Attempting to place blacksmith.")
	(set-strategic-number sn-placement-zone-size 7); 8
	(up-set-placement-data my-player-number lumber-camp c: 2)
	(up-build place-control 0 c: blacksmith)
	(set-goal increase-ts 2);	(set-goal increase-ts 0)
	(up-jump-rule 1))
(defrule
	(goal increase-ts blacksmith)
;	(up-pending-objects c: blacksmith == 0)
	(can-build blacksmith)
=>
	(build blacksmith)
	(set-goal increase-ts 2)); end jump

(defrule
	(goal increase-ts monastery)
	(can-build monastery)
=>
;	(chat-local-to-self "Attempting to place monastery.")
	(set-strategic-number sn-placement-zone-size 12); 10
	(up-set-placement-data my-player-number -1 c: -6); -8
	(up-build place-control 0 c: monastery)
	(set-goal increase-ts 2);	(set-goal increase-ts 0)
	(up-jump-rule 1))
(defrule
	(goal increase-ts monastery)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-ts 2)); end jump

(defrule
	(goal increase-ts barracks)
	(goal strategy drush)
	(goal defend no)
	(goal underattack no)
	(building-type-count-total barracks <= 0)
	(can-build barracks)
=>
;	(chat-local-to-self "Attempting to place barracks.")
	(set-strategic-number sn-placement-zone-size 7); 6
	(up-set-placement-data my-player-number -1 c: 6); 7
	(up-build place-control 0 c: barracks)
	(set-goal increase-ts 2);	(set-goal increase-ts 0)
	(up-jump-rule 1))
(defrule
	(goal increase-ts barracks)
	(can-build barracks)
=>
	(build barracks)
	(set-goal increase-ts 2)); end jump

(defrule
	(goal increase-ts archery-range)
	(can-build archery-range)
=>
	(build archery-range)
	(set-goal increase-ts 2)); end jump

(defrule
	(goal increase-ts stable)
	(building-type-count mining-camp >= 1)
	(strategic-number sn-current-age <= feudal)
	(up-research-status c: castle-age <= research-unavailable)
	(gold-amount >= castle-gold)
	(building-type-count-total stable <= 0)
	(goal defend no)
	(goal underattack no)
	(up-compare-goal migration-state <= 0)
	(can-build stable)
=>
;	(chat-local-to-self "Attempting to place stable.")
	(set-strategic-number sn-placement-zone-size 7); 8
	(up-set-placement-data my-player-number mining-camp c: 2)
	(up-build place-control 0 c: stable)
	(set-goal increase-ts 2);	(set-goal increase-ts 0)
	(up-jump-rule 1))
(defrule
	(goal increase-ts stable)
	(can-build stable)
=>
	(build stable)
	(set-goal increase-ts 2)); end jump

(defrule
	(goal increase-ts university)
	(can-build university)
=>
	(build university)
	(set-goal increase-ts 2)); end jump

(defrule
	(goal increase-ts siege-workshop)
	(building-type-count-total siege-workshop <= 0)
	(goal defend no)
	(goal underattack no)
	(can-build siege-workshop)
=>
;	(chat-local-to-self "Attempting to place siege-workshop.")
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: siege-workshop)
	(set-goal increase-ts 2)
	(up-jump-rule 1))
(defrule
	(goal increase-ts siege-workshop)
	(can-build siege-workshop)
=>
	(build siege-workshop)
	(set-goal increase-ts 2)); end jump

(defrule
	(goal increase-ts feitoria)
	(can-build feitoria)
=>
;	(chat-local-to-self "Attempting to place feitoria.")
	(set-strategic-number sn-placement-zone-size 14); 12
	(up-set-placement-data my-player-number -1 c: -8); -6
	(up-build place-control 0 c: feitoria)
	(set-goal increase-ts 2);	(set-goal increase-ts 0)
	(up-jump-rule 1))
(defrule
	(goal increase-ts feitoria)
	(can-build feitoria)
=>
	(build feitoria)
	(set-goal increase-ts 2)); end jump

#load-if-defined ALPINE-LAKES-MAP
#load-if-defined COMMENT-OUT ;A bit buggy for a release version
(defrule
	(true)
=>
	(chat-local-to-self "Debug: Alpine Lakes Map")
	(disable-self)

)

#load-if-not-defined INFINITE-RESOURCES-START
#load-if-not-defined DEATH-MATCH
;Safety feature - assign safe position to temporary-goal-x
(defrule
(game-time > 1500)
=>
(up-jump-rule 8)
)

(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill < 2)
	(building-type-count-total barracks > 0) ;get 2nd mill after barracks so as to not interfere with existing build orders
	(can-build mill)
=>
	(up-copy-point temporary-point-x position-self-x)
)
(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill < 2)
	(building-type-count-total barracks > 0) ;get 2nd mill after barracks so as to not interfere with existing build orders
	(can-build mill)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point position-self-x) 
	(up-filter-distance c: 4 c: 15)
;	(up-find-remote c: deep-fish-salmon c: 1)
;	(up-find-remote c: deep-fish-snapper c: 1)
	(up-filter-status c: status-gather c: list-active);are deep fish active? seems like it according to reference.html
	(up-find-resource c: deep-fish-salmon c: 1)
	(up-find-resource c: deep-fish-snapper c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object temporary-point-x) ;get the point of a deep fish, iterate mill placement towards tc
)

(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill < 2)
	(building-type-count-total barracks > 0) ;get 2nd mill after barracks so as to not interfere with existing build orders
	(can-build mill)
	=>
	(chat-local-to-self "Debug: 2nd mill search active")
	(up-send-flare temporary-point-x)
)
;First check that 2nd mill is actually necessary
(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill < 2)
	(building-type-count-total barracks > 0) 
	(can-build mill)
=>
	(up-find-local c: mill c: 1)
	(up-set-target-object search-local c: 0)	
	(up-get-point position-object point2-x);hope this is temporary goal, investigate later
	(up-get-point-distance temporary-point-x point2-x temporary-goal2) ; this saves the distance between 1st mill and deep fish
)


(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill < 2)
	(building-type-count-total barracks > 0) 
	(up-compare-goal temporary-goal2 > 4) ;check if 2nd mill actually needed
	(can-build mill)
=>
	(set-goal temporary-goal3 6)
)

;Backwards jump here
(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill < 2)
	(building-type-count-total barracks > 0) 
	(up-compare-goal temporary-goal2 > 4)
	(can-build mill)
	(up-can-build-line 0 temporary-point-x c: mill)
=>
	(up-build-line temporary-point-x temporary-point-x c: mill)
	(chat-local-to-self "Debug: Successful mill placement?")
	(up-jump-rule 2)
)

(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill < 2)
	(building-type-count-total barracks > 0) 
	(up-compare-goal temporary-goal2 > 4)
	(up-compare-goal temporary-goal3 > 0)
	(can-build mill)
=>
	(up-lerp-tiles temporary-point-x position-self-x c: 1)
	(up-modify-goal temporary-goal3 c: -1)
	(up-jump-rule -2)
)



;Forwards jump here


(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total town-center > 0)
	(building-type-count-total mill < 2)
	(building-type-count-total barracks > 0) 
	(up-compare-goal temporary-goal2 > 4)
	(can-build mill)
=>
	(build mill)
	(chat-local-to-self "Debug: Mill placement probably failed")
)
;End forwards jump (8)
#end-if
#end-if
#end-if
#end-if

#load-if-defined VICTORY-STANDARD
#load-if-not-defined DEFEND-WONDER
(defrule
(nor	(taunt-detected any-ally 37)
(or	(goal wwonder yes)
	(goal underattack yes)))
	(hold-relics)
=>
	(up-jump-rule 2))
(defrule
	(up-compare-goal wwonder != yes)
;	(game-time >= 4800)
	(building-available wonder)
	(strategic-number sn-military-superiority >= 1)
(nand	(strategic-number sn-military-superiority >= 3)
	(strategic-number teamsuperiority >= 3)); for now
	(population >= max-civ-pop)
	(up-compare-goal excessWood >= 1600)
	(up-compare-goal excessGold >= 1600)
;	(stone-amount < 1000)
	(goal defend no)
	(goal underattack no)
	(building-type-count-total castle >= 3)
	(building-type-count-total wonder <= 0)
	(players-building-type-count every-ally wonder <= 0)
=>
	(set-goal wwonder yes))
(defrule
	(goal wwonder yes)
(or	(population >= max-civ-pop)
(or	(population >= eighty-pop)
	(up-compare-goal custom-civ-pop >= up-max-civ)))
	(building-type-count-total wonder <= 0)
	(players-building-type-count every-ally wonder <= 0)
	(can-build wonder)
=>
	(chat-local-to-self "Attempting to place wonder.")
	(set-strategic-number sn-placement-zone-size 10)
	(up-set-placement-data my-player-number -1 c: -6)
	(up-build place-control 0 c: wonder)
	(acknowledge-taunt every-ally 37)); end jump
(defrule
	(goal wwonder yes)
(not	(taunt-detected any-ally 37))
(or	(up-compare-goal excessWood < 800)
(or	(up-compare-goal excessGold < 800)
(or	(strategic-number sn-military-superiority <= -1)
(or	(population < max-civ-pop)
	(building-type-count-total castle <= 0)))))
=>
	(set-goal wwonder no)
	(acknowledge-taunt every-ally 37))
(defrule
	(goal wwonder yes)
;(or	(stone-amount >= 1650)
(or	(building-type-count-total town-center <= 0)
(or	(building-type-count-total wonder >= 1)
	(players-building-type-count any-ally wonder >= 1)));)
=>;
	(set-goal wwonder no)
	(acknowledge-taunt every-ally 37))
#end-if
#end-if

(defrule
	(up-pending-placement c: farm); test
	(timer-triggered twentysec)
	(goal increase-ts 0)
;	(game-time >= 10)
	(building-type-count-total farm g:< maxfarms)
	(up-compare-goal gl-threat-time >= 20000)
	(strategic-number sn-maximum-town-size < 30); 28
=>
	(chat-local-to-self "Increasing town-size for farm.")
	(up-chat-data-to-player my-player-number text-max-town-size s: sn-maximum-town-size)
	(up-modify-sn sn-maximum-town-size c:+ 1))

(defrule
	(up-compare-goal excessWood < mb-cost)
(or	(goal increase-ts barracks)
(or	(goal increase-ts archery-range)
(or	(goal increase-ts stable)
	(goal increase-ts monastery))))
=>
	(up-chat-data-to-self text-no-resources-construction g: increase-ts)
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule
(or	(and	(up-compare-goal excessWood < sw-cost)
		(or	(goal increase-ts university)
			(goal increase-ts siege-workshop)))
(or	(and	(up-compare-goal excessWood < dock-cost)
		(goal increase-ts dock))
	(and	(up-compare-goal excessWood < smith-cost)
		(goal increase-ts blacksmith))))
=>
	(up-chat-data-to-self text-no-resources-construction g: increase-ts)
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule
	(goal increase-ts town-center)
(or	(up-compare-goal excessWood < tc-wood); 275
(or	(and	(current-age < castle-age)
		(and	(up-compare-goal excessWood < 275)
			(civ-selected briton)))
	(stone-amount < tc-stone)))
=>
	(up-chat-data-to-self text-no-resources-construction g: increase-ts)
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule
(or	(and	(goal increase-ts house)
		(up-compare-goal excessWood < house-cost))
(or	(and	(goal increase-ts krepost)
		(stone-amount < 350))
	(and	(goal increase-ts castle)
		(stone-amount < castle-stone))))
=>
	(up-chat-data-to-self text-no-resources-construction g: increase-ts)
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule
	(and	(goal increase-ts donjon)
		(and	(up-compare-goal excessWood < 75)
			(stone-amount < 175)))
=>
	(up-chat-data-to-self text-no-resources-construction g: increase-ts)
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule
	(goal increase-ts feitoria)
(or	(and	(housing-headroom < 1); 20
		(population-headroom < 1)); 20
(or	(building-type-count-total feitoria g:>= feitoria-cap)
(or	(not	(building-available feitoria))
(or	(stone-amount < 250)
	(gold-amount < 250)))))
=>
	(up-chat-data-to-self text-no-resources-construction g: increase-ts)
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule
	(building-type-count-total feitoria g:> feitoria-cap)
	(up-timer-status embassy != timer-running)
	(up-compare-goal custom-civ-pop > up-max-civ)
	(population > max-civ-pop)
	(housing-headroom <= minNavy)
	(population-headroom <= 0)
=>
	(up-chat-data-to-player my-player-number "Deleting Feitoria: %d." g: feitoria-cap)
	(delete-building feitoria))

(defrule
	(goal increase-ts 0)
	(up-timer-status increase-ts-timer != timer-disabled)
=>
;	(chat-local-to-self "Disable increase-ts-timer.")
	(disable-timer increase-ts-timer))

(defrule
(or	(game-time < 10)
	(unit-type-count villager <= 0))
=>
	(set-goal increase-ts 0);
	(up-jump-rule 3))
(defrule
(or	(and	(unit-type-count villager-builder g:>= villagercount); test
		(up-compare-const inf-game != 1))
(or	(and	(up-compare-const dm-game == 1)
		(game-time < 45))
(or	(building-type-count-total town-center < 1)
	(and	(unit-type-count-total villager < 7)
		(building-type-count town-center <= 0)))))
=>
	(set-goal increase-ts 0);
	(up-jump-rule 2))
(defrule
(or	(up-compare-goal increase-ts == 2); reverted
(or	(up-compare-goal increase-ts == 0)
(or	(strategic-number sn-maximum-town-size >= 72); 66
(or	(and	(strategic-number sn-current-age < cimperial)
		(strategic-number sn-maximum-town-size >= 48)); 44
	(and	(goal inseln no)
		(strategic-number sn-maximum-town-size >= 56)))))); 50
=>
	(set-goal increase-ts 0);
	(up-jump-rule 1))
(defrule
	(timer-triggered increase-ts-timer)
(or	(and	(military-population <= 1)
		(and	(population-headroom > 0)
			(housing-headroom <= 0))); ! ; <
	(or	(strategic-number sn-maximum-town-size < 36); 32
		(nor	(enemy-buildings-in-town)
			(goal underattack yes))))
;(or
;	(strategic-number sn-maximum-town-size < 48)
;	(goal inseln yes))
;	(strategic-number sn-maximum-town-size < 60)
=>
	(up-chat-data-to-player my-player-number text-max-town-size s: sn-maximum-town-size)
	(enable-timer increase-ts-timer 7)
	(set-goal increase-ts 0)
	(up-modify-sn sn-maximum-town-size c:+ 1)); end jump

(defrule
;(or	(goal increase-ts house)
	(goal increase-ts 2)
;)
=>
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))

(defrule
	(timer-triggered one-min); MSuperiority
	(up-compare-goal excessWood >= house-cost)
	(up-pending-objects c: house <= 0)
	(housing-headroom <= 0)
	(population-headroom > 0)
	(up-compare-goal increase-ts != 0)
=>
	(chat-to-player my-player-number "Clear building queue: House.")
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule ; not sure anymore
	(timer-triggered one-min); MSuperiority
	(up-compare-goal excessWood >= 400)
(or	(up-compare-goal excessWood >= 1000)
	(strategic-number sn-current-age >= imperial))
	(goal underattack no)
;tl	(unit-type-count villager >= 25)
(or	(building-type-count-total barracks < number-barracks)
(or	(building-type-count-total archery-range < number-archery-ranges)
	(building-type-count-total stable < number-stables)))
	(up-compare-goal increase-ts != 0)
=>
	(up-chat-data-to-player my-player-number "Clear building queue: %d." g: increase-ts)
	(up-reset-placement g: increase-ts)
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule
	(timer-triggered one-min); MSuperiority
	(up-compare-goal excessWood >= 900); something's wrong
	(building-available castle)
(or	(up-pending-placement c: castle)
	(stone-amount >= castle-stone))
	(up-pending-objects c: castle <= 0)
	(building-type-count-total castle < 14)
	(goal wwonder no)
	(goal underattack no)
	(unit-type-count villager >= 25)
	(up-compare-goal increase-ts != 0)
=>
	(up-chat-data-to-player my-player-number "Clear building queue: Castle & %d." g: increase-ts)
	(up-reset-placement c: castle); just in case
	(set-goal increase-ts 0)
	(disable-timer increase-ts-timer))
(defrule; test
	(timer-triggered one-min)
(or	(goal attacking no)
	(up-compare-goal attackmethod != TSA))
	(up-compare-goal increase-ts == 0); hmm
=>
	(up-modify-sn sn-maximum-town-size c:min 38)); 36

#load-if-defined UP-MICHI-STYLE
#load-if-not-defined INFINITE-RESROUCES-START
;the approach is we "reflect" the gaia TC position with our TC as origin in order to get furthest possible placement
(defrule
	(building-type-count-total town-center > 2)
	(players-building-type-count every-ally market < 1)
	(cc-players-building-type-count 0 weird-gaia-market > 0) ;regular players-unit-type-count doesn't work in this situation, michi is explored anyway
	(can-build market)
	(building-type-count-total market < 2) ;presumably we already have a market from going up to castle
	=>
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-find-remote c: weird-gaia-market c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object temporary-point-x)
	(up-get-point-distance temporary-point-x position-self-x temporary-goal2)
	(up-modify-goal temporary-goal2 c:* 2)
	(up-lerp-tiles temporary-point-x position-self g: temporary-goal2)
)

(defrule
	(building-type-count-total town-center > 2)
	(players-building-type-count every-ally market < 1)
	(cc-players-building-type-count 0 weird-gaia-market > 0)
	(can-build market)
	(building-type-count-total market < 2) 
	;(up-can-build-line 0 temporary-point-x c: market)
	=>
	(up-bound-point temporary-point-x temporary-point-x)
	(set-goal temporary-goal3 20)
	)
;Backwards jump here
(defrule
	(building-type-count-total town-center > 2)
	(players-building-type-count every-ally market < 1)
	(cc-players-building-type-count 0 weird-gaia-market > 0)
	(can-build market)
	(building-type-count-total market < 2) 
	(up-can-build-line 0 temporary-point-x c: market)
	=>
	(up-build-line temporary-point-x temporary-point-x c: market)
	(up-jump-rule 2)
	(chat-local-to-self "Debug: Manually placed market")
	)


(defrule
	(building-type-count-total town-center > 2)
	(players-building-type-count every-ally market < 1)
	(cc-players-building-type-count 0 weird-gaia-market > 0)
	(can-build market)
	(building-type-count-total market < 2) 
	(up-compare-goal temporary-goal3 > 0)
	=>
	(up-modify-goal temporary-goal3 c:- 1)
	(up-lerp-tiles temporary-point-x position-self-x c: -1)
	(up-jump-rule -2)
	)

;Forwards jump here
(defrule
	(building-type-count-total town-center > 2)
	(players-building-type-count every-ally market < 1)
	(cc-players-building-type-count 0 weird-gaia-market > 0)
	(can-build market)
	(building-type-count-total market < 2) 
	=>
	(build market)
	(chat-local-to-self "Debug: Forced to manually place market")
	)

(defrule
(housing-headroom < 0)
(unit-type-count-total villager < 10)
(up-pending-objects c: house > 0)
(building-type-count-total house < 2)
=>
(up-assign-builders c: house c: 5)
)

(defrule
(current-age == dark-age)
(building-type-count house > 0)
=>
(up-assign-builders c: house c: 1)
)
#end-if
#end-if
#load-if-defined CRATER-MAP ;this doesn't really belong in buildings.per but needs to run ahead of other DUC code

(defrule
	(game-time > 270)
=>
	(up-find-local c: scout-unit c: 1)
	(up-reset-unit c: scout-unit)
	(up-get-point position-center temporary-point-x)
	(up-get-point position-corner point-x)
	(up-lerp-percent point-x temporary-point-x c: 10)
	(up-cross-tiles point-x temporary-point-x c: 2)
	(up-target-point point-x action-move -1 -1)
	(chat-to-player my-player-number "Debug: move scout towards corner")
	(disable-self)
)


(defrule
	(game-time > 340)
=>
	(up-reset-unit c: scout-unit)
	(disable-self)
)


#end-if

#load-if-defined CROSSROADS-MAP 
#load-if-not-defined DEATH-MATCH
;try simple fix first, also look into DUCing the scout to the center 
(defrule
	(building-type-count lumber-camp > 0) ;let the first be placed naturally
	(strategic-number sn-camp-max-distance < 40)
=>
	(set-strategic-number sn-camp-max-distance 40)
	(set-strategic-number sn-maximum-wood-drop-distance 60) ;better to gather wood from really far than bug entirely
)

;Attempt to DUC scout to center

(defrule
	(game-time > 300)
=>
	(up-find-local c: scout-unit c: 1)
	(up-get-point position-center temporary-point-x)
	(up-get-point position-corner point-x)
	(up-lerp-percent point-x temporary-point-x c: 60)
	(up-cross-tiles point-x temporary-point-x c: 2)
	(up-target-point point-x action-move -1 -1)
	(chat-to-player my-player-number "Debug: move scout to midpoint of corner and center")
	(disable-self)
)

#load-if-defined UP-POCKET-POSITION

(defrule
	(game-time > 365)
=>
	(up-find-local c: scout-unit c: 1)
	(up-get-point position-center temporary-point-x)
;	(up-lerp-tiles temporary-point-x position-self-x c: 15)
	(up-lerp-percent temporary-point-x position-self-x c: 30)
	(up-cross-tiles temporary-point-x position-self c: 4) ;success rate seems better doing it slightly off-center
	(up-target-point temporary-point-x action-move -1 -1)
	(chat-to-player my-player-number "Debug: move scout to center for 30 seconds")
	(disable-self)
)

(defrule
	(game-time > 420)
=>
	(up-reset-unit c: scout-unit)
	(disable-self)
)
#end-if
#load-if-defined OLD-CODE
(defrule
	(game-time > 300)
=>
	(up-find-local c: scout-unit c: 1)
	(up-get-point position-center temporary-point-x)
;	(up-lerp-tiles temporary-point-x position-self-x c: 15)
	(up-lerp-percent temporary-point-x position-self-x c: 30)
	(up-cross-tiles temporary-point-x position-self c: 4) ;success rate seems better doing it slightly off-center
	(up-target-point temporary-point-x action-move -1 -1)
	(chat-to-player my-player-number "Debug: move scout to center for 30 seconds")
	(disable-self)
)

(defrule
	(game-time > 330)
=>
	(up-find-local c: scout-unit c: 1)
	(up-get-point position-center temporary-point-x)
;	(up-lerp-tiles temporary-point-x position-self-x c: 15)
	(up-lerp-percent temporary-point-x position-self-x c: 30)
	(up-cross-tiles temporary-point-x position-self c: -4) ;create a slight zigzag
	(up-target-point temporary-point-x action-move -1 -1)
	(chat-to-player my-player-number "Debug: move scout to center for 30 seconds")
	(disable-self)
)

(defrule
	(game-time > 300)
	(game-time < 360)
	(timer-triggered threesec)
=>
	(up-full-reset-search)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object temporary-point-x)
	(up-set-target-point temporary-point-x)
)

;Idea once the scout finds rock terrian, move him in a straight line away from town
(defrule
	(game-time > 300)
	(game-time < 360)
	(timer-triggered threesec)
	(up-point-terrain temporary-point-x == 40) ;Rock1 terrain
=>
	(up-lerp-tiles temporary-point-x position-self-x c: -8)
	(up-target-point temporary-point-x action-move -1 -1)
	(chat-local-to-self "Debug: Found rock terrian, move scout inwards")
)
#end-if
(defrule
	(game-time > 360)
=>
	(up-reset-unit c: scout-unit)
	(disable-self)
)
#end-if
#end-if

(defrule	
	(strategic-number sn-corner-cut-state >= 3)
	(can-build market)
	(building-type-count-total market < 6)
	(building-type-count-total town-center > 0)
	
=>
	(up-get-point position-corner temporary-point-x)
	(set-goal temporary-goal3 10)
)
;Backwards jump ends (-2)
(defrule
	(strategic-number sn-corner-cut-state >= 3)
	(can-build market)
	(building-type-count-total town-center > 0)
	(up-can-build-line 0 temporary-point-x c: market)
	(building-type-count-total market < 6)
=>
	(up-build-line temporary-point-x temporary-point-x c: market)
	(up-jump-rule 1)
)


(defrule	
	(strategic-number sn-corner-cut-state >= 3)
	(can-build market)
	(building-type-count-total market < 6)
	(building-type-count-total town-center > 0)
	(up-compare-goal temporary-goal3 > 0)
=>
	(up-lerp-tiles temporary-point-x position-self-x c: 1)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-jump-rule -2)
)


;Forwards jump ends (1)
(defrule
	(strategic-number sn-corner-cut-state >= 4)
	(building-type-count-total market > 3)
	(building-type-count-total town-center > 0)
	(wood-amount > 200)
	(can-build market)
	(unit-type-count-total trade-cart > twenty-pop)
=>
	(delete-building market) ;1.0c command so ignores foundations
	(delete-building market)
	(disable-self)
)


(defrule
	(timer-triggered two-mins)
	(strategic-number sn-corner-cut-state >= 3)
	(can-build market)
	(building-type-count-total market < 6)
	(building-type-count-total town-center > 0)
	(wood-amount > 300)
=>
	(up-get-point position-corner point-x)
	(up-get-point position-center point2-x)
	(up-bound-point point-x point-x)
	(set-goal temporary-goal3 7)
)

;Jump ends (-2)
(defrule
	(timer-triggered two-mins)
	(strategic-number sn-corner-cut-state >= 3)
	(can-build market)
	(building-type-count-total market < 6)
	(building-type-count-total town-center > 0)
	(wood-amount > 300)
	(up-can-build-line 0 point-x c: market)
=>
	(up-build-line point-x point-x c: market)
	(up-jump-rule 1)
)


(defrule
	(timer-triggered two-mins)
	(strategic-number sn-corner-cut-state >= 3)
	(can-build market)
	(building-type-count-total market < 6)
	(building-type-count-total town-center > 0)
	(wood-amount > 300)
	(up-compare-goal temporary-goal3 > 0)
=>
	(up-lerp-tiles point-x point2-x c: 2)
	(up-modify-goal temporary-goal3 c:- 1)
	(up-jump-rule -2)
)
;Jump ends (1)
	
;TO-DO (low priority) investigate going up with market + blacksmith in michi
;Also look into khmer start, atm it builds a farm before LC which is cool but questionable

#load-if-defined BOHEMIANS-CIV

(defrule
	(building-type-count-total town-center > 0)
	(or(wood-amount > 500)
	(building-type-count-total town-center > 2))
	(unit-type-count-total villager > thirty-pop)
	(can-build monastery)
	(current-age >= castle-age)
	(building-type-count-total monastery < 1)
=>
	(build monastery)
)

(defrule
	(players-military-population my-player-number > 12)
	(can-build-with-escrow monastery)
	(building-type-count-total monastery < 1)
	(building-type-count-total town-center > 0)
	(unit-type-count-total villager > twenty-pop)
=>
	(release-escrow wood)
	(build monastery)
)
#end-if

(defrule
	(strategic-number sn-corner-cut-state >= 8)
	(can-build market)
	(building-type-count-total market < 7)
=>
	(set-goal temporary-goal3 10)
	(up-get-point position-corner temporary-point-x)
	(up-get-point position-center point2-x)
	(up-get-point position-center point-x)
	(up-get-point position-corner point3-x)
	(up-get-point-distance temporary-point-x point-x temporary-goal)
	(up-cross-tiles temporary-point-x point-x g: temporary-goal)
	(up-get-fact player-number my-player-number temporary-goal2)
)


(defrule
	(strategic-number sn-corner-cut-state >= 8)
	(can-build market)
	(building-type-count-total market < 7)
=>

	(up-modify-goal temporary-goal2 c:* 2)
	(up-lerp-tiles temporary-point-x point2-x g: temporary-goal2)
;	(up-modify-goal temporary-goal2 c:* -1)
;	(up-lerp-tiles point-x point2-x g: temporary-goal2)
	(up-bound-point point-x point-x)
	(up-bound-point point2-x point2-x)
	(up-bound-point temporary-point-x temporary-point-x)
)
;End jump (-2)
(defrule
	(strategic-number sn-corner-cut-state >= 8)
	(can-build market)
	(up-can-build-line 0 temporary-point-x c: market)
	(building-type-count-total market < 7)
=>
	(up-build-line temporary-point-x temporary-point-x c: market)
	(up-jump-rule 1)
)

(defrule
	(strategic-number sn-corner-cut-state >= 8)
	(can-build market)
	(up-compare-goal temporary-goal3 > 0)
	(building-type-count-total market < 7)
=>
	(up-lerp-tiles temporary-point-x point3-x c: 1)
	(up-bound-point temporary-point-x temporary-point-x)
	(up-modify-goal temporary-goal3 c: -1)
	(up-jump-rule -2)
)
;End jump (1)

(defrule
	(strategic-number sn-corner-cut-state >= 8)
	(can-build market)
	(timer-triggered two-mins)
	(up-pending-objects c: market < 1)
	(building-type-count-total market < 7)
=>	
	(set-goal temporary-goal3 15)
	(up-get-point position-corner temporary-point-x)
	(up-get-point position-center point2-x)
	(up-get-point position-center point-x)
	(up-get-point position-corner point3-x)
	(up-get-point-distance temporary-point-x point-x temporary-goal)
	(up-cross-tiles temporary-point-x point-x g: temporary-goal)
;	(up-get-fact player-number my-player-number temporary-goal2)
)


(defrule
	(strategic-number sn-corner-cut-state >= 8)
	(can-build market)
	(timer-triggered two-mins)
	(up-pending-objects c: market < 1)
	(building-type-count-total market < 7)
=>
;	(up-modify-goal temporary-goal2 c:* 2)
	(up-lerp-tiles temporary-point-x point3-x c: 5)
;	(up-modify-goal temporary-goal2 c:* -1)
;	(up-lerp-tiles point-x point3-x g: temporary-goal2)
	(up-bound-point point-x point-x)
	(up-bound-point point2-x point2-x)
)


(defrule
	(strategic-number sn-corner-cut-state >= 8)
	(can-build market)
	(timer-triggered two-mins)
	(up-pending-objects c: market < 1)
	(building-type-count-total market < 7)
	(up-can-build-line 0 temporary-point-x c: market)
=>
	(up-build-line temporary-point-x temporary-point-x c: market)
	(up-jump-rule 1)
)


(defrule
	(strategic-number sn-corner-cut-state >= 8)
	(can-build market)
	(timer-triggered two-mins)
	(up-pending-objects c: market < 1)
	(building-type-count-total market < 7)
	(up-compare-goal temporary-goal3 > 0)
=>
	(up-modify-goal temporary-goal3 c:- 1)
	(up-lerp-tiles temporary-point-x point2-x c: 1)
	(up-jump-rule -2)
)


;OK final backup rule - if all else fails try a random nearby point!

(defrule
	(players-building-type-count market any-computer-ally > 6) ;this is to prevent ally markets blocking each other
	(building-type-count-total market < 6)
=>
	(up-jump-rule 3)
)


(defrule
	(strategic-number sn-corner-cut-state >= 7)
	(can-build market)
	(timer-triggered threesec)
	(up-pending-objects c: market < 1)
	(building-type-count-total market < 6)
=>

	(up-get-point position-center temporary-point-x)
	(up-get-point position-center point2-x)
	(up-get-point position-corner point-x)
	(up-get-point-distance temporary-point-x point-x temporary-goal)
	(up-cross-tiles temporary-point-x point-x g: temporary-goal)
	(generate-random-number 30)
	(up-get-fact random-number 0 temporary-goal2)
	(generate-random-number 30)
	(up-get-fact random-number 0 temporary-goal3)
)


(defrule
	(strategic-number sn-corner-cut-state >= 7)
	(can-build market)
	(timer-triggered threesec)
	(up-pending-objects c: market < 1)
	(building-type-count-total market < 6)
=>
;	(up-send-flare point-x)
	(up-copy-point point-x temporary-point-x)
	(up-modify-goal point-x c:- 13)
	(up-modify-goal point-y c:- 13)
	(up-modify-goal point-x g:+ temporary-goal2)
	(up-modify-goal point-y g:+ temporary-goal3)
	(up-bound-point point-x point-x)
;	(chat-to-player 1 "Debug: random placement")
;	(up-send-flare point-x)
)


(defrule
	(strategic-number sn-corner-cut-state >= 7)
	(can-build market)
	(timer-triggered threesec)
	(up-pending-objects c: market < 1)
	(building-type-count-total market < 6)
	(up-can-build-line 0 point-x c: market)
=>
	(up-build-line point-x point-x c: market)
;	(chat-to-player my-player-number "Random placement!")
)

(defrule
	(strategic-number sn-corner-cut-state == 8)
	(up-allied-sn every-ally sn-corner-cut-state < 8)
	(building-type-count-total market == 6)
=>
	(delete-building market)
	(disable-self)
)
#load-if-defined POLES-CIV

(defrule
	(can-build mining-camp)
	(building-type-count-total mining-camp < 2)
	(resource-found stone)
	(current-age >= feudal-age)
	(up-research-status c: castle-age != 1)
=>
	(build mining-camp)
)

#end-if

